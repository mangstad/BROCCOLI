//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Mon Nov  9 01:49:33 2015 (1447051773)
// Driver 304.131
//

.version 3.0
.target sm_20, texmode_independent
.address_size 32

.const .align 1 .b8 $str[31] = {99, 97, 110, 110, 111, 116, 32, 114, 101, 97, 100, 32, 95, 95, 119, 114, 105, 116, 101, 95, 111, 110, 108, 121, 32, 105, 109, 97, 103, 101, 0};
.const .align 4 .b8 __GPU_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.visible .global .samplerref volume_sampler_nearest = { addr_mode_0 = clamp_to_edge, addr_mode_1 = clamp_to_edge, addr_mode_2 = clamp_to_edge, filter_mode = nearest, force_unnormalized_coords = 1 };
.visible .global .samplerref volume_sampler_linear = { addr_mode_0 = clamp_to_edge, addr_mode_1 = clamp_to_edge, addr_mode_2 = clamp_to_edge, filter_mode = linear, force_unnormalized_coords = 1 };

.entry CalculatePhaseDifferencesAndCertainties(
	.param .u32 .ptr .global .align 4 CalculatePhaseDifferencesAndCertainties_param_0,
	.param .u32 .ptr .global .align 4 CalculatePhaseDifferencesAndCertainties_param_1,
	.param .u32 .ptr .global .align 8 CalculatePhaseDifferencesAndCertainties_param_2,
	.param .u32 .ptr .global .align 8 CalculatePhaseDifferencesAndCertainties_param_3,
	.param .u32 CalculatePhaseDifferencesAndCertainties_param_4,
	.param .u32 CalculatePhaseDifferencesAndCertainties_param_5,
	.param .u32 CalculatePhaseDifferencesAndCertainties_param_6
)
{
	.local .align 4 .b8 	__local_depot0[28];
	.reg .b32 	%SP;
	.reg .f32 	%f<118>;
	.reg .pred 	%p<38>;
	.reg .s32 	%r<183>;


	mov.u32 	%SP, __local_depot0;
	ld.param.u32 	%r5, [CalculatePhaseDifferencesAndCertainties_param_4];
	ld.param.u32 	%r6, [CalculatePhaseDifferencesAndCertainties_param_5];
	ld.param.u32 	%r62, [CalculatePhaseDifferencesAndCertainties_param_6];
	// inline asm
	mov.u32 	%r50, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r51, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r52, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r53, %tid.x;
	// inline asm
	add.s32 	%r63, %r53, %r50;
	mad.lo.s32 	%r7, %r52, %r51, %r63;
	// inline asm
	mov.u32 	%r54, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r55, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r56, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r57, %tid.y;
	// inline asm
	add.s32 	%r64, %r57, %r54;
	mad.lo.s32 	%r8, %r56, %r55, %r64;
	// inline asm
	mov.u32 	%r58, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r59, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r60, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r61, %tid.z;
	// inline asm
	add.s32 	%r65, %r61, %r58;
	mad.lo.s32 	%r9, %r60, %r59, %r65;
	setp.lt.s32 	%p1, %r7, %r5;
	setp.lt.s32 	%p2, %r8, %r6;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r62;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	ret;

BB0_2:
	ld.param.u32 	%r171, [CalculatePhaseDifferencesAndCertainties_param_5];
	mad.lo.s32 	%r66, %r9, %r171, %r8;
	ld.param.u32 	%r170, [CalculatePhaseDifferencesAndCertainties_param_4];
	mad.lo.s32 	%r10, %r66, %r170, %r7;
	shl.b32 	%r67, %r10, 3;
	ld.param.u32 	%r168, [CalculatePhaseDifferencesAndCertainties_param_2];
	add.s32 	%r68, %r168, %r67;
	ld.param.u32 	%r169, [CalculatePhaseDifferencesAndCertainties_param_3];
	add.s32 	%r69, %r169, %r67;
	ld.global.v2.f32 	{%f108, %f109}, [%r68];
	ld.global.v2.f32 	{%f110, %f111}, [%r69];
	mul.f32 	%f1, %f108, %f110;
	mul.f32 	%f2, %f109, %f111;
	fma.rn.f32 	%f33, %f108, %f110, %f2;
	mul.f32 	%f4, %f109, %f110;
	mul.f32 	%f5, %f108, %f111;
	neg.f32 	%f40, %f108;
	fma.rn.f32 	%f35, %f40, %f111, %f4;
	// inline asm
	abs.f32 	%f32, %f33;
	// inline asm
	// inline asm
	abs.f32 	%f34, %f35;
	// inline asm
	setp.eq.f32 	%p6, %f34, 0f00000000;
	setp.eq.f32 	%p7, %f32, 0f00000000;
	and.pred  	%p8, %p6, %p7;
	@%p8 bra 	BB0_8;

	setp.eq.f32 	%p9, %f34, 0f7F800000;
	setp.eq.f32 	%p10, %f32, 0f7F800000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_7;

	setp.lt.f32 	%p12, %f32, %f34;
	selp.f32 	%f42, %f34, %f32, %p12;
	selp.f32 	%f113, %f32, %f34, %p12;
	// inline asm
	abs.f32 	%f41, %f42;
	// inline asm
	setp.gt.f32 	%p13, %f41, 0f7E800000;
	mov.f32 	%f112, %f42;
	@%p13 bra 	BB0_5;
	bra.uni 	BB0_6;

BB0_5:
	mov.f32 	%f43, 0f3E800000;
	mul.rn.f32 	%f113, %f113, %f43;
	mul.rn.f32 	%f112, %f42, %f43;

BB0_6:
	// inline asm
	div.approx.f32 	%f44, %f113, %f112;
	// inline asm
	mul.rn.f32 	%f47, %f44, %f44;
	mov.f32 	%f48, 0fBF52C7EA;
	mul.rn.f32 	%f49, %f47, %f48;
	add.f32 	%f50, %f49, 0fC0B59883;
	mul.rn.f32 	%f51, %f50, %f47;
	add.f32 	%f52, %f51, 0fC0D21907;
	mul.rn.f32 	%f53, %f52, %f47;
	mul.rn.f32 	%f54, %f53, %f44;
	add.f32 	%f55, %f47, 0f41355DC0;
	mul.rn.f32 	%f56, %f55, %f47;
	add.f32 	%f57, %f56, 0f41E6BD60;
	mul.rn.f32 	%f58, %f57, %f47;
	add.f32 	%f59, %f58, 0f419D92C8;
	rcp.approx.f32 	%f60, %f59;
	mul.rn.f32 	%f61, %f54, %f60;
	add.f32 	%f62, %f61, %f44;
	mov.f32 	%f63, 0f3FC90FDB;
	sub.f32 	%f64, %f63, %f62;
	setp.gt.f32 	%p14, %f34, %f32;
	selp.f32 	%f65, %f64, %f62, %p14;
	add.f32 	%f66, %f1, %f2;
	setp.lt.f32 	%p15, %f66, 0f00000000;
	mov.f32 	%f67, 0f40490FDB;
	sub.f32 	%f68, %f67, %f65;
	selp.f32 	%f114, %f68, %f65, %p15;
	bra.uni 	BB0_9;

BB0_7:
	mov.b32 	 %r70, %f33;
	setp.lt.s32 	%p16, %r70, 0;
	selp.f32 	%f114, 0f4016CBE4, 0f3F490FDB, %p16;
	bra.uni 	BB0_9;

BB0_8:
	mov.b32 	 %r71, %f33;
	setp.lt.s32 	%p17, %r71, 0;
	selp.f32 	%f114, 0f40490FDB, 0f00000000, %p17;

BB0_9:
	sub.f32 	%f69, %f4, %f5;
	mov.b32 	 %r72, %f69;
	and.b32  	%r73, %r72, -2147483648;
	mov.b32 	 %r74, %f114;
	and.b32  	%r75, %r74, 2147483647;
	or.b32  	%r76, %r75, %r73;
	mov.b32 	 %f18, %r76;
	sub.f32 	%f19, %f1, %f2;
	add.f32 	%f20, %f4, %f5;
	mul.f32 	%f21, %f18, 0f3F000000;
	setp.eq.f32 	%p18, %f21, 0f7F800000;
	setp.eq.f32 	%p19, %f21, 0fFF800000;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	BB0_28;

	// inline asm
	abs.f32 	%f70, %f21;
	// inline asm
	setp.gt.f32 	%p21, %f70, 0f473BA700;
	@%p21 bra 	BB0_12;

	mov.f32 	%f74, 0f3F22F983;
	mul.rn.f32 	%f73, %f21, %f74;
	// inline asm
	cvt.rni.f32.f32 	%f72, %f73;
	// inline asm
	cvt.rzi.s32.f32 	%r182, %f72;
	cvt.rn.f32.s32 	%f75, %r182;
	mov.f32 	%f76, 0f3FC90000;
	mul.rn.f32 	%f77, %f75, %f76;
	sub.f32 	%f78, %f21, %f77;
	mov.f32 	%f79, 0f39FD8000;
	mul.rn.f32 	%f80, %f75, %f79;
	sub.f32 	%f81, %f78, %f80;
	mov.f32 	%f82, 0f34A88000;
	mul.rn.f32 	%f83, %f75, %f82;
	sub.f32 	%f84, %f81, %f83;
	mov.f32 	%f85, 0f2E85A309;
	mul.rn.f32 	%f86, %f75, %f85;
	sub.f32 	%f115, %f84, %f86;
	bra.uni 	BB0_24;

BB0_12:
	mov.b32 	 %r12, %f21;
	and.b32  	%r174, %r12, -2147483648;
	shr.u32 	%r14, %r12, 23;
	and.b32  	%r95, %r14, 255;
	add.s32 	%r96, %r95, -128;
	shl.b32 	%r97, %r12, 8;
	or.b32  	%r94, %r97, -2147483648;
	shr.u32 	%r98, %r96, 5;
	mov.u32 	%r99, 4;
	sub.s32 	%r100, %r99, %r98;
	ld.const.u32 	%r78, [__GPU_i2opi_f];
	mul.lo.s32 	%r101, %r78, %r94;
	// inline asm
	mul.hi.u32 	%r77, %r78, %r94;
	// inline asm
	add.u32 	%r102, %SP, 0;
	st.local.u32 	[%SP+0], %r101;
	ld.const.u32 	%r81, [__GPU_i2opi_f+4];
	mul.lo.s32 	%r103, %r81, %r94;
	// inline asm
	mul.hi.u32 	%r80, %r81, %r94;
	// inline asm
	mad.lo.s32 	%r104, %r81, %r94, %r77;
	st.local.u32 	[%SP+4], %r104;
	setp.lt.u32 	%p22, %r104, %r103;
	selp.u32 	%r105, 1, 0, %p22;
	add.s32 	%r106, %r105, %r80;
	ld.const.u32 	%r84, [__GPU_i2opi_f+8];
	mul.lo.s32 	%r107, %r84, %r94;
	// inline asm
	mul.hi.u32 	%r83, %r84, %r94;
	// inline asm
	mad.lo.s32 	%r108, %r84, %r94, %r106;
	st.local.u32 	[%SP+8], %r108;
	setp.lt.u32 	%p23, %r108, %r107;
	selp.u32 	%r109, 1, 0, %p23;
	add.s32 	%r110, %r109, %r83;
	ld.const.u32 	%r87, [__GPU_i2opi_f+12];
	mul.lo.s32 	%r111, %r87, %r94;
	// inline asm
	mul.hi.u32 	%r86, %r87, %r94;
	// inline asm
	mad.lo.s32 	%r112, %r87, %r94, %r110;
	st.local.u32 	[%SP+12], %r112;
	setp.lt.u32 	%p24, %r112, %r111;
	selp.u32 	%r113, 1, 0, %p24;
	add.s32 	%r114, %r113, %r86;
	ld.const.u32 	%r90, [__GPU_i2opi_f+16];
	mul.lo.s32 	%r115, %r90, %r94;
	// inline asm
	mul.hi.u32 	%r89, %r90, %r94;
	// inline asm
	mad.lo.s32 	%r116, %r90, %r94, %r114;
	st.local.u32 	[%SP+16], %r116;
	setp.lt.u32 	%p25, %r116, %r115;
	selp.u32 	%r117, 1, 0, %p25;
	add.s32 	%r118, %r117, %r89;
	ld.const.u32 	%r93, [__GPU_i2opi_f+20];
	mul.lo.s32 	%r119, %r93, %r94;
	// inline asm
	mul.hi.u32 	%r92, %r93, %r94;
	// inline asm
	mad.lo.s32 	%r120, %r93, %r94, %r118;
	st.local.u32 	[%SP+20], %r120;
	setp.lt.u32 	%p26, %r120, %r119;
	selp.u32 	%r121, 1, 0, %p26;
	add.s32 	%r122, %r121, %r92;
	st.local.u32 	[%SP+24], %r122;
	and.b32  	%r15, %r14, 31;
	shl.b32 	%r123, %r100, 2;
	add.s32 	%r124, %r123, %r102;
	add.s32 	%r16, %r124, -16;
	ld.local.u32 	%r172, [%r124+8];
	ld.local.u32 	%r173, [%r124+4];
	setp.eq.s32 	%p27, %r15, 0;
	@%p27 bra 	BB0_14;

	shl.b32 	%r125, %r172, %r15;
	neg.s32 	%r126, %r14;
	and.b32  	%r127, %r126, 31;
	shr.u32 	%r128, %r173, %r127;
	or.b32  	%r172, %r128, %r125;
	ld.local.u32 	%r129, [%r16+16];
	shr.u32 	%r130, %r129, %r127;
	shl.b32 	%r131, %r173, %r15;
	or.b32  	%r173, %r130, %r131;

BB0_14:
	shr.u32 	%r132, %r173, 30;
	shl.b32 	%r133, %r172, 2;
	or.b32  	%r178, %r132, %r133;
	shl.b32 	%r24, %r173, 2;
	setp.ne.s32 	%p28, %r24, 0;
	selp.u32 	%r134, 1, 0, %p28;
	add.s32 	%r135, %r134, %r178;
	setp.gt.u32 	%p29, %r135, -2147483648;
	selp.u32 	%r136, 1, 0, %p29;
	shr.u32 	%r137, %r172, 30;
	add.s32 	%r138, %r136, %r137;
	neg.s32 	%r139, %r138;
	setp.lt.s32 	%p30, %r12, 0;
	selp.b32 	%r182, %r139, %r138, %p30;
	@%p29 bra 	BB0_16;

	mov.u32 	%r177, %r24;
	bra.uni 	BB0_17;

BB0_16:
	not.b32 	%r140, %r178;
	neg.s32 	%r26, %r24;
	setp.eq.s32 	%p31, %r24, 0;
	selp.u32 	%r141, 1, 0, %p31;
	add.s32 	%r178, %r141, %r140;
	xor.b32  	%r174, %r174, -2147483648;
	mov.u32 	%r177, %r26;

BB0_17:
	mov.u32 	%r176, %r177;
	setp.gt.s32 	%p32, %r178, 0;
	@%p32 bra 	BB0_19;

	mov.u32 	%r181, 0;
	bra.uni 	BB0_21;

BB0_19:
	mov.u32 	%r181, 0;

BB0_20:
	shr.u32 	%r144, %r176, 31;
	shl.b32 	%r145, %r178, 1;
	or.b32  	%r178, %r144, %r145;
	shl.b32 	%r176, %r176, 1;
	add.s32 	%r181, %r181, -1;
	setp.gt.s32 	%p33, %r178, 0;
	@%p33 bra 	BB0_20;

BB0_21:
	mul.lo.s32 	%r180, %r178, -921707870;
	mov.u32 	%r148, -921707870;
	// inline asm
	mul.hi.u32 	%r146, %r178, %r148;
	// inline asm
	setp.gt.s32 	%p34, %r146, 0;
	mov.u32 	%r179, %r146;
	@%p34 bra 	BB0_22;
	bra.uni 	BB0_23;

BB0_22:
	shl.b32 	%r149, %r146, 1;
	shr.u32 	%r150, %r180, 31;
	or.b32  	%r179, %r149, %r150;
	mul.lo.s32 	%r180, %r178, -1843415740;
	add.s32 	%r181, %r181, -1;

BB0_23:
	setp.ne.s32 	%p35, %r180, 0;
	selp.u32 	%r151, 1, 0, %p35;
	add.s32 	%r152, %r151, %r179;
	shr.u32 	%r153, %r152, 8;
	shr.u32 	%r154, %r152, 7;
	and.b32  	%r155, %r154, 1;
	shl.b32 	%r156, %r181, 23;
	add.s32 	%r157, %r156, %r153;
	add.s32 	%r158, %r157, %r155;
	add.s32 	%r159, %r158, 1056964608;
	or.b32  	%r160, %r159, %r174;
	mov.b32 	 %f115, %r160;

BB0_24:
	add.s32 	%r49, %r182, 1;
	and.b32  	%r161, %r49, 1;
	setp.eq.s32 	%p36, %r161, 0;
	mul.rn.f32 	%f25, %f115, %f115;
	@%p36 bra 	BB0_26;

	mov.f32 	%f87, 0f37CCF5CE;
	mul.rn.f32 	%f88, %f87, %f25;
	add.f32 	%f89, %f88, 0fBAB6061A;
	mul.rn.f32 	%f90, %f89, %f25;
	add.f32 	%f91, %f90, 0f3D2AAAA5;
	mul.rn.f32 	%f92, %f91, %f25;
	add.f32 	%f93, %f92, 0fBF000000;
	mul.rn.f32 	%f94, %f93, %f25;
	add.f32 	%f116, %f94, 0f3F800000;
	bra.uni 	BB0_27;

BB0_26:
	mov.f32 	%f95, 0fB94CA1F9;
	mul.rn.f32 	%f96, %f95, %f25;
	add.f32 	%f97, %f96, 0f3C08839E;
	mul.rn.f32 	%f98, %f97, %f25;
	add.f32 	%f99, %f98, 0fBE2AAAA3;
	mul.rn.f32 	%f100, %f99, %f25;
	mul.rn.f32 	%f101, %f100, %f115;
	add.f32 	%f116, %f101, %f115;

BB0_27:
	and.b32  	%r162, %r49, 2;
	setp.eq.s32 	%p37, %r162, 0;
	neg.f32 	%f102, %f116;
	selp.f32 	%f117, %f116, %f102, %p37;
	bra.uni 	BB0_29;

BB0_28:
	mov.f32 	%f117, 0f7FFFFFFF;

BB0_29:
	shl.b32 	%r163, %r10, 2;
	ld.param.u32 	%r166, [CalculatePhaseDifferencesAndCertainties_param_0];
	add.s32 	%r164, %r166, %r163;
	st.global.f32 	[%r164], %f18;
	mul.f32 	%f105, %f20, %f20;
	fma.rn.f32 	%f104, %f19, %f19, %f105;
	// inline asm
	sqrt.approx.f32 	%f103, %f104;
	// inline asm
	mul.f32 	%f106, %f103, %f117;
	mul.f32 	%f107, %f106, %f117;
	ld.param.u32 	%r167, [CalculatePhaseDifferencesAndCertainties_param_1];
	add.s32 	%r165, %r167, %r163;
	st.global.f32 	[%r165], %f107;
	ret;
}

.entry CalculatePhaseGradientsX(
	.param .u32 .ptr .global .align 4 CalculatePhaseGradientsX_param_0,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsX_param_1,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsX_param_2,
	.param .u32 CalculatePhaseGradientsX_param_3,
	.param .u32 CalculatePhaseGradientsX_param_4,
	.param .u32 CalculatePhaseGradientsX_param_5
)
{
	.reg .f32 	%f<99>;
	.reg .pred 	%p<22>;
	.reg .s32 	%r<50>;


	ld.param.u32 	%r4, [CalculatePhaseGradientsX_param_3];
	ld.param.u32 	%r5, [CalculatePhaseGradientsX_param_4];
	ld.param.u32 	%r23, [CalculatePhaseGradientsX_param_5];
	// inline asm
	mov.u32 	%r11, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.x;
	// inline asm
	add.s32 	%r24, %r14, %r11;
	mad.lo.s32 	%r6, %r13, %r12, %r24;
	// inline asm
	mov.u32 	%r15, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.y;
	// inline asm
	add.s32 	%r25, %r18, %r15;
	mad.lo.s32 	%r7, %r17, %r16, %r25;
	// inline asm
	mov.u32 	%r19, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %tid.z;
	// inline asm
	add.s32 	%r26, %r22, %r19;
	mad.lo.s32 	%r8, %r21, %r20, %r26;
	add.s32 	%r9, %r6, 1;
	add.s32 	%r27, %r6, -1;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r9, %r4;
	and.pred  	%p3, %p2, %p1;
	setp.gt.s32 	%p4, %r27, -1;
	and.pred  	%p5, %p3, %p4;
	setp.lt.s32 	%p6, %r7, %r5;
	and.pred  	%p7, %p6, %p5;
	setp.lt.s32 	%p8, %r8, %r23;
	and.pred  	%p9, %p7, %p8;
	@%p9 bra 	BB1_2;

	ret;

BB1_2:
	ld.param.u32 	%r49, [CalculatePhaseGradientsX_param_4];
	mad.lo.s32 	%r28, %r8, %r49, %r7;
	ld.param.u32 	%r48, [CalculatePhaseGradientsX_param_3];
	mad.lo.s32 	%r10, %r28, %r48, %r6;
	mad.lo.s32 	%r29, %r28, %r48, %r9;
	shl.b32 	%r30, %r29, 3;
	ld.param.u32 	%r46, [CalculatePhaseGradientsX_param_1];
	add.s32 	%r31, %r46, %r30;
	shl.b32 	%r32, %r10, 3;
	add.s32 	%r33, %r46, %r32;
	ld.global.v2.f32 	{%f84, %f85}, [%r31];
	ld.global.v2.f32 	{%f86, %f87}, [%r33];
	mul.f32 	%f23, %f85, %f87;
	fma.rn.f32 	%f24, %f84, %f86, %f23;
	add.f32 	%f25, %f24, 0f00000000;
	mul.f32 	%f26, %f85, %f86;
	neg.f32 	%f27, %f84;
	fma.rn.f32 	%f28, %f27, %f87, %f26;
	add.f32 	%f29, %f28, 0f00000000;
	ld.global.v2.f32 	{%f88, %f89}, [%r31+-16];
	mul.f32 	%f32, %f87, %f89;
	fma.rn.f32 	%f33, %f86, %f88, %f32;
	add.f32 	%f34, %f25, %f33;
	mul.f32 	%f35, %f87, %f88;
	neg.f32 	%f36, %f86;
	fma.rn.f32 	%f37, %f36, %f89, %f35;
	add.f32 	%f38, %f29, %f37;
	ld.param.u32 	%r47, [CalculatePhaseGradientsX_param_2];
	add.s32 	%r34, %r47, %r30;
	add.s32 	%r35, %r47, %r32;
	ld.global.v2.f32 	{%f90, %f91}, [%r34];
	ld.global.v2.f32 	{%f92, %f93}, [%r35];
	mul.f32 	%f43, %f91, %f93;
	fma.rn.f32 	%f44, %f90, %f92, %f43;
	add.f32 	%f45, %f34, %f44;
	mul.f32 	%f46, %f91, %f92;
	neg.f32 	%f47, %f90;
	fma.rn.f32 	%f48, %f47, %f93, %f46;
	add.f32 	%f49, %f38, %f48;
	ld.global.v2.f32 	{%f94, %f95}, [%r34+-16];
	mul.f32 	%f52, %f93, %f95;
	fma.rn.f32 	%f53, %f92, %f94, %f52;
	add.f32 	%f16, %f45, %f53;
	mul.f32 	%f54, %f93, %f94;
	neg.f32 	%f55, %f92;
	fma.rn.f32 	%f56, %f55, %f95, %f54;
	add.f32 	%f18, %f49, %f56;
	// inline asm
	abs.f32 	%f15, %f16;
	// inline asm
	// inline asm
	abs.f32 	%f17, %f18;
	// inline asm
	setp.eq.f32 	%p10, %f17, 0f00000000;
	setp.eq.f32 	%p11, %f15, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB1_8;

	setp.eq.f32 	%p13, %f17, 0f7F800000;
	setp.eq.f32 	%p14, %f15, 0f7F800000;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	BB1_7;

	setp.lt.f32 	%p16, %f15, %f17;
	selp.f32 	%f58, %f17, %f15, %p16;
	selp.f32 	%f97, %f15, %f17, %p16;
	// inline asm
	abs.f32 	%f57, %f58;
	// inline asm
	setp.gt.f32 	%p17, %f57, 0f7E800000;
	mov.f32 	%f96, %f58;
	@%p17 bra 	BB1_5;
	bra.uni 	BB1_6;

BB1_5:
	mov.f32 	%f59, 0f3E800000;
	mul.rn.f32 	%f97, %f97, %f59;
	mul.rn.f32 	%f96, %f58, %f59;

BB1_6:
	// inline asm
	div.approx.f32 	%f60, %f97, %f96;
	// inline asm
	mul.rn.f32 	%f63, %f60, %f60;
	mov.f32 	%f64, 0fBF52C7EA;
	mul.rn.f32 	%f65, %f63, %f64;
	add.f32 	%f66, %f65, 0fC0B59883;
	mul.rn.f32 	%f67, %f66, %f63;
	add.f32 	%f68, %f67, 0fC0D21907;
	mul.rn.f32 	%f69, %f68, %f63;
	mul.rn.f32 	%f70, %f69, %f60;
	add.f32 	%f71, %f63, 0f41355DC0;
	mul.rn.f32 	%f72, %f71, %f63;
	add.f32 	%f73, %f72, 0f41E6BD60;
	mul.rn.f32 	%f74, %f73, %f63;
	add.f32 	%f75, %f74, 0f419D92C8;
	rcp.approx.f32 	%f76, %f75;
	mul.rn.f32 	%f77, %f70, %f76;
	add.f32 	%f78, %f77, %f60;
	mov.f32 	%f79, 0f3FC90FDB;
	sub.f32 	%f80, %f79, %f78;
	setp.gt.f32 	%p18, %f17, %f15;
	selp.f32 	%f81, %f80, %f78, %p18;
	mov.f32 	%f82, 0f40490FDB;
	sub.f32 	%f83, %f82, %f81;
	setp.lt.f32 	%p19, %f16, 0f00000000;
	selp.f32 	%f98, %f83, %f81, %p19;
	bra.uni 	BB1_9;

BB1_7:
	mov.b32 	 %r36, %f16;
	setp.lt.s32 	%p20, %r36, 0;
	selp.f32 	%f98, 0f4016CBE4, 0f3F490FDB, %p20;
	bra.uni 	BB1_9;

BB1_8:
	mov.b32 	 %r37, %f16;
	setp.lt.s32 	%p21, %r37, 0;
	selp.f32 	%f98, 0f40490FDB, 0f00000000, %p21;

BB1_9:
	mov.b32 	 %r38, %f18;
	and.b32  	%r39, %r38, -2147483648;
	mov.b32 	 %r40, %f98;
	and.b32  	%r41, %r40, 2147483647;
	or.b32  	%r42, %r41, %r39;
	shl.b32 	%r43, %r10, 2;
	ld.param.u32 	%r45, [CalculatePhaseGradientsX_param_0];
	add.s32 	%r44, %r45, %r43;
	st.global.u32 	[%r44], %r42;
	ret;
}

.entry CalculatePhaseGradientsY(
	.param .u32 .ptr .global .align 4 CalculatePhaseGradientsY_param_0,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsY_param_1,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsY_param_2,
	.param .u32 CalculatePhaseGradientsY_param_3,
	.param .u32 CalculatePhaseGradientsY_param_4,
	.param .u32 CalculatePhaseGradientsY_param_5
)
{
	.reg .f32 	%f<99>;
	.reg .pred 	%p<22>;
	.reg .s32 	%r<53>;


	ld.param.u32 	%r4, [CalculatePhaseGradientsY_param_3];
	ld.param.u32 	%r5, [CalculatePhaseGradientsY_param_4];
	ld.param.u32 	%r23, [CalculatePhaseGradientsY_param_5];
	// inline asm
	mov.u32 	%r11, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.x;
	// inline asm
	add.s32 	%r24, %r14, %r11;
	mad.lo.s32 	%r6, %r13, %r12, %r24;
	// inline asm
	mov.u32 	%r15, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.y;
	// inline asm
	add.s32 	%r25, %r18, %r15;
	mad.lo.s32 	%r7, %r17, %r16, %r25;
	// inline asm
	mov.u32 	%r19, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %tid.z;
	// inline asm
	add.s32 	%r26, %r22, %r19;
	mad.lo.s32 	%r8, %r21, %r20, %r26;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r5;
	and.pred  	%p3, %p1, %p2;
	add.s32 	%r9, %r7, 1;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	add.s32 	%r27, %r7, -1;
	setp.gt.s32 	%p6, %r27, -1;
	and.pred  	%p7, %p5, %p6;
	setp.lt.s32 	%p8, %r8, %r23;
	and.pred  	%p9, %p7, %p8;
	@%p9 bra 	BB2_2;

	ret;

BB2_2:
	ld.param.u32 	%r52, [CalculatePhaseGradientsY_param_4];
	mad.lo.s32 	%r28, %r8, %r52, %r7;
	ld.param.u32 	%r51, [CalculatePhaseGradientsY_param_3];
	mad.lo.s32 	%r10, %r28, %r51, %r6;
	mad.lo.s32 	%r29, %r8, %r52, %r9;
	mad.lo.s32 	%r30, %r29, %r51, %r6;
	shl.b32 	%r31, %r30, 3;
	ld.param.u32 	%r49, [CalculatePhaseGradientsY_param_1];
	add.s32 	%r32, %r49, %r31;
	shl.b32 	%r33, %r51, 3;
	sub.s32 	%r34, %r32, %r33;
	ld.global.v2.f32 	{%f84, %f85}, [%r32];
	ld.global.v2.f32 	{%f86, %f87}, [%r34];
	mul.f32 	%f23, %f85, %f87;
	fma.rn.f32 	%f24, %f84, %f86, %f23;
	add.f32 	%f25, %f24, 0f00000000;
	mul.f32 	%f26, %f85, %f86;
	neg.f32 	%f27, %f84;
	fma.rn.f32 	%f28, %f27, %f87, %f26;
	add.f32 	%f29, %f28, 0f00000000;
	sub.s32 	%r35, %r34, %r33;
	ld.global.v2.f32 	{%f88, %f89}, [%r35];
	mul.f32 	%f32, %f87, %f89;
	fma.rn.f32 	%f33, %f86, %f88, %f32;
	add.f32 	%f34, %f25, %f33;
	mul.f32 	%f35, %f87, %f88;
	neg.f32 	%f36, %f86;
	fma.rn.f32 	%f37, %f36, %f89, %f35;
	add.f32 	%f38, %f29, %f37;
	ld.param.u32 	%r50, [CalculatePhaseGradientsY_param_2];
	add.s32 	%r36, %r50, %r31;
	sub.s32 	%r37, %r36, %r33;
	ld.global.v2.f32 	{%f90, %f91}, [%r36];
	ld.global.v2.f32 	{%f92, %f93}, [%r37];
	mul.f32 	%f43, %f91, %f93;
	fma.rn.f32 	%f44, %f90, %f92, %f43;
	add.f32 	%f45, %f34, %f44;
	mul.f32 	%f46, %f91, %f92;
	neg.f32 	%f47, %f90;
	fma.rn.f32 	%f48, %f47, %f93, %f46;
	add.f32 	%f49, %f38, %f48;
	sub.s32 	%r38, %r37, %r33;
	ld.global.v2.f32 	{%f94, %f95}, [%r38];
	mul.f32 	%f52, %f93, %f95;
	fma.rn.f32 	%f53, %f92, %f94, %f52;
	add.f32 	%f16, %f45, %f53;
	mul.f32 	%f54, %f93, %f94;
	neg.f32 	%f55, %f92;
	fma.rn.f32 	%f56, %f55, %f95, %f54;
	add.f32 	%f18, %f49, %f56;
	// inline asm
	abs.f32 	%f15, %f16;
	// inline asm
	// inline asm
	abs.f32 	%f17, %f18;
	// inline asm
	setp.eq.f32 	%p10, %f17, 0f00000000;
	setp.eq.f32 	%p11, %f15, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB2_8;

	setp.eq.f32 	%p13, %f17, 0f7F800000;
	setp.eq.f32 	%p14, %f15, 0f7F800000;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	BB2_7;

	setp.lt.f32 	%p16, %f15, %f17;
	selp.f32 	%f58, %f17, %f15, %p16;
	selp.f32 	%f97, %f15, %f17, %p16;
	// inline asm
	abs.f32 	%f57, %f58;
	// inline asm
	setp.gt.f32 	%p17, %f57, 0f7E800000;
	mov.f32 	%f96, %f58;
	@%p17 bra 	BB2_5;
	bra.uni 	BB2_6;

BB2_5:
	mov.f32 	%f59, 0f3E800000;
	mul.rn.f32 	%f97, %f97, %f59;
	mul.rn.f32 	%f96, %f58, %f59;

BB2_6:
	// inline asm
	div.approx.f32 	%f60, %f97, %f96;
	// inline asm
	mul.rn.f32 	%f63, %f60, %f60;
	mov.f32 	%f64, 0fBF52C7EA;
	mul.rn.f32 	%f65, %f63, %f64;
	add.f32 	%f66, %f65, 0fC0B59883;
	mul.rn.f32 	%f67, %f66, %f63;
	add.f32 	%f68, %f67, 0fC0D21907;
	mul.rn.f32 	%f69, %f68, %f63;
	mul.rn.f32 	%f70, %f69, %f60;
	add.f32 	%f71, %f63, 0f41355DC0;
	mul.rn.f32 	%f72, %f71, %f63;
	add.f32 	%f73, %f72, 0f41E6BD60;
	mul.rn.f32 	%f74, %f73, %f63;
	add.f32 	%f75, %f74, 0f419D92C8;
	rcp.approx.f32 	%f76, %f75;
	mul.rn.f32 	%f77, %f70, %f76;
	add.f32 	%f78, %f77, %f60;
	mov.f32 	%f79, 0f3FC90FDB;
	sub.f32 	%f80, %f79, %f78;
	setp.gt.f32 	%p18, %f17, %f15;
	selp.f32 	%f81, %f80, %f78, %p18;
	mov.f32 	%f82, 0f40490FDB;
	sub.f32 	%f83, %f82, %f81;
	setp.lt.f32 	%p19, %f16, 0f00000000;
	selp.f32 	%f98, %f83, %f81, %p19;
	bra.uni 	BB2_9;

BB2_7:
	mov.b32 	 %r39, %f16;
	setp.lt.s32 	%p20, %r39, 0;
	selp.f32 	%f98, 0f4016CBE4, 0f3F490FDB, %p20;
	bra.uni 	BB2_9;

BB2_8:
	mov.b32 	 %r40, %f16;
	setp.lt.s32 	%p21, %r40, 0;
	selp.f32 	%f98, 0f40490FDB, 0f00000000, %p21;

BB2_9:
	mov.b32 	 %r41, %f18;
	and.b32  	%r42, %r41, -2147483648;
	mov.b32 	 %r43, %f98;
	and.b32  	%r44, %r43, 2147483647;
	or.b32  	%r45, %r44, %r42;
	shl.b32 	%r46, %r10, 2;
	ld.param.u32 	%r48, [CalculatePhaseGradientsY_param_0];
	add.s32 	%r47, %r48, %r46;
	st.global.u32 	[%r47], %r45;
	ret;
}

.entry CalculatePhaseGradientsZ(
	.param .u32 .ptr .global .align 4 CalculatePhaseGradientsZ_param_0,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsZ_param_1,
	.param .u32 .ptr .global .align 8 CalculatePhaseGradientsZ_param_2,
	.param .u32 CalculatePhaseGradientsZ_param_3,
	.param .u32 CalculatePhaseGradientsZ_param_4,
	.param .u32 CalculatePhaseGradientsZ_param_5
)
{
	.reg .f32 	%f<99>;
	.reg .pred 	%p<22>;
	.reg .s32 	%r<54>;


	ld.param.u32 	%r4, [CalculatePhaseGradientsZ_param_3];
	ld.param.u32 	%r5, [CalculatePhaseGradientsZ_param_4];
	ld.param.u32 	%r23, [CalculatePhaseGradientsZ_param_5];
	// inline asm
	mov.u32 	%r11, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.x;
	// inline asm
	add.s32 	%r24, %r14, %r11;
	mad.lo.s32 	%r6, %r13, %r12, %r24;
	// inline asm
	mov.u32 	%r15, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.y;
	// inline asm
	add.s32 	%r25, %r18, %r15;
	mad.lo.s32 	%r7, %r17, %r16, %r25;
	// inline asm
	mov.u32 	%r19, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %tid.z;
	// inline asm
	add.s32 	%r26, %r22, %r19;
	mad.lo.s32 	%r8, %r21, %r20, %r26;
	add.s32 	%r9, %r8, 1;
	setp.ge.s32 	%p1, %r7, %r5;
	setp.ge.s32 	%p2, %r6, %r4;
	or.pred  	%p3, %p2, %p1;
	setp.ge.s32 	%p4, %r8, %r23;
	or.pred  	%p5, %p3, %p4;
	setp.ge.s32 	%p6, %r9, %r23;
	or.pred  	%p7, %p5, %p6;
	add.s32 	%r27, %r8, -1;
	setp.lt.s32 	%p8, %r27, 0;
	or.pred  	%p9, %p8, %p7;
	@%p9 bra 	BB3_9;

	ld.param.u32 	%r53, [CalculatePhaseGradientsZ_param_4];
	mad.lo.s32 	%r28, %r8, %r53, %r7;
	ld.param.u32 	%r52, [CalculatePhaseGradientsZ_param_3];
	mad.lo.s32 	%r10, %r28, %r52, %r6;
	mad.lo.s32 	%r29, %r9, %r53, %r7;
	mad.lo.s32 	%r30, %r29, %r52, %r6;
	shl.b32 	%r31, %r30, 3;
	ld.param.u32 	%r50, [CalculatePhaseGradientsZ_param_1];
	add.s32 	%r32, %r50, %r31;
	mul.lo.s32 	%r33, %r53, %r52;
	shl.b32 	%r34, %r33, 3;
	sub.s32 	%r35, %r32, %r34;
	ld.global.v2.f32 	{%f84, %f85}, [%r32];
	ld.global.v2.f32 	{%f86, %f87}, [%r35];
	mul.f32 	%f23, %f85, %f87;
	fma.rn.f32 	%f24, %f84, %f86, %f23;
	add.f32 	%f25, %f24, 0f00000000;
	mul.f32 	%f26, %f85, %f86;
	neg.f32 	%f27, %f84;
	fma.rn.f32 	%f28, %f27, %f87, %f26;
	add.f32 	%f29, %f28, 0f00000000;
	sub.s32 	%r36, %r35, %r34;
	ld.global.v2.f32 	{%f88, %f89}, [%r36];
	mul.f32 	%f32, %f87, %f89;
	fma.rn.f32 	%f33, %f86, %f88, %f32;
	add.f32 	%f34, %f25, %f33;
	mul.f32 	%f35, %f87, %f88;
	neg.f32 	%f36, %f86;
	fma.rn.f32 	%f37, %f36, %f89, %f35;
	add.f32 	%f38, %f29, %f37;
	ld.param.u32 	%r51, [CalculatePhaseGradientsZ_param_2];
	add.s32 	%r37, %r51, %r31;
	sub.s32 	%r38, %r37, %r34;
	ld.global.v2.f32 	{%f90, %f91}, [%r37];
	ld.global.v2.f32 	{%f92, %f93}, [%r38];
	mul.f32 	%f43, %f91, %f93;
	fma.rn.f32 	%f44, %f90, %f92, %f43;
	add.f32 	%f45, %f34, %f44;
	mul.f32 	%f46, %f91, %f92;
	neg.f32 	%f47, %f90;
	fma.rn.f32 	%f48, %f47, %f93, %f46;
	add.f32 	%f49, %f38, %f48;
	sub.s32 	%r39, %r38, %r34;
	ld.global.v2.f32 	{%f94, %f95}, [%r39];
	mul.f32 	%f52, %f93, %f95;
	fma.rn.f32 	%f53, %f92, %f94, %f52;
	add.f32 	%f16, %f45, %f53;
	mul.f32 	%f54, %f93, %f94;
	neg.f32 	%f55, %f92;
	fma.rn.f32 	%f56, %f55, %f95, %f54;
	add.f32 	%f18, %f49, %f56;
	// inline asm
	abs.f32 	%f15, %f16;
	// inline asm
	// inline asm
	abs.f32 	%f17, %f18;
	// inline asm
	setp.eq.f32 	%p10, %f17, 0f00000000;
	setp.eq.f32 	%p11, %f15, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB3_7;

	setp.eq.f32 	%p13, %f17, 0f7F800000;
	setp.eq.f32 	%p14, %f15, 0f7F800000;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	BB3_6;

	setp.lt.f32 	%p16, %f15, %f17;
	selp.f32 	%f58, %f17, %f15, %p16;
	selp.f32 	%f97, %f15, %f17, %p16;
	// inline asm
	abs.f32 	%f57, %f58;
	// inline asm
	setp.gt.f32 	%p17, %f57, 0f7E800000;
	mov.f32 	%f96, %f58;
	@%p17 bra 	BB3_4;
	bra.uni 	BB3_5;

BB3_4:
	mov.f32 	%f59, 0f3E800000;
	mul.rn.f32 	%f97, %f97, %f59;
	mul.rn.f32 	%f96, %f58, %f59;

BB3_5:
	// inline asm
	div.approx.f32 	%f60, %f97, %f96;
	// inline asm
	mul.rn.f32 	%f63, %f60, %f60;
	mov.f32 	%f64, 0fBF52C7EA;
	mul.rn.f32 	%f65, %f63, %f64;
	add.f32 	%f66, %f65, 0fC0B59883;
	mul.rn.f32 	%f67, %f66, %f63;
	add.f32 	%f68, %f67, 0fC0D21907;
	mul.rn.f32 	%f69, %f68, %f63;
	mul.rn.f32 	%f70, %f69, %f60;
	add.f32 	%f71, %f63, 0f41355DC0;
	mul.rn.f32 	%f72, %f71, %f63;
	add.f32 	%f73, %f72, 0f41E6BD60;
	mul.rn.f32 	%f74, %f73, %f63;
	add.f32 	%f75, %f74, 0f419D92C8;
	rcp.approx.f32 	%f76, %f75;
	mul.rn.f32 	%f77, %f70, %f76;
	add.f32 	%f78, %f77, %f60;
	mov.f32 	%f79, 0f3FC90FDB;
	sub.f32 	%f80, %f79, %f78;
	setp.gt.f32 	%p18, %f17, %f15;
	selp.f32 	%f81, %f80, %f78, %p18;
	mov.f32 	%f82, 0f40490FDB;
	sub.f32 	%f83, %f82, %f81;
	setp.lt.f32 	%p19, %f16, 0f00000000;
	selp.f32 	%f98, %f83, %f81, %p19;
	bra.uni 	BB3_8;

BB3_6:
	mov.b32 	 %r40, %f16;
	setp.lt.s32 	%p20, %r40, 0;
	selp.f32 	%f98, 0f4016CBE4, 0f3F490FDB, %p20;
	bra.uni 	BB3_8;

BB3_7:
	mov.b32 	 %r41, %f16;
	setp.lt.s32 	%p21, %r41, 0;
	selp.f32 	%f98, 0f40490FDB, 0f00000000, %p21;

BB3_8:
	mov.b32 	 %r42, %f18;
	and.b32  	%r43, %r42, -2147483648;
	mov.b32 	 %r44, %f98;
	and.b32  	%r45, %r44, 2147483647;
	or.b32  	%r46, %r45, %r43;
	shl.b32 	%r47, %r10, 2;
	ld.param.u32 	%r49, [CalculatePhaseGradientsZ_param_0];
	add.s32 	%r48, %r49, %r47;
	st.global.u32 	[%r48], %r46;

BB3_9:
	ret;
}

.entry CalculateAMatrixAndHVector2DValuesX(
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesX_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesX_param_1,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesX_param_2,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesX_param_3,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesX_param_4,
	.param .u32 CalculateAMatrixAndHVector2DValuesX_param_5,
	.param .u32 CalculateAMatrixAndHVector2DValuesX_param_6,
	.param .u32 CalculateAMatrixAndHVector2DValuesX_param_7,
	.param .u32 CalculateAMatrixAndHVector2DValuesX_param_8
)
{
	.reg .f32 	%f<113>;
	.reg .pred 	%p<8>;
	.reg .s32 	%r<73>;


	ld.param.u32 	%r23, [CalculateAMatrixAndHVector2DValuesX_param_8];
	// inline asm
	mov.u32 	%r20, %tid.x;
	// inline asm
	// inline asm
	mov.u32 	%r21, %envreg1;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.y;
	// inline asm
	add.s32 	%r12, %r22, %r21;
	add.s32 	%r24, %r23, -1;
	shr.u32 	%r25, %r24, 31;
	add.s32 	%r26, %r24, %r25;
	shr.s32 	%r72, %r26, 1;
	setp.lt.s32 	%p1, %r20, %r72;
	@%p1 bra 	BB4_8;

	ld.param.u32 	%r67, [CalculateAMatrixAndHVector2DValuesX_param_6];
	sub.s32 	%r27, %r67, %r72;
	setp.ge.s32 	%p2, %r20, %r27;
	setp.lt.s32 	%p3, %r12, %r72;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB4_8;

	ld.param.u32 	%r70, [CalculateAMatrixAndHVector2DValuesX_param_7];
	sub.s32 	%r28, %r70, %r72;
	setp.ge.s32 	%p5, %r12, %r28;
	@%p5 bra 	BB4_8;

	cvt.rn.f32.s32 	%f49, %r20;
	ld.param.u32 	%r66, [CalculateAMatrixAndHVector2DValuesX_param_6];
	cvt.rn.f32.s32 	%f50, %r66;
	add.f32 	%f51, %f50, 0fBF800000;
	mov.f32 	%f52, 0f3F000000;
	neg.f32 	%f53, %f51;
	fma.rn.f32 	%f1, %f53, %f52, %f49;
	ld.param.u32 	%r69, [CalculateAMatrixAndHVector2DValuesX_param_7];
	cvt.rn.f32.s32 	%f54, %r69;
	add.f32 	%f55, %f54, 0fBF800000;
	cvt.rn.f32.s32 	%f56, %r12;
	neg.f32 	%f57, %f55;
	fma.rn.f32 	%f2, %f57, %f52, %f56;
	ld.param.u32 	%r63, [CalculateAMatrixAndHVector2DValuesX_param_5];
	sub.s32 	%r14, %r63, %r72;
	setp.lt.s32 	%p6, %r72, %r14;
	@%p6 bra 	BB4_5;

	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;
	bra.uni 	BB4_7;

BB4_5:
	ld.param.u32 	%r62, [CalculateAMatrixAndHVector2DValuesX_param_5];
	cvt.rn.f32.s32 	%f86, %r62;
	add.f32 	%f87, %f86, 0fBF800000;
	mul.f32 	%f3, %f87, 0f3F000000;
	mul.f32 	%f4, %f1, %f1;
	mul.f32 	%f5, %f1, %f2;
	mul.f32 	%f6, %f2, %f2;
	ld.param.u32 	%r64, [CalculateAMatrixAndHVector2DValuesX_param_6];
	mad.lo.s32 	%r30, %r64, %r12, %r20;
	mul.lo.s32 	%r31, %r62, %r30;
	shl.b32 	%r32, %r31, 2;
	shl.b32 	%r33, %r72, 2;
	add.s32 	%r71, %r33, %r32;
	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;

BB4_6:
	cvt.rn.f32.s32 	%f88, %r72;
	sub.f32 	%f89, %f88, %f3;
	ld.param.u32 	%r59, [CalculateAMatrixAndHVector2DValuesX_param_2];
	add.s32 	%r34, %r59, %r71;
	ld.param.u32 	%r60, [CalculateAMatrixAndHVector2DValuesX_param_3];
	add.s32 	%r35, %r60, %r71;
	ld.param.u32 	%r61, [CalculateAMatrixAndHVector2DValuesX_param_4];
	add.s32 	%r36, %r61, %r71;
	ld.global.f32 	%f90, [%r36];
	ld.global.f32 	%f91, [%r35];
	mul.f32 	%f92, %f90, %f91;
	mul.f32 	%f93, %f92, %f91;
	ld.global.f32 	%f94, [%r34];
	mul.f32 	%f95, %f92, %f94;
	fma.rn.f32 	%f99, %f92, %f91, %f99;
	fma.rn.f32 	%f100, %f89, %f93, %f100;
	fma.rn.f32 	%f101, %f1, %f93, %f101;
	fma.rn.f32 	%f102, %f2, %f93, %f102;
	mul.f32 	%f96, %f89, %f89;
	fma.rn.f32 	%f103, %f96, %f93, %f103;
	mul.f32 	%f97, %f89, %f1;
	fma.rn.f32 	%f104, %f97, %f93, %f104;
	mul.f32 	%f98, %f89, %f2;
	fma.rn.f32 	%f105, %f98, %f93, %f105;
	fma.rn.f32 	%f106, %f4, %f93, %f106;
	fma.rn.f32 	%f107, %f5, %f93, %f107;
	fma.rn.f32 	%f108, %f6, %f93, %f108;
	fma.rn.f32 	%f109, %f92, %f94, %f109;
	fma.rn.f32 	%f110, %f89, %f95, %f110;
	fma.rn.f32 	%f111, %f1, %f95, %f111;
	fma.rn.f32 	%f112, %f2, %f95, %f112;
	add.s32 	%r71, %r71, 4;
	add.s32 	%r72, %r72, 1;
	setp.lt.s32 	%p7, %r72, %r14;
	@%p7 bra 	BB4_6;

BB4_7:
	ld.param.u32 	%r65, [CalculateAMatrixAndHVector2DValuesX_param_6];
	mad.lo.s32 	%r37, %r12, %r65, %r20;
	shl.b32 	%r38, %r37, 2;
	ld.param.u32 	%r57, [CalculateAMatrixAndHVector2DValuesX_param_0];
	add.s32 	%r39, %r57, %r38;
	st.global.f32 	[%r39], %f99;
	ld.param.u32 	%r68, [CalculateAMatrixAndHVector2DValuesX_param_7];
	mul.lo.s32 	%r40, %r68, %r65;
	shl.b32 	%r41, %r40, 2;
	add.s32 	%r42, %r39, %r41;
	st.global.f32 	[%r42], %f100;
	add.s32 	%r43, %r42, %r41;
	st.global.f32 	[%r43], %f101;
	add.s32 	%r44, %r43, %r41;
	st.global.f32 	[%r44], %f102;
	add.s32 	%r45, %r44, %r41;
	st.global.f32 	[%r45], %f103;
	add.s32 	%r46, %r45, %r41;
	st.global.f32 	[%r46], %f104;
	add.s32 	%r47, %r46, %r41;
	st.global.f32 	[%r47], %f105;
	add.s32 	%r48, %r47, %r41;
	st.global.f32 	[%r48], %f106;
	add.s32 	%r49, %r48, %r41;
	st.global.f32 	[%r49], %f107;
	add.s32 	%r50, %r49, %r41;
	st.global.f32 	[%r50], %f108;
	ld.param.u32 	%r58, [CalculateAMatrixAndHVector2DValuesX_param_1];
	add.s32 	%r51, %r58, %r38;
	st.global.f32 	[%r51], %f109;
	mad.lo.s32 	%r52, %r40, 3, %r37;
	shl.b32 	%r53, %r52, 2;
	add.s32 	%r54, %r58, %r53;
	st.global.f32 	[%r54], %f110;
	add.s32 	%r55, %r54, %r41;
	st.global.f32 	[%r55], %f111;
	add.s32 	%r56, %r55, %r41;
	st.global.f32 	[%r56], %f112;

BB4_8:
	ret;
}

.entry CalculateAMatrixAndHVector2DValuesY(
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesY_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesY_param_1,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesY_param_2,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesY_param_3,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesY_param_4,
	.param .u32 CalculateAMatrixAndHVector2DValuesY_param_5,
	.param .u32 CalculateAMatrixAndHVector2DValuesY_param_6,
	.param .u32 CalculateAMatrixAndHVector2DValuesY_param_7,
	.param .u32 CalculateAMatrixAndHVector2DValuesY_param_8
)
{
	.reg .f32 	%f<113>;
	.reg .pred 	%p<8>;
	.reg .s32 	%r<77>;


	ld.param.u32 	%r23, [CalculateAMatrixAndHVector2DValuesY_param_8];
	// inline asm
	mov.u32 	%r20, %tid.x;
	// inline asm
	// inline asm
	mov.u32 	%r21, %envreg1;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.y;
	// inline asm
	add.s32 	%r12, %r22, %r21;
	add.s32 	%r24, %r23, -1;
	shr.u32 	%r25, %r24, 31;
	add.s32 	%r26, %r24, %r25;
	shr.s32 	%r76, %r26, 1;
	setp.lt.s32 	%p1, %r20, %r76;
	@%p1 bra 	BB5_8;

	ld.param.u32 	%r71, [CalculateAMatrixAndHVector2DValuesY_param_6];
	sub.s32 	%r27, %r71, %r76;
	setp.ge.s32 	%p2, %r20, %r27;
	setp.lt.s32 	%p3, %r12, %r76;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB5_8;

	ld.param.u32 	%r74, [CalculateAMatrixAndHVector2DValuesY_param_7];
	sub.s32 	%r28, %r74, %r76;
	setp.ge.s32 	%p5, %r12, %r28;
	@%p5 bra 	BB5_8;

	cvt.rn.f32.s32 	%f49, %r20;
	ld.param.u32 	%r70, [CalculateAMatrixAndHVector2DValuesY_param_6];
	cvt.rn.f32.s32 	%f50, %r70;
	add.f32 	%f51, %f50, 0fBF800000;
	mov.f32 	%f52, 0f3F000000;
	neg.f32 	%f53, %f51;
	fma.rn.f32 	%f1, %f53, %f52, %f49;
	ld.param.u32 	%r73, [CalculateAMatrixAndHVector2DValuesY_param_7];
	cvt.rn.f32.s32 	%f54, %r73;
	add.f32 	%f55, %f54, 0fBF800000;
	cvt.rn.f32.s32 	%f56, %r12;
	neg.f32 	%f57, %f55;
	fma.rn.f32 	%f2, %f57, %f52, %f56;
	ld.param.u32 	%r67, [CalculateAMatrixAndHVector2DValuesY_param_5];
	sub.s32 	%r14, %r67, %r76;
	setp.lt.s32 	%p6, %r76, %r14;
	@%p6 bra 	BB5_5;

	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;
	bra.uni 	BB5_7;

BB5_5:
	ld.param.u32 	%r66, [CalculateAMatrixAndHVector2DValuesY_param_5];
	cvt.rn.f32.s32 	%f86, %r66;
	add.f32 	%f87, %f86, 0fBF800000;
	mul.f32 	%f3, %f87, 0f3F000000;
	mul.f32 	%f4, %f1, %f1;
	mul.f32 	%f5, %f1, %f2;
	mul.f32 	%f6, %f2, %f2;
	ld.param.u32 	%r68, [CalculateAMatrixAndHVector2DValuesY_param_6];
	mad.lo.s32 	%r30, %r68, %r12, %r20;
	mul.lo.s32 	%r31, %r66, %r30;
	shl.b32 	%r32, %r31, 2;
	shl.b32 	%r33, %r76, 2;
	add.s32 	%r75, %r33, %r32;
	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;

BB5_6:
	cvt.rn.f32.s32 	%f88, %r76;
	sub.f32 	%f89, %f88, %f3;
	ld.param.u32 	%r63, [CalculateAMatrixAndHVector2DValuesY_param_2];
	add.s32 	%r34, %r63, %r75;
	ld.param.u32 	%r64, [CalculateAMatrixAndHVector2DValuesY_param_3];
	add.s32 	%r35, %r64, %r75;
	ld.param.u32 	%r65, [CalculateAMatrixAndHVector2DValuesY_param_4];
	add.s32 	%r36, %r65, %r75;
	ld.global.f32 	%f90, [%r36];
	ld.global.f32 	%f91, [%r35];
	mul.f32 	%f92, %f90, %f91;
	mul.f32 	%f93, %f92, %f91;
	ld.global.f32 	%f94, [%r34];
	mul.f32 	%f95, %f92, %f94;
	fma.rn.f32 	%f99, %f92, %f91, %f99;
	fma.rn.f32 	%f100, %f89, %f93, %f100;
	fma.rn.f32 	%f101, %f1, %f93, %f101;
	fma.rn.f32 	%f102, %f2, %f93, %f102;
	mul.f32 	%f96, %f89, %f89;
	fma.rn.f32 	%f103, %f96, %f93, %f103;
	mul.f32 	%f97, %f89, %f1;
	fma.rn.f32 	%f104, %f97, %f93, %f104;
	mul.f32 	%f98, %f89, %f2;
	fma.rn.f32 	%f105, %f98, %f93, %f105;
	fma.rn.f32 	%f106, %f4, %f93, %f106;
	fma.rn.f32 	%f107, %f5, %f93, %f107;
	fma.rn.f32 	%f108, %f6, %f93, %f108;
	fma.rn.f32 	%f109, %f92, %f94, %f109;
	fma.rn.f32 	%f110, %f89, %f95, %f110;
	fma.rn.f32 	%f111, %f1, %f95, %f111;
	fma.rn.f32 	%f112, %f2, %f95, %f112;
	add.s32 	%r75, %r75, 4;
	add.s32 	%r76, %r76, 1;
	setp.lt.s32 	%p7, %r76, %r14;
	@%p7 bra 	BB5_6;

BB5_7:
	ld.param.u32 	%r72, [CalculateAMatrixAndHVector2DValuesY_param_7];
	mad.lo.s32 	%r37, %r72, 10, %r12;
	ld.param.u32 	%r69, [CalculateAMatrixAndHVector2DValuesY_param_6];
	mad.lo.s32 	%r38, %r37, %r69, %r20;
	shl.b32 	%r39, %r38, 2;
	ld.param.u32 	%r61, [CalculateAMatrixAndHVector2DValuesY_param_0];
	add.s32 	%r40, %r61, %r39;
	st.global.f32 	[%r40], %f99;
	mul.lo.s32 	%r41, %r72, %r69;
	shl.b32 	%r42, %r41, 2;
	add.s32 	%r43, %r40, %r42;
	st.global.f32 	[%r43], %f100;
	add.s32 	%r44, %r43, %r42;
	st.global.f32 	[%r44], %f101;
	add.s32 	%r45, %r44, %r42;
	st.global.f32 	[%r45], %f102;
	add.s32 	%r46, %r45, %r42;
	st.global.f32 	[%r46], %f103;
	add.s32 	%r47, %r46, %r42;
	st.global.f32 	[%r47], %f104;
	add.s32 	%r48, %r47, %r42;
	st.global.f32 	[%r48], %f105;
	add.s32 	%r49, %r48, %r42;
	st.global.f32 	[%r49], %f106;
	add.s32 	%r50, %r49, %r42;
	st.global.f32 	[%r50], %f107;
	add.s32 	%r51, %r50, %r42;
	st.global.f32 	[%r51], %f108;
	add.s32 	%r52, %r12, %r72;
	mad.lo.s32 	%r53, %r52, %r69, %r20;
	shl.b32 	%r54, %r53, 2;
	ld.param.u32 	%r62, [CalculateAMatrixAndHVector2DValuesY_param_1];
	add.s32 	%r55, %r62, %r54;
	st.global.f32 	[%r55], %f109;
	mad.lo.s32 	%r56, %r41, 5, %r53;
	shl.b32 	%r57, %r56, 2;
	add.s32 	%r58, %r62, %r57;
	st.global.f32 	[%r58], %f110;
	add.s32 	%r59, %r58, %r42;
	st.global.f32 	[%r59], %f111;
	add.s32 	%r60, %r59, %r42;
	st.global.f32 	[%r60], %f112;

BB5_8:
	ret;
}

.entry CalculateAMatrixAndHVector2DValuesZ(
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesZ_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesZ_param_1,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesZ_param_2,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesZ_param_3,
	.param .u32 .ptr .global .align 4 CalculateAMatrixAndHVector2DValuesZ_param_4,
	.param .u32 CalculateAMatrixAndHVector2DValuesZ_param_5,
	.param .u32 CalculateAMatrixAndHVector2DValuesZ_param_6,
	.param .u32 CalculateAMatrixAndHVector2DValuesZ_param_7,
	.param .u32 CalculateAMatrixAndHVector2DValuesZ_param_8
)
{
	.reg .f32 	%f<113>;
	.reg .pred 	%p<8>;
	.reg .s32 	%r<78>;


	ld.param.u32 	%r23, [CalculateAMatrixAndHVector2DValuesZ_param_8];
	// inline asm
	mov.u32 	%r20, %tid.x;
	// inline asm
	// inline asm
	mov.u32 	%r21, %envreg1;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.y;
	// inline asm
	add.s32 	%r12, %r22, %r21;
	add.s32 	%r24, %r23, -1;
	shr.u32 	%r25, %r24, 31;
	add.s32 	%r26, %r24, %r25;
	shr.s32 	%r77, %r26, 1;
	setp.lt.s32 	%p1, %r20, %r77;
	@%p1 bra 	BB6_8;

	ld.param.u32 	%r72, [CalculateAMatrixAndHVector2DValuesZ_param_6];
	sub.s32 	%r27, %r72, %r77;
	setp.ge.s32 	%p2, %r20, %r27;
	setp.lt.s32 	%p3, %r12, %r77;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB6_8;

	ld.param.u32 	%r75, [CalculateAMatrixAndHVector2DValuesZ_param_7];
	sub.s32 	%r28, %r75, %r77;
	setp.ge.s32 	%p5, %r12, %r28;
	@%p5 bra 	BB6_8;

	cvt.rn.f32.s32 	%f49, %r20;
	ld.param.u32 	%r71, [CalculateAMatrixAndHVector2DValuesZ_param_6];
	cvt.rn.f32.s32 	%f50, %r71;
	add.f32 	%f51, %f50, 0fBF800000;
	mov.f32 	%f52, 0f3F000000;
	neg.f32 	%f53, %f51;
	fma.rn.f32 	%f1, %f53, %f52, %f49;
	ld.param.u32 	%r74, [CalculateAMatrixAndHVector2DValuesZ_param_7];
	cvt.rn.f32.s32 	%f54, %r74;
	add.f32 	%f55, %f54, 0fBF800000;
	cvt.rn.f32.s32 	%f56, %r12;
	neg.f32 	%f57, %f55;
	fma.rn.f32 	%f2, %f57, %f52, %f56;
	ld.param.u32 	%r68, [CalculateAMatrixAndHVector2DValuesZ_param_5];
	sub.s32 	%r14, %r68, %r77;
	setp.lt.s32 	%p6, %r77, %r14;
	@%p6 bra 	BB6_5;

	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;
	bra.uni 	BB6_7;

BB6_5:
	ld.param.u32 	%r67, [CalculateAMatrixAndHVector2DValuesZ_param_5];
	cvt.rn.f32.s32 	%f86, %r67;
	add.f32 	%f87, %f86, 0fBF800000;
	mul.f32 	%f3, %f87, 0f3F000000;
	mul.f32 	%f4, %f1, %f1;
	mul.f32 	%f5, %f1, %f2;
	mul.f32 	%f6, %f2, %f2;
	ld.param.u32 	%r69, [CalculateAMatrixAndHVector2DValuesZ_param_6];
	mad.lo.s32 	%r30, %r69, %r12, %r20;
	mul.lo.s32 	%r31, %r67, %r30;
	shl.b32 	%r32, %r31, 2;
	shl.b32 	%r33, %r77, 2;
	add.s32 	%r76, %r33, %r32;
	mov.f32 	%f112, 0f00000000;
	mov.f32 	%f111, %f112;
	mov.f32 	%f110, %f112;
	mov.f32 	%f109, %f112;
	mov.f32 	%f108, %f112;
	mov.f32 	%f107, %f112;
	mov.f32 	%f106, %f112;
	mov.f32 	%f105, %f112;
	mov.f32 	%f104, %f112;
	mov.f32 	%f103, %f112;
	mov.f32 	%f102, %f112;
	mov.f32 	%f101, %f112;
	mov.f32 	%f100, %f112;
	mov.f32 	%f99, %f112;

BB6_6:
	cvt.rn.f32.s32 	%f88, %r77;
	sub.f32 	%f89, %f88, %f3;
	ld.param.u32 	%r64, [CalculateAMatrixAndHVector2DValuesZ_param_2];
	add.s32 	%r34, %r64, %r76;
	ld.param.u32 	%r65, [CalculateAMatrixAndHVector2DValuesZ_param_3];
	add.s32 	%r35, %r65, %r76;
	ld.param.u32 	%r66, [CalculateAMatrixAndHVector2DValuesZ_param_4];
	add.s32 	%r36, %r66, %r76;
	ld.global.f32 	%f90, [%r36];
	ld.global.f32 	%f91, [%r35];
	mul.f32 	%f92, %f90, %f91;
	mul.f32 	%f93, %f92, %f91;
	ld.global.f32 	%f94, [%r34];
	mul.f32 	%f95, %f92, %f94;
	fma.rn.f32 	%f99, %f92, %f91, %f99;
	fma.rn.f32 	%f100, %f89, %f93, %f100;
	fma.rn.f32 	%f101, %f1, %f93, %f101;
	fma.rn.f32 	%f102, %f2, %f93, %f102;
	mul.f32 	%f96, %f89, %f89;
	fma.rn.f32 	%f103, %f96, %f93, %f103;
	mul.f32 	%f97, %f89, %f1;
	fma.rn.f32 	%f104, %f97, %f93, %f104;
	mul.f32 	%f98, %f89, %f2;
	fma.rn.f32 	%f105, %f98, %f93, %f105;
	fma.rn.f32 	%f106, %f4, %f93, %f106;
	fma.rn.f32 	%f107, %f5, %f93, %f107;
	fma.rn.f32 	%f108, %f6, %f93, %f108;
	fma.rn.f32 	%f109, %f92, %f94, %f109;
	fma.rn.f32 	%f110, %f89, %f95, %f110;
	fma.rn.f32 	%f111, %f1, %f95, %f111;
	fma.rn.f32 	%f112, %f2, %f95, %f112;
	add.s32 	%r76, %r76, 4;
	add.s32 	%r77, %r77, 1;
	setp.lt.s32 	%p7, %r77, %r14;
	@%p7 bra 	BB6_6;

BB6_7:
	ld.param.u32 	%r73, [CalculateAMatrixAndHVector2DValuesZ_param_7];
	mad.lo.s32 	%r37, %r73, 20, %r12;
	ld.param.u32 	%r70, [CalculateAMatrixAndHVector2DValuesZ_param_6];
	mad.lo.s32 	%r38, %r37, %r70, %r20;
	shl.b32 	%r39, %r38, 2;
	ld.param.u32 	%r62, [CalculateAMatrixAndHVector2DValuesZ_param_0];
	add.s32 	%r40, %r62, %r39;
	st.global.f32 	[%r40], %f99;
	mul.lo.s32 	%r41, %r73, %r70;
	shl.b32 	%r42, %r41, 2;
	add.s32 	%r43, %r40, %r42;
	st.global.f32 	[%r43], %f100;
	add.s32 	%r44, %r43, %r42;
	st.global.f32 	[%r44], %f101;
	add.s32 	%r45, %r44, %r42;
	st.global.f32 	[%r45], %f102;
	add.s32 	%r46, %r45, %r42;
	st.global.f32 	[%r46], %f103;
	add.s32 	%r47, %r46, %r42;
	st.global.f32 	[%r47], %f104;
	add.s32 	%r48, %r47, %r42;
	st.global.f32 	[%r48], %f105;
	add.s32 	%r49, %r48, %r42;
	st.global.f32 	[%r49], %f106;
	add.s32 	%r50, %r49, %r42;
	st.global.f32 	[%r50], %f107;
	add.s32 	%r51, %r50, %r42;
	st.global.f32 	[%r51], %f108;
	shl.b32 	%r52, %r73, 1;
	add.s32 	%r53, %r12, %r52;
	mad.lo.s32 	%r54, %r53, %r70, %r20;
	shl.b32 	%r55, %r54, 2;
	ld.param.u32 	%r63, [CalculateAMatrixAndHVector2DValuesZ_param_1];
	add.s32 	%r56, %r63, %r55;
	st.global.f32 	[%r56], %f109;
	mad.lo.s32 	%r57, %r41, 7, %r54;
	shl.b32 	%r58, %r57, 2;
	add.s32 	%r59, %r63, %r58;
	st.global.f32 	[%r59], %f110;
	add.s32 	%r60, %r59, %r42;
	st.global.f32 	[%r60], %f111;
	add.s32 	%r61, %r60, %r42;
	st.global.f32 	[%r61], %f112;

BB6_8:
	ret;
}

.entry CalculateAMatrix1DValues(
	.param .u32 .ptr .global .align 4 CalculateAMatrix1DValues_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatrix1DValues_param_1,
	.param .u32 CalculateAMatrix1DValues_param_2,
	.param .u32 CalculateAMatrix1DValues_param_3,
	.param .u32 CalculateAMatrix1DValues_param_4,
	.param .u32 CalculateAMatrix1DValues_param_5
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<40>;


	ld.param.u32 	%r20, [CalculateAMatrix1DValues_param_5];
	// inline asm
	mov.u32 	%r17, %tid.x;
	// inline asm
	// inline asm
	mov.u32 	%r18, %envreg1;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.y;
	// inline asm
	add.s32 	%r8, %r19, %r18;
	add.s32 	%r21, %r20, -1;
	shr.u32 	%r22, %r21, 31;
	add.s32 	%r23, %r21, %r22;
	shr.s32 	%r39, %r23, 1;
	setp.lt.s32 	%p1, %r17, %r39;
	@%p1 bra 	BB7_7;

	ld.param.u32 	%r37, [CalculateAMatrix1DValues_param_4];
	sub.s32 	%r24, %r37, %r39;
	setp.ge.s32 	%p2, %r17, %r24;
	@%p2 bra 	BB7_7;

	ld.param.u32 	%r35, [CalculateAMatrix1DValues_param_4];
	mad.lo.s32 	%r10, %r8, %r35, %r17;
	ld.param.u32 	%r34, [CalculateAMatrix1DValues_param_3];
	sub.s32 	%r11, %r34, %r39;
	setp.lt.s32 	%p3, %r39, %r11;
	@%p3 bra 	BB7_4;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB7_6;

BB7_4:
	ld.param.u32 	%r36, [CalculateAMatrix1DValues_param_4];
	mad.lo.s32 	%r26, %r36, %r8, %r17;
	ld.param.u32 	%r33, [CalculateAMatrix1DValues_param_3];
	mad.lo.s32 	%r27, %r33, %r26, %r39;
	shl.b32 	%r28, %r27, 2;
	ld.param.u32 	%r32, [CalculateAMatrix1DValues_param_1];
	add.s32 	%r38, %r32, %r28;
	mov.f32 	%f7, 0f00000000;

BB7_5:
	ld.global.f32 	%f6, [%r38];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r38, %r38, 4;
	add.s32 	%r39, %r39, 1;
	setp.lt.s32 	%p4, %r39, %r11;
	@%p4 bra 	BB7_5;

BB7_6:
	shl.b32 	%r29, %r10, 2;
	ld.param.u32 	%r31, [CalculateAMatrix1DValues_param_0];
	add.s32 	%r30, %r31, %r29;
	st.global.f32 	[%r30], %f7;

BB7_7:
	ret;
}

.entry CalculateAMatrix(
	.param .u32 .ptr .global .align 4 CalculateAMatrix_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatrix_param_1,
	.param .u32 CalculateAMatrix_param_2,
	.param .u32 CalculateAMatrix_param_3,
	.param .u32 CalculateAMatrix_param_4,
	.param .u32 CalculateAMatrix_param_5
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<44>;
	.reg .s32 	%r<91>;


	ld.param.u32 	%r3, [CalculateAMatrix_param_4];
	ld.param.u32 	%r15, [CalculateAMatrix_param_5];
	// inline asm
	mov.u32 	%r14, %tid.x;
	// inline asm
	add.s32 	%r16, %r15, -1;
	shr.u32 	%r17, %r16, 31;
	add.s32 	%r18, %r16, %r17;
	shr.s32 	%r88, %r18, 1;
	sub.s32 	%r6, %r3, %r88;
	setp.lt.s32 	%p1, %r88, %r6;
	@%p1 bra 	BB8_2;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB8_4;

BB8_2:
	ld.param.u32 	%r86, [CalculateAMatrix_param_4];
	mad.lo.s32 	%r19, %r14, %r86, %r88;
	shl.b32 	%r20, %r19, 2;
	ld.param.u32 	%r85, [CalculateAMatrix_param_1];
	add.s32 	%r87, %r85, %r20;
	mov.f32 	%f7, 0f00000000;

BB8_3:
	ld.global.f32 	%f6, [%r87];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r87, %r87, 4;
	add.s32 	%r88, %r88, 1;
	setp.lt.s32 	%p2, %r88, %r6;
	@%p2 bra 	BB8_3;

BB8_4:
	setp.gt.s32 	%p3, %r14, 14;
	@%p3 bra 	BB8_30;

	setp.gt.s32 	%p25, %r14, 7;
	@%p25 bra 	BB8_18;

	setp.gt.s32 	%p35, %r14, 3;
	@%p35 bra 	BB8_11;

	setp.eq.s32 	%p41, %r14, 1;
	@%p41 bra 	BB8_73;

	setp.eq.s32 	%p42, %r14, 2;
	@%p42 bra 	BB8_72;

	setp.eq.s32 	%p43, %r14, 3;
	@%p43 bra 	BB8_10;
	bra.uni 	BB8_74;

BB8_10:
	mov.u32 	%r90, 5;
	mov.u32 	%r89, 0;
	bra.uni 	BB8_75;

BB8_11:
	setp.gt.s32 	%p36, %r14, 5;
	@%p36 bra 	BB8_15;

	setp.eq.s32 	%p39, %r14, 4;
	@%p39 bra 	BB8_71;

	setp.eq.s32 	%p40, %r14, 5;
	@%p40 bra 	BB8_14;
	bra.uni 	BB8_74;

BB8_14:
	mov.u32 	%r90, 4;
	mov.u32 	%r89, 36;
	bra.uni 	BB8_75;

BB8_15:
	setp.eq.s32 	%p37, %r14, 6;
	@%p37 bra 	BB8_70;

	setp.eq.s32 	%p38, %r14, 7;
	@%p38 bra 	BB8_17;
	bra.uni 	BB8_74;

BB8_17:
	mov.u32 	%r90, 4;
	mov.u32 	%r89, 48;
	bra.uni 	BB8_75;

BB8_18:
	setp.gt.s32 	%p26, %r14, 10;
	@%p26 bra 	BB8_23;

	setp.eq.s32 	%p32, %r14, 8;
	@%p32 bra 	BB8_69;

	setp.eq.s32 	%p33, %r14, 9;
	@%p33 bra 	BB8_68;

	setp.eq.s32 	%p34, %r14, 10;
	@%p34 bra 	BB8_22;
	bra.uni 	BB8_74;

BB8_22:
	mov.u32 	%r90, 1;
	mov.u32 	%r89, 12;
	bra.uni 	BB8_75;

BB8_23:
	setp.gt.s32 	%p27, %r14, 12;
	@%p27 bra 	BB8_27;

	setp.eq.s32 	%p30, %r14, 11;
	@%p30 bra 	BB8_67;

	setp.eq.s32 	%p31, %r14, 12;
	@%p31 bra 	BB8_26;
	bra.uni 	BB8_74;

BB8_26:
	mov.u32 	%r90, 7;
	mov.u32 	%r89, 12;
	bra.uni 	BB8_75;

BB8_27:
	setp.eq.s32 	%p28, %r14, 13;
	@%p28 bra 	BB8_66;

	setp.eq.s32 	%p29, %r14, 14;
	@%p29 bra 	BB8_29;
	bra.uni 	BB8_74;

BB8_29:
	mov.u32 	%r90, 6;
	mov.u32 	%r89, 72;
	bra.uni 	BB8_75;

BB8_30:
	setp.gt.s32 	%p4, %r14, 21;
	@%p4 bra 	BB8_43;

	setp.gt.s32 	%p16, %r14, 17;
	@%p16 bra 	BB8_36;

	setp.eq.s32 	%p22, %r14, 15;
	@%p22 bra 	BB8_65;

	setp.eq.s32 	%p23, %r14, 16;
	@%p23 bra 	BB8_64;

	setp.eq.s32 	%p24, %r14, 17;
	@%p24 bra 	BB8_35;
	bra.uni 	BB8_74;

BB8_35:
	mov.u32 	%r90, 7;
	mov.u32 	%r89, 84;
	bra.uni 	BB8_75;

BB8_36:
	setp.gt.s32 	%p17, %r14, 19;
	@%p17 bra 	BB8_40;

	setp.eq.s32 	%p20, %r14, 18;
	@%p20 bra 	BB8_63;

	setp.eq.s32 	%p21, %r14, 19;
	@%p21 bra 	BB8_39;
	bra.uni 	BB8_74;

BB8_39:
	mov.u32 	%r90, 8;
	mov.u32 	%r89, 96;
	bra.uni 	BB8_75;

BB8_40:
	setp.eq.s32 	%p18, %r14, 20;
	@%p18 bra 	BB8_62;

	setp.eq.s32 	%p19, %r14, 21;
	@%p19 bra 	BB8_42;
	bra.uni 	BB8_74;

BB8_42:
	mov.u32 	%r90, 9;
	mov.u32 	%r89, 24;
	bra.uni 	BB8_75;

BB8_43:
	setp.gt.s32 	%p5, %r14, 25;
	@%p5 bra 	BB8_51;

	setp.gt.s32 	%p11, %r14, 23;
	@%p11 bra 	BB8_48;

	setp.eq.s32 	%p14, %r14, 22;
	@%p14 bra 	BB8_61;

	setp.eq.s32 	%p15, %r14, 23;
	@%p15 bra 	BB8_47;
	bra.uni 	BB8_74;

BB8_47:
	mov.u32 	%r90, 11;
	mov.u32 	%r89, 24;
	bra.uni 	BB8_75;

BB8_48:
	setp.eq.s32 	%p12, %r14, 24;
	@%p12 bra 	BB8_60;

	setp.eq.s32 	%p13, %r14, 25;
	@%p13 bra 	BB8_50;
	bra.uni 	BB8_74;

BB8_50:
	mov.u32 	%r90, 10;
	mov.u32 	%r89, 108;
	bra.uni 	BB8_75;

BB8_51:
	setp.gt.s32 	%p6, %r14, 27;
	@%p6 bra 	BB8_55;

	setp.eq.s32 	%p9, %r14, 26;
	@%p9 bra 	BB8_59;

	setp.eq.s32 	%p10, %r14, 27;
	@%p10 bra 	BB8_54;
	bra.uni 	BB8_74;

BB8_54:
	mov.u32 	%r90, 10;
	mov.u32 	%r89, 120;
	bra.uni 	BB8_75;

BB8_55:
	setp.eq.s32 	%p7, %r14, 28;
	@%p7 bra 	BB8_58;

	setp.ne.s32 	%p8, %r14, 29;
	@%p8 bra 	BB8_74;

	mov.u32 	%r90, 11;
	mov.u32 	%r89, 132;
	bra.uni 	BB8_75;

BB8_58:
	mov.u32 	%r90, 11;
	mov.u32 	%r89, 120;
	bra.uni 	BB8_75;

BB8_59:
	mov.u32 	%r90, 11;
	mov.u32 	%r89, 108;
	bra.uni 	BB8_75;

BB8_60:
	mov.u32 	%r90, 9;
	mov.u32 	%r89, 108;
	bra.uni 	BB8_75;

BB8_61:
	mov.u32 	%r90, 10;
	mov.u32 	%r89, 24;
	bra.uni 	BB8_75;

BB8_62:
	mov.u32 	%r90, 2;
	mov.u32 	%r89, 24;
	bra.uni 	BB8_75;

BB8_63:
	mov.u32 	%r90, 8;
	mov.u32 	%r89, 84;
	bra.uni 	BB8_75;

BB8_64:
	mov.u32 	%r90, 8;
	mov.u32 	%r89, 72;
	bra.uni 	BB8_75;

BB8_65:
	mov.u32 	%r90, 7;
	mov.u32 	%r89, 72;
	bra.uni 	BB8_75;

BB8_66:
	mov.u32 	%r90, 8;
	mov.u32 	%r89, 12;
	bra.uni 	BB8_75;

BB8_67:
	mov.u32 	%r90, 6;
	mov.u32 	%r89, 12;
	bra.uni 	BB8_75;

BB8_68:
	mov.u32 	%r90, 5;
	mov.u32 	%r89, 60;
	bra.uni 	BB8_75;

BB8_69:
	mov.u32 	%r90, 5;
	mov.u32 	%r89, 48;
	bra.uni 	BB8_75;

BB8_70:
	mov.u32 	%r90, 5;
	mov.u32 	%r89, 36;
	bra.uni 	BB8_75;

BB8_71:
	mov.u32 	%r90, 3;
	mov.u32 	%r89, 36;
	bra.uni 	BB8_75;

BB8_72:
	mov.u32 	%r90, 4;
	mov.u32 	%r89, 0;
	bra.uni 	BB8_75;

BB8_73:
	mov.u32 	%r90, 3;
	mov.u32 	%r89, 0;
	bra.uni 	BB8_75;

BB8_74:
	mov.u32 	%r90, 0;
	mov.u32 	%r89, %r90;

BB8_75:
	add.s32 	%r81, %r90, %r89;
	shl.b32 	%r82, %r81, 2;
	ld.param.u32 	%r84, [CalculateAMatrix_param_0];
	add.s32 	%r83, %r84, %r82;
	st.global.f32 	[%r83], %f7;
	ret;
}

.entry CalculateHVector1DValues(
	.param .u32 .ptr .global .align 4 CalculateHVector1DValues_param_0,
	.param .u32 .ptr .global .align 4 CalculateHVector1DValues_param_1,
	.param .u32 CalculateHVector1DValues_param_2,
	.param .u32 CalculateHVector1DValues_param_3,
	.param .u32 CalculateHVector1DValues_param_4,
	.param .u32 CalculateHVector1DValues_param_5
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<46>;


	ld.param.u32 	%r24, [CalculateHVector1DValues_param_5];
	// inline asm
	mov.u32 	%r19, %tid.x;
	// inline asm
	// inline asm
	mov.u32 	%r20, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.y;
	// inline asm
	add.s32 	%r25, %r23, %r20;
	mad.lo.s32 	%r10, %r22, %r21, %r25;
	add.s32 	%r26, %r24, -1;
	shr.u32 	%r27, %r26, 31;
	add.s32 	%r28, %r26, %r27;
	shr.s32 	%r45, %r28, 1;
	setp.lt.s32 	%p1, %r19, %r45;
	@%p1 bra 	BB9_7;

	ld.param.u32 	%r43, [CalculateHVector1DValues_param_4];
	sub.s32 	%r29, %r43, %r45;
	setp.ge.s32 	%p2, %r19, %r29;
	@%p2 bra 	BB9_7;

	ld.param.u32 	%r41, [CalculateHVector1DValues_param_4];
	mad.lo.s32 	%r12, %r10, %r41, %r19;
	ld.param.u32 	%r40, [CalculateHVector1DValues_param_3];
	sub.s32 	%r13, %r40, %r45;
	setp.lt.s32 	%p3, %r45, %r13;
	@%p3 bra 	BB9_4;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB9_6;

BB9_4:
	ld.param.u32 	%r42, [CalculateHVector1DValues_param_4];
	mad.lo.s32 	%r32, %r42, %r10, %r19;
	ld.param.u32 	%r39, [CalculateHVector1DValues_param_3];
	mad.lo.s32 	%r33, %r39, %r32, %r45;
	shl.b32 	%r34, %r33, 2;
	ld.param.u32 	%r38, [CalculateHVector1DValues_param_1];
	add.s32 	%r44, %r38, %r34;
	mov.f32 	%f7, 0f00000000;

BB9_5:
	ld.global.f32 	%f6, [%r44];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r44, %r44, 4;
	add.s32 	%r45, %r45, 1;
	setp.lt.s32 	%p4, %r45, %r13;
	@%p4 bra 	BB9_5;

BB9_6:
	shl.b32 	%r35, %r12, 2;
	ld.param.u32 	%r37, [CalculateHVector1DValues_param_0];
	add.s32 	%r36, %r37, %r35;
	st.global.f32 	[%r36], %f7;

BB9_7:
	ret;
}

.entry CalculateHVector(
	.param .u32 .ptr .global .align 4 CalculateHVector_param_0,
	.param .u32 .ptr .global .align 4 CalculateHVector_param_1,
	.param .u32 CalculateHVector_param_2,
	.param .u32 CalculateHVector_param_3,
	.param .u32 CalculateHVector_param_4,
	.param .u32 CalculateHVector_param_5
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<3>;
	.reg .s32 	%r<26>;


	ld.param.u32 	%r3, [CalculateHVector_param_4];
	ld.param.u32 	%r13, [CalculateHVector_param_5];
	// inline asm
	mov.u32 	%r12, %tid.x;
	// inline asm
	add.s32 	%r14, %r13, -1;
	shr.u32 	%r15, %r14, 31;
	add.s32 	%r16, %r14, %r15;
	shr.s32 	%r25, %r16, 1;
	sub.s32 	%r6, %r3, %r25;
	setp.lt.s32 	%p1, %r25, %r6;
	@%p1 bra 	BB10_2;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB10_4;

BB10_2:
	ld.param.u32 	%r23, [CalculateHVector_param_4];
	mad.lo.s32 	%r17, %r12, %r23, %r25;
	shl.b32 	%r18, %r17, 2;
	ld.param.u32 	%r22, [CalculateHVector_param_1];
	add.s32 	%r24, %r22, %r18;
	mov.f32 	%f7, 0f00000000;

BB10_3:
	ld.global.f32 	%f6, [%r24];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r24, %r24, 4;
	add.s32 	%r25, %r25, 1;
	setp.lt.s32 	%p2, %r25, %r6;
	@%p2 bra 	BB10_3;

BB10_4:
	shl.b32 	%r19, %r12, 2;
	ld.param.u32 	%r21, [CalculateHVector_param_0];
	add.s32 	%r20, %r21, %r19;
	st.global.f32 	[%r20], %f7;
	ret;
}

.entry CalculateTensorComponents(
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_0,
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_1,
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_2,
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_3,
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_4,
	.param .u32 .ptr .global .align 4 CalculateTensorComponents_param_5,
	.param .u32 .ptr .global .align 8 CalculateTensorComponents_param_6,
	.param .u32 .ptr .global .align 8 CalculateTensorComponents_param_7,
	.param .f32 CalculateTensorComponents_param_8,
	.param .f32 CalculateTensorComponents_param_9,
	.param .f32 CalculateTensorComponents_param_10,
	.param .f32 CalculateTensorComponents_param_11,
	.param .f32 CalculateTensorComponents_param_12,
	.param .f32 CalculateTensorComponents_param_13,
	.param .u32 CalculateTensorComponents_param_14,
	.param .u32 CalculateTensorComponents_param_15,
	.param .u32 CalculateTensorComponents_param_16
)
{
	.reg .f32 	%f<32>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<49>;


	ld.param.u32 	%r8, [CalculateTensorComponents_param_14];
	ld.param.u32 	%r9, [CalculateTensorComponents_param_15];
	ld.param.u32 	%r25, [CalculateTensorComponents_param_16];
	// inline asm
	mov.u32 	%r13, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.x;
	// inline asm
	add.s32 	%r26, %r16, %r13;
	mad.lo.s32 	%r10, %r15, %r14, %r26;
	// inline asm
	mov.u32 	%r17, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.y;
	// inline asm
	add.s32 	%r27, %r20, %r17;
	mad.lo.s32 	%r11, %r19, %r18, %r27;
	// inline asm
	mov.u32 	%r21, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r23, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r24, %tid.z;
	// inline asm
	add.s32 	%r28, %r24, %r21;
	mad.lo.s32 	%r12, %r23, %r22, %r28;
	setp.lt.s32 	%p1, %r10, %r8;
	setp.lt.s32 	%p2, %r11, %r9;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r12, %r25;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB11_2;

	ret;

BB11_2:
	ld.param.u32 	%r48, [CalculateTensorComponents_param_15];
	mad.lo.s32 	%r29, %r12, %r48, %r11;
	ld.param.u32 	%r47, [CalculateTensorComponents_param_14];
	mad.lo.s32 	%r30, %r29, %r47, %r10;
	shl.b32 	%r31, %r30, 3;
	ld.param.u32 	%r46, [CalculateTensorComponents_param_7];
	add.s32 	%r32, %r46, %r31;
	ld.global.v2.f32 	{%f24, %f25}, [%r32];
	mul.f32 	%f11, %f25, %f25;
	fma.rn.f32 	%f8, %f24, %f24, %f11;
	// inline asm
	sqrt.approx.f32 	%f7, %f8;
	// inline asm
	shl.b32 	%r33, %r30, 2;
	ld.param.u32 	%r40, [CalculateTensorComponents_param_0];
	add.s32 	%r34, %r40, %r33;
	ld.global.f32 	%f12, [%r34];
	ld.param.f32 	%f26, [CalculateTensorComponents_param_8];
	fma.rn.f32 	%f13, %f7, %f26, %f12;
	st.global.f32 	[%r34], %f13;
	ld.param.u32 	%r41, [CalculateTensorComponents_param_1];
	add.s32 	%r35, %r41, %r33;
	ld.global.f32 	%f14, [%r35];
	ld.param.f32 	%f27, [CalculateTensorComponents_param_9];
	fma.rn.f32 	%f15, %f7, %f27, %f14;
	st.global.f32 	[%r35], %f15;
	ld.param.u32 	%r42, [CalculateTensorComponents_param_2];
	add.s32 	%r36, %r42, %r33;
	ld.global.f32 	%f16, [%r36];
	ld.param.f32 	%f28, [CalculateTensorComponents_param_10];
	fma.rn.f32 	%f17, %f7, %f28, %f16;
	st.global.f32 	[%r36], %f17;
	ld.param.u32 	%r43, [CalculateTensorComponents_param_3];
	add.s32 	%r37, %r43, %r33;
	ld.global.f32 	%f18, [%r37];
	ld.param.f32 	%f29, [CalculateTensorComponents_param_11];
	fma.rn.f32 	%f19, %f7, %f29, %f18;
	st.global.f32 	[%r37], %f19;
	ld.param.u32 	%r44, [CalculateTensorComponents_param_4];
	add.s32 	%r38, %r44, %r33;
	ld.global.f32 	%f20, [%r38];
	ld.param.f32 	%f30, [CalculateTensorComponents_param_12];
	fma.rn.f32 	%f21, %f7, %f30, %f20;
	st.global.f32 	[%r38], %f21;
	ld.param.u32 	%r45, [CalculateTensorComponents_param_5];
	add.s32 	%r39, %r45, %r33;
	ld.global.f32 	%f22, [%r39];
	ld.param.f32 	%f31, [CalculateTensorComponents_param_13];
	fma.rn.f32 	%f23, %f7, %f31, %f22;
	st.global.f32 	[%r39], %f23;
	ret;
}

.entry CalculateTensorNorms(
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_0,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_1,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_2,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_3,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_4,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_5,
	.param .u32 .ptr .global .align 4 CalculateTensorNorms_param_6,
	.param .u32 CalculateTensorNorms_param_7,
	.param .u32 CalculateTensorNorms_param_8,
	.param .u32 CalculateTensorNorms_param_9
)
{
	.reg .f32 	%f<17>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<48>;


	ld.param.u32 	%r8, [CalculateTensorNorms_param_7];
	ld.param.u32 	%r9, [CalculateTensorNorms_param_8];
	ld.param.u32 	%r25, [CalculateTensorNorms_param_9];
	// inline asm
	mov.u32 	%r13, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.x;
	// inline asm
	add.s32 	%r26, %r16, %r13;
	mad.lo.s32 	%r10, %r15, %r14, %r26;
	// inline asm
	mov.u32 	%r17, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.y;
	// inline asm
	add.s32 	%r27, %r20, %r17;
	mad.lo.s32 	%r11, %r19, %r18, %r27;
	// inline asm
	mov.u32 	%r21, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r23, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r24, %tid.z;
	// inline asm
	add.s32 	%r28, %r24, %r21;
	mad.lo.s32 	%r12, %r23, %r22, %r28;
	setp.lt.s32 	%p1, %r10, %r8;
	setp.lt.s32 	%p2, %r11, %r9;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r12, %r25;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB12_2;

	ret;

BB12_2:
	ld.param.u32 	%r47, [CalculateTensorNorms_param_8];
	mad.lo.s32 	%r29, %r12, %r47, %r11;
	ld.param.u32 	%r46, [CalculateTensorNorms_param_7];
	mad.lo.s32 	%r30, %r29, %r46, %r10;
	shl.b32 	%r31, %r30, 2;
	ld.param.u32 	%r40, [CalculateTensorNorms_param_1];
	add.s32 	%r32, %r40, %r31;
	ld.param.u32 	%r41, [CalculateTensorNorms_param_2];
	add.s32 	%r33, %r41, %r31;
	ld.param.u32 	%r42, [CalculateTensorNorms_param_3];
	add.s32 	%r34, %r42, %r31;
	ld.param.u32 	%r43, [CalculateTensorNorms_param_4];
	add.s32 	%r35, %r43, %r31;
	ld.param.u32 	%r44, [CalculateTensorNorms_param_5];
	add.s32 	%r36, %r44, %r31;
	ld.param.u32 	%r45, [CalculateTensorNorms_param_6];
	add.s32 	%r37, %r45, %r31;
	ld.global.f32 	%f3, [%r32];
	ld.global.f32 	%f4, [%r33];
	add.f32 	%f5, %f4, %f4;
	mul.f32 	%f6, %f5, %f4;
	fma.rn.f32 	%f7, %f3, %f3, %f6;
	ld.global.f32 	%f8, [%r34];
	add.f32 	%f9, %f8, %f8;
	fma.rn.f32 	%f10, %f9, %f8, %f7;
	ld.global.f32 	%f11, [%r35];
	fma.rn.f32 	%f12, %f11, %f11, %f10;
	ld.global.f32 	%f13, [%r36];
	add.f32 	%f14, %f13, %f13;
	fma.rn.f32 	%f15, %f14, %f13, %f12;
	ld.global.f32 	%f16, [%r37];
	fma.rn.f32 	%f2, %f16, %f16, %f15;
	// inline asm
	sqrt.approx.f32 	%f1, %f2;
	// inline asm
	ld.param.u32 	%r39, [CalculateTensorNorms_param_0];
	add.s32 	%r38, %r39, %r31;
	st.global.f32 	[%r38], %f1;
	ret;
}

.entry CalculateAMatricesAndHVectors(
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_0,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_1,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_2,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_3,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_4,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_5,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_6,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_7,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_8,
	.param .u32 .ptr .global .align 8 CalculateAMatricesAndHVectors_param_9,
	.param .u32 .ptr .global .align 8 CalculateAMatricesAndHVectors_param_10,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_11,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_12,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_13,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_14,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_15,
	.param .u32 .ptr .global .align 4 CalculateAMatricesAndHVectors_param_16,
	.param .u32 .ptr .const .align 4 CalculateAMatricesAndHVectors_param_17,
	.param .u32 .ptr .const .align 4 CalculateAMatricesAndHVectors_param_18,
	.param .u32 .ptr .const .align 4 CalculateAMatricesAndHVectors_param_19,
	.param .u32 CalculateAMatricesAndHVectors_param_20,
	.param .u32 CalculateAMatricesAndHVectors_param_21,
	.param .u32 CalculateAMatricesAndHVectors_param_22,
	.param .u32 CalculateAMatricesAndHVectors_param_23
)
{
	.local .align 4 .b8 	__local_depot13[28];
	.reg .b32 	%SP;
	.reg .f32 	%f<217>;
	.reg .pred 	%p<58>;
	.reg .s32 	%r<376>;


	mov.u32 	%SP, __local_depot13;
	ld.param.u32 	%r21, [CalculateAMatricesAndHVectors_param_20];
	ld.param.u32 	%r22, [CalculateAMatricesAndHVectors_param_21];
	ld.param.u32 	%r117, [CalculateAMatricesAndHVectors_param_22];
	// inline asm
	mov.u32 	%r105, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r106, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r107, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r108, %tid.x;
	// inline asm
	add.s32 	%r118, %r108, %r105;
	mad.lo.s32 	%r24, %r107, %r106, %r118;
	// inline asm
	mov.u32 	%r109, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r110, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r111, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r112, %tid.y;
	// inline asm
	add.s32 	%r119, %r112, %r109;
	mad.lo.s32 	%r25, %r111, %r110, %r119;
	// inline asm
	mov.u32 	%r113, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r114, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r115, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r116, %tid.z;
	// inline asm
	add.s32 	%r120, %r116, %r113;
	mad.lo.s32 	%r26, %r115, %r114, %r120;
	setp.lt.s32 	%p1, %r24, %r21;
	setp.lt.s32 	%p2, %r25, %r22;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r26, %r117;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB13_2;

	ret;

BB13_2:
	ld.param.u32 	%r352, [CalculateAMatricesAndHVectors_param_21];
	mad.lo.s32 	%r121, %r26, %r352, %r25;
	ld.param.u32 	%r351, [CalculateAMatricesAndHVectors_param_20];
	mad.lo.s32 	%r27, %r121, %r351, %r24;
	shl.b32 	%r122, %r27, 3;
	ld.param.u32 	%r340, [CalculateAMatricesAndHVectors_param_9];
	add.s32 	%r123, %r340, %r122;
	ld.param.u32 	%r341, [CalculateAMatricesAndHVectors_param_10];
	add.s32 	%r124, %r341, %r122;
	ld.global.v2.f32 	{%f204, %f205}, [%r123];
	ld.global.v2.f32 	{%f206, %f207}, [%r124];
	mul.f32 	%f47, %f205, %f207;
	fma.rn.f32 	%f40, %f204, %f206, %f47;
	mul.f32 	%f48, %f205, %f206;
	neg.f32 	%f49, %f207;
	fma.rn.f32 	%f2, %f49, %f204, %f48;
	// inline asm
	abs.f32 	%f39, %f40;
	// inline asm
	// inline asm
	abs.f32 	%f41, %f2;
	// inline asm
	setp.eq.f32 	%p6, %f41, 0f00000000;
	setp.eq.f32 	%p7, %f39, 0f00000000;
	and.pred  	%p8, %p6, %p7;
	@%p8 bra 	BB13_8;

	setp.eq.f32 	%p9, %f41, 0f7F800000;
	setp.eq.f32 	%p10, %f39, 0f7F800000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB13_7;

	setp.lt.f32 	%p12, %f39, %f41;
	selp.f32 	%f51, %f41, %f39, %p12;
	selp.f32 	%f209, %f39, %f41, %p12;
	// inline asm
	abs.f32 	%f50, %f51;
	// inline asm
	setp.gt.f32 	%p13, %f50, 0f7E800000;
	mov.f32 	%f208, %f51;
	@%p13 bra 	BB13_5;
	bra.uni 	BB13_6;

BB13_5:
	mov.f32 	%f52, 0f3E800000;
	mul.rn.f32 	%f209, %f209, %f52;
	mul.rn.f32 	%f208, %f51, %f52;

BB13_6:
	// inline asm
	div.approx.f32 	%f53, %f209, %f208;
	// inline asm
	mul.rn.f32 	%f56, %f53, %f53;
	mov.f32 	%f57, 0fBF52C7EA;
	mul.rn.f32 	%f58, %f56, %f57;
	add.f32 	%f59, %f58, 0fC0B59883;
	mul.rn.f32 	%f60, %f59, %f56;
	add.f32 	%f61, %f60, 0fC0D21907;
	mul.rn.f32 	%f62, %f61, %f56;
	mul.rn.f32 	%f63, %f62, %f53;
	add.f32 	%f64, %f56, 0f41355DC0;
	mul.rn.f32 	%f65, %f64, %f56;
	add.f32 	%f66, %f65, 0f41E6BD60;
	mul.rn.f32 	%f67, %f66, %f56;
	add.f32 	%f68, %f67, 0f419D92C8;
	rcp.approx.f32 	%f69, %f68;
	mul.rn.f32 	%f70, %f63, %f69;
	add.f32 	%f71, %f70, %f53;
	mov.f32 	%f72, 0f3FC90FDB;
	sub.f32 	%f73, %f72, %f71;
	setp.gt.f32 	%p14, %f41, %f39;
	selp.f32 	%f74, %f73, %f71, %p14;
	mov.f32 	%f75, 0f40490FDB;
	sub.f32 	%f76, %f75, %f74;
	setp.lt.f32 	%p15, %f40, 0f00000000;
	selp.f32 	%f210, %f76, %f74, %p15;
	bra.uni 	BB13_9;

BB13_7:
	mov.b32 	 %r125, %f40;
	setp.lt.s32 	%p16, %r125, 0;
	selp.f32 	%f210, 0f4016CBE4, 0f3F490FDB, %p16;
	bra.uni 	BB13_9;

BB13_8:
	mov.b32 	 %r126, %f40;
	setp.lt.s32 	%p17, %r126, 0;
	selp.f32 	%f210, 0f40490FDB, 0f00000000, %p17;

BB13_9:
	mov.b32 	 %r127, %f2;
	and.b32  	%r128, %r127, -2147483648;
	mov.b32 	 %r129, %f210;
	and.b32  	%r130, %r129, 2147483647;
	or.b32  	%r131, %r130, %r128;
	mov.b32 	 %f15, %r131;
	mul.f32 	%f81, %f2, %f2;
	fma.rn.f32 	%f78, %f40, %f40, %f81;
	// inline asm
	sqrt.approx.f32 	%f77, %f78;
	// inline asm
	// inline asm
	sqrt.approx.f32 	%f79, %f77;
	// inline asm
	div.full.f32 	%f17, %f15, 0f40000000;
	setp.eq.f32 	%p18, %f17, 0f7F800000;
	setp.eq.f32 	%p19, %f17, 0fFF800000;
	or.pred  	%p20, %p18, %p19;
	add.u32 	%r28, %SP, 0;
	@%p20 bra 	BB13_28;

	// inline asm
	abs.f32 	%f82, %f17;
	// inline asm
	setp.gt.f32 	%p21, %f82, 0f473BA700;
	@%p21 bra 	BB13_12;

	mov.f32 	%f86, 0f3F22F983;
	mul.rn.f32 	%f85, %f17, %f86;
	// inline asm
	cvt.rni.f32.f32 	%f84, %f85;
	// inline asm
	cvt.rzi.s32.f32 	%r364, %f84;
	cvt.rn.f32.s32 	%f87, %r364;
	mov.f32 	%f88, 0f3FC90000;
	mul.rn.f32 	%f89, %f87, %f88;
	sub.f32 	%f90, %f17, %f89;
	mov.f32 	%f91, 0f39FD8000;
	mul.rn.f32 	%f92, %f87, %f91;
	sub.f32 	%f93, %f90, %f92;
	mov.f32 	%f94, 0f34A88000;
	mul.rn.f32 	%f95, %f87, %f94;
	sub.f32 	%f96, %f93, %f95;
	mov.f32 	%f97, 0f2E85A309;
	mul.rn.f32 	%f98, %f87, %f97;
	sub.f32 	%f211, %f96, %f98;
	bra.uni 	BB13_24;

BB13_12:
	mov.b32 	 %r30, %f17;
	and.b32  	%r356, %r30, -2147483648;
	shr.u32 	%r150, %r30, 23;
	and.b32  	%r151, %r150, 255;
	add.s32 	%r152, %r151, -128;
	shl.b32 	%r153, %r30, 8;
	or.b32  	%r149, %r153, -2147483648;
	shr.u32 	%r154, %r152, 5;
	mov.u32 	%r155, 4;
	sub.s32 	%r156, %r155, %r154;
	ld.const.u32 	%r133, [__GPU_i2opi_f];
	mul.lo.s32 	%r157, %r133, %r149;
	// inline asm
	mul.hi.u32 	%r132, %r133, %r149;
	// inline asm
	st.local.u32 	[%r28], %r157;
	ld.const.u32 	%r136, [__GPU_i2opi_f+4];
	mul.lo.s32 	%r158, %r136, %r149;
	// inline asm
	mul.hi.u32 	%r135, %r136, %r149;
	// inline asm
	mad.lo.s32 	%r159, %r136, %r149, %r132;
	setp.lt.u32 	%p22, %r159, %r158;
	selp.u32 	%r160, 1, 0, %p22;
	add.s32 	%r161, %r160, %r135;
	st.local.u32 	[%r28+4], %r159;
	ld.const.u32 	%r139, [__GPU_i2opi_f+8];
	mul.lo.s32 	%r162, %r139, %r149;
	// inline asm
	mul.hi.u32 	%r138, %r139, %r149;
	// inline asm
	mad.lo.s32 	%r163, %r139, %r149, %r161;
	setp.lt.u32 	%p23, %r163, %r162;
	selp.u32 	%r164, 1, 0, %p23;
	add.s32 	%r165, %r164, %r138;
	st.local.u32 	[%r28+8], %r163;
	ld.const.u32 	%r142, [__GPU_i2opi_f+12];
	mul.lo.s32 	%r166, %r142, %r149;
	// inline asm
	mul.hi.u32 	%r141, %r142, %r149;
	// inline asm
	mad.lo.s32 	%r167, %r142, %r149, %r165;
	setp.lt.u32 	%p24, %r167, %r166;
	selp.u32 	%r168, 1, 0, %p24;
	add.s32 	%r169, %r168, %r141;
	st.local.u32 	[%r28+12], %r167;
	ld.const.u32 	%r145, [__GPU_i2opi_f+16];
	mul.lo.s32 	%r170, %r145, %r149;
	// inline asm
	mul.hi.u32 	%r144, %r145, %r149;
	// inline asm
	mad.lo.s32 	%r171, %r145, %r149, %r169;
	setp.lt.u32 	%p25, %r171, %r170;
	selp.u32 	%r172, 1, 0, %p25;
	add.s32 	%r173, %r172, %r144;
	st.local.u32 	[%r28+16], %r171;
	ld.const.u32 	%r148, [__GPU_i2opi_f+20];
	mul.lo.s32 	%r174, %r148, %r149;
	// inline asm
	mul.hi.u32 	%r147, %r148, %r149;
	// inline asm
	mad.lo.s32 	%r175, %r148, %r149, %r173;
	setp.lt.u32 	%p26, %r175, %r174;
	selp.u32 	%r176, 1, 0, %p26;
	add.s32 	%r177, %r176, %r147;
	st.local.u32 	[%r28+20], %r175;
	st.local.u32 	[%r28+24], %r177;
	and.b32  	%r178, %r150, 31;
	shl.b32 	%r180, %r156, 2;
	add.s32 	%r181, %r180, %r28;
	add.s32 	%r32, %r181, -16;
	ld.local.u32 	%r354, [%r181+8];
	ld.local.u32 	%r355, [%r181+4];
	setp.eq.s32 	%p27, %r178, 0;
	@%p27 bra 	BB13_14;

	shl.b32 	%r185, %r354, %r178;
	neg.s32 	%r186, %r150;
	and.b32  	%r187, %r186, 31;
	shr.u32 	%r188, %r355, %r187;
	or.b32  	%r354, %r188, %r185;
	shl.b32 	%r189, %r355, %r178;
	ld.local.u32 	%r190, [%r32+16];
	shr.u32 	%r191, %r190, %r187;
	or.b32  	%r355, %r191, %r189;

BB13_14:
	shr.u32 	%r192, %r355, 30;
	shl.b32 	%r193, %r354, 2;
	or.b32  	%r360, %r192, %r193;
	shl.b32 	%r40, %r355, 2;
	setp.ne.s32 	%p28, %r40, 0;
	selp.u32 	%r194, 1, 0, %p28;
	add.s32 	%r195, %r194, %r360;
	setp.gt.u32 	%p29, %r195, -2147483648;
	selp.u32 	%r196, 1, 0, %p29;
	shr.u32 	%r197, %r354, 30;
	add.s32 	%r198, %r196, %r197;
	setp.lt.s32 	%p30, %r30, 0;
	neg.s32 	%r200, %r198;
	selp.b32 	%r364, %r200, %r198, %p30;
	@%p29 bra 	BB13_16;

	mov.u32 	%r359, %r40;
	bra.uni 	BB13_17;

BB13_16:
	not.b32 	%r201, %r360;
	neg.s32 	%r42, %r40;
	setp.eq.s32 	%p31, %r40, 0;
	selp.u32 	%r202, 1, 0, %p31;
	add.s32 	%r360, %r202, %r201;
	xor.b32  	%r356, %r356, -2147483648;
	mov.u32 	%r359, %r42;

BB13_17:
	mov.u32 	%r358, %r359;
	setp.gt.s32 	%p32, %r360, 0;
	@%p32 bra 	BB13_19;

	mov.u32 	%r363, 0;
	bra.uni 	BB13_21;

BB13_19:
	mov.u32 	%r363, 0;

BB13_20:
	shr.u32 	%r205, %r358, 31;
	shl.b32 	%r206, %r360, 1;
	or.b32  	%r360, %r205, %r206;
	shl.b32 	%r358, %r358, 1;
	add.s32 	%r363, %r363, -1;
	setp.gt.s32 	%p33, %r360, 0;
	@%p33 bra 	BB13_20;

BB13_21:
	mul.lo.s32 	%r362, %r360, -921707870;
	mov.u32 	%r209, -921707870;
	// inline asm
	mul.hi.u32 	%r207, %r360, %r209;
	// inline asm
	setp.gt.s32 	%p34, %r207, 0;
	mov.u32 	%r361, %r207;
	@%p34 bra 	BB13_22;
	bra.uni 	BB13_23;

BB13_22:
	shl.b32 	%r210, %r207, 1;
	mul.lo.s32 	%r211, %r360, -921707870;
	shr.u32 	%r212, %r211, 31;
	or.b32  	%r361, %r210, %r212;
	mul.lo.s32 	%r362, %r360, -1843415740;
	add.s32 	%r363, %r363, -1;

BB13_23:
	setp.ne.s32 	%p35, %r362, 0;
	selp.u32 	%r213, 1, 0, %p35;
	add.s32 	%r214, %r213, %r361;
	shr.u32 	%r215, %r214, 8;
	shr.u32 	%r216, %r214, 7;
	and.b32  	%r217, %r216, 1;
	shl.b32 	%r218, %r363, 23;
	add.s32 	%r219, %r218, %r215;
	add.s32 	%r220, %r219, %r217;
	add.s32 	%r221, %r220, 1056964608;
	or.b32  	%r222, %r221, %r356;
	mov.b32 	 %f211, %r222;

BB13_24:
	add.s32 	%r65, %r364, 1;
	and.b32  	%r223, %r65, 1;
	setp.eq.s32 	%p36, %r223, 0;
	mul.rn.f32 	%f21, %f211, %f211;
	@%p36 bra 	BB13_26;

	mov.f32 	%f99, 0f37CCF5CE;
	mul.rn.f32 	%f100, %f99, %f21;
	add.f32 	%f101, %f100, 0fBAB6061A;
	mul.rn.f32 	%f102, %f101, %f21;
	add.f32 	%f103, %f102, 0f3D2AAAA5;
	mul.rn.f32 	%f104, %f103, %f21;
	add.f32 	%f105, %f104, 0fBF000000;
	mul.rn.f32 	%f106, %f105, %f21;
	add.f32 	%f212, %f106, 0f3F800000;
	bra.uni 	BB13_27;

BB13_26:
	mov.f32 	%f107, 0fB94CA1F9;
	mul.rn.f32 	%f108, %f107, %f21;
	add.f32 	%f109, %f108, 0f3C08839E;
	mul.rn.f32 	%f110, %f109, %f21;
	add.f32 	%f111, %f110, 0fBE2AAAA3;
	mul.rn.f32 	%f112, %f111, %f21;
	mul.rn.f32 	%f113, %f112, %f211;
	add.f32 	%f212, %f113, %f211;

BB13_27:
	and.b32  	%r224, %r65, 2;
	setp.eq.s32 	%p37, %r224, 0;
	neg.f32 	%f114, %f212;
	selp.f32 	%f213, %f212, %f114, %p37;
	bra.uni 	BB13_29;

BB13_28:
	mov.f32 	%f213, 0f7FFFFFFF;

BB13_29:
	mul.f32 	%f28, %f79, %f213;
	@%p20 bra 	BB13_48;

	// inline asm
	abs.f32 	%f115, %f17;
	// inline asm
	setp.gt.f32 	%p41, %f115, 0f473BA700;
	@%p41 bra 	BB13_32;

	mov.f32 	%f119, 0f3F22F983;
	mul.rn.f32 	%f118, %f17, %f119;
	// inline asm
	cvt.rni.f32.f32 	%f117, %f118;
	// inline asm
	cvt.rzi.s32.f32 	%r375, %f117;
	cvt.rn.f32.s32 	%f120, %r375;
	mov.f32 	%f121, 0f3FC90000;
	mul.rn.f32 	%f122, %f120, %f121;
	sub.f32 	%f123, %f17, %f122;
	mov.f32 	%f124, 0f39FD8000;
	mul.rn.f32 	%f125, %f120, %f124;
	sub.f32 	%f126, %f123, %f125;
	mov.f32 	%f127, 0f34A88000;
	mul.rn.f32 	%f128, %f120, %f127;
	sub.f32 	%f129, %f126, %f128;
	mov.f32 	%f130, 0f2E85A309;
	mul.rn.f32 	%f131, %f120, %f130;
	sub.f32 	%f214, %f129, %f131;
	bra.uni 	BB13_44;

BB13_32:
	mov.b32 	 %r67, %f17;
	and.b32  	%r367, %r67, -2147483648;
	shr.u32 	%r69, %r67, 23;
	and.b32  	%r243, %r69, 255;
	add.s32 	%r244, %r243, -128;
	shl.b32 	%r245, %r67, 8;
	or.b32  	%r242, %r245, -2147483648;
	shr.u32 	%r246, %r244, 5;
	mov.u32 	%r247, 4;
	sub.s32 	%r248, %r247, %r246;
	ld.const.u32 	%r226, [__GPU_i2opi_f];
	mul.lo.s32 	%r249, %r226, %r242;
	// inline asm
	mul.hi.u32 	%r225, %r226, %r242;
	// inline asm
	st.local.u32 	[%SP+0], %r249;
	ld.const.u32 	%r229, [__GPU_i2opi_f+4];
	mul.lo.s32 	%r251, %r229, %r242;
	// inline asm
	mul.hi.u32 	%r228, %r229, %r242;
	// inline asm
	mad.lo.s32 	%r252, %r229, %r242, %r225;
	st.local.u32 	[%SP+4], %r252;
	setp.lt.u32 	%p42, %r252, %r251;
	selp.u32 	%r253, 1, 0, %p42;
	add.s32 	%r254, %r253, %r228;
	ld.const.u32 	%r232, [__GPU_i2opi_f+8];
	mul.lo.s32 	%r255, %r232, %r242;
	// inline asm
	mul.hi.u32 	%r231, %r232, %r242;
	// inline asm
	mad.lo.s32 	%r256, %r232, %r242, %r254;
	st.local.u32 	[%SP+8], %r256;
	setp.lt.u32 	%p43, %r256, %r255;
	selp.u32 	%r257, 1, 0, %p43;
	add.s32 	%r258, %r257, %r231;
	ld.const.u32 	%r235, [__GPU_i2opi_f+12];
	mul.lo.s32 	%r259, %r235, %r242;
	// inline asm
	mul.hi.u32 	%r234, %r235, %r242;
	// inline asm
	mad.lo.s32 	%r260, %r235, %r242, %r258;
	st.local.u32 	[%SP+12], %r260;
	setp.lt.u32 	%p44, %r260, %r259;
	selp.u32 	%r261, 1, 0, %p44;
	add.s32 	%r262, %r261, %r234;
	ld.const.u32 	%r238, [__GPU_i2opi_f+16];
	mul.lo.s32 	%r263, %r238, %r242;
	// inline asm
	mul.hi.u32 	%r237, %r238, %r242;
	// inline asm
	mad.lo.s32 	%r264, %r238, %r242, %r262;
	st.local.u32 	[%SP+16], %r264;
	setp.lt.u32 	%p45, %r264, %r263;
	selp.u32 	%r265, 1, 0, %p45;
	add.s32 	%r266, %r265, %r237;
	ld.const.u32 	%r241, [__GPU_i2opi_f+20];
	mul.lo.s32 	%r267, %r241, %r242;
	// inline asm
	mul.hi.u32 	%r240, %r241, %r242;
	// inline asm
	mad.lo.s32 	%r268, %r241, %r242, %r266;
	st.local.u32 	[%SP+20], %r268;
	setp.lt.u32 	%p46, %r268, %r267;
	selp.u32 	%r269, 1, 0, %p46;
	add.s32 	%r270, %r269, %r240;
	st.local.u32 	[%SP+24], %r270;
	and.b32  	%r70, %r69, 31;
	shl.b32 	%r271, %r248, 2;
	add.s32 	%r272, %r271, %r28;
	add.s32 	%r71, %r272, -16;
	ld.local.u32 	%r365, [%r272+8];
	ld.local.u32 	%r366, [%r272+4];
	setp.eq.s32 	%p47, %r70, 0;
	@%p47 bra 	BB13_34;

	shl.b32 	%r273, %r365, %r70;
	neg.s32 	%r274, %r69;
	and.b32  	%r275, %r274, 31;
	shr.u32 	%r276, %r366, %r275;
	or.b32  	%r365, %r276, %r273;
	ld.local.u32 	%r277, [%r71+16];
	shr.u32 	%r278, %r277, %r275;
	shl.b32 	%r279, %r366, %r70;
	or.b32  	%r366, %r278, %r279;

BB13_34:
	shr.u32 	%r280, %r366, 30;
	shl.b32 	%r281, %r365, 2;
	or.b32  	%r371, %r280, %r281;
	shl.b32 	%r79, %r366, 2;
	setp.ne.s32 	%p48, %r79, 0;
	selp.u32 	%r282, 1, 0, %p48;
	add.s32 	%r283, %r282, %r371;
	setp.gt.u32 	%p49, %r283, -2147483648;
	selp.u32 	%r284, 1, 0, %p49;
	shr.u32 	%r285, %r365, 30;
	add.s32 	%r286, %r284, %r285;
	neg.s32 	%r287, %r286;
	setp.lt.s32 	%p50, %r67, 0;
	selp.b32 	%r375, %r287, %r286, %p50;
	@%p49 bra 	BB13_36;

	mov.u32 	%r370, %r79;
	bra.uni 	BB13_37;

BB13_36:
	not.b32 	%r288, %r371;
	neg.s32 	%r81, %r79;
	setp.eq.s32 	%p51, %r79, 0;
	selp.u32 	%r289, 1, 0, %p51;
	add.s32 	%r371, %r289, %r288;
	xor.b32  	%r367, %r367, -2147483648;
	mov.u32 	%r370, %r81;

BB13_37:
	mov.u32 	%r369, %r370;
	setp.gt.s32 	%p52, %r371, 0;
	@%p52 bra 	BB13_39;

	mov.u32 	%r374, 0;
	bra.uni 	BB13_41;

BB13_39:
	mov.u32 	%r374, 0;

BB13_40:
	shr.u32 	%r292, %r369, 31;
	shl.b32 	%r293, %r371, 1;
	or.b32  	%r371, %r292, %r293;
	shl.b32 	%r369, %r369, 1;
	add.s32 	%r374, %r374, -1;
	setp.gt.s32 	%p53, %r371, 0;
	@%p53 bra 	BB13_40;

BB13_41:
	mul.lo.s32 	%r373, %r371, -921707870;
	mov.u32 	%r296, -921707870;
	// inline asm
	mul.hi.u32 	%r294, %r371, %r296;
	// inline asm
	setp.gt.s32 	%p54, %r294, 0;
	mov.u32 	%r372, %r294;
	@%p54 bra 	BB13_42;
	bra.uni 	BB13_43;

BB13_42:
	shl.b32 	%r297, %r294, 1;
	shr.u32 	%r298, %r373, 31;
	or.b32  	%r372, %r297, %r298;
	mul.lo.s32 	%r373, %r371, -1843415740;
	add.s32 	%r374, %r374, -1;

BB13_43:
	setp.ne.s32 	%p55, %r373, 0;
	selp.u32 	%r299, 1, 0, %p55;
	add.s32 	%r300, %r299, %r372;
	shr.u32 	%r301, %r300, 8;
	shr.u32 	%r302, %r300, 7;
	and.b32  	%r303, %r302, 1;
	shl.b32 	%r304, %r374, 23;
	add.s32 	%r305, %r304, %r301;
	add.s32 	%r306, %r305, %r303;
	add.s32 	%r307, %r306, 1056964608;
	or.b32  	%r308, %r307, %r367;
	mov.b32 	 %f214, %r308;

BB13_44:
	add.s32 	%r104, %r375, 1;
	and.b32  	%r309, %r104, 1;
	setp.eq.s32 	%p56, %r309, 0;
	mul.rn.f32 	%f32, %f214, %f214;
	@%p56 bra 	BB13_46;

	mov.f32 	%f132, 0f37CCF5CE;
	mul.rn.f32 	%f133, %f132, %f32;
	add.f32 	%f134, %f133, 0fBAB6061A;
	mul.rn.f32 	%f135, %f134, %f32;
	add.f32 	%f136, %f135, 0f3D2AAAA5;
	mul.rn.f32 	%f137, %f136, %f32;
	add.f32 	%f138, %f137, 0fBF000000;
	mul.rn.f32 	%f139, %f138, %f32;
	add.f32 	%f215, %f139, 0f3F800000;
	bra.uni 	BB13_47;

BB13_46:
	mov.f32 	%f140, 0fB94CA1F9;
	mul.rn.f32 	%f141, %f140, %f32;
	add.f32 	%f142, %f141, 0f3C08839E;
	mul.rn.f32 	%f143, %f142, %f32;
	add.f32 	%f144, %f143, 0fBE2AAAA3;
	mul.rn.f32 	%f145, %f144, %f32;
	mul.rn.f32 	%f146, %f145, %f214;
	add.f32 	%f215, %f146, %f214;

BB13_47:
	and.b32  	%r310, %r104, 2;
	setp.eq.s32 	%p57, %r310, 0;
	neg.f32 	%f147, %f215;
	selp.f32 	%f216, %f215, %f147, %p57;
	bra.uni 	BB13_49;

BB13_48:
	mov.f32 	%f216, 0f7FFFFFFF;

BB13_49:
	shl.b32 	%r311, %r27, 2;
	ld.param.u32 	%r342, [CalculateAMatricesAndHVectors_param_11];
	add.s32 	%r312, %r342, %r311;
	ld.global.f32 	%f148, [%r312];
	ld.param.u32 	%r343, [CalculateAMatricesAndHVectors_param_12];
	add.s32 	%r313, %r343, %r311;
	ld.global.f32 	%f149, [%r313];
	mul.f32 	%f150, %f149, %f149;
	fma.rn.f32 	%f151, %f148, %f148, %f150;
	ld.param.u32 	%r344, [CalculateAMatricesAndHVectors_param_13];
	add.s32 	%r314, %r344, %r311;
	ld.global.f32 	%f152, [%r314];
	fma.rn.f32 	%f153, %f152, %f152, %f151;
	ld.param.u32 	%r345, [CalculateAMatricesAndHVectors_param_14];
	add.s32 	%r315, %r345, %r311;
	ld.global.f32 	%f154, [%r315];
	mul.f32 	%f155, %f149, %f154;
	fma.rn.f32 	%f156, %f148, %f149, %f155;
	ld.param.u32 	%r346, [CalculateAMatricesAndHVectors_param_15];
	add.s32 	%r316, %r346, %r311;
	ld.global.f32 	%f157, [%r316];
	fma.rn.f32 	%f158, %f152, %f157, %f156;
	mul.f32 	%f159, %f149, %f157;
	fma.rn.f32 	%f160, %f148, %f152, %f159;
	ld.param.u32 	%r347, [CalculateAMatricesAndHVectors_param_16];
	add.s32 	%r317, %r347, %r311;
	ld.global.f32 	%f161, [%r317];
	fma.rn.f32 	%f162, %f152, %f161, %f160;
	mul.f32 	%f163, %f154, %f154;
	fma.rn.f32 	%f164, %f149, %f149, %f163;
	mul.f32 	%f165, %f157, %f157;
	fma.rn.f32 	%f166, %f157, %f157, %f164;
	mul.f32 	%f167, %f154, %f157;
	fma.rn.f32 	%f168, %f149, %f152, %f167;
	fma.rn.f32 	%f169, %f157, %f161, %f168;
	fma.rn.f32 	%f170, %f152, %f152, %f165;
	fma.rn.f32 	%f171, %f161, %f161, %f170;
	mul.f32 	%f172, %f28, %f216;
	ld.param.u32 	%r331, [CalculateAMatricesAndHVectors_param_0];
	add.s32 	%r318, %r331, %r311;
	ld.global.f32 	%f173, [%r318];
	fma.rn.f32 	%f174, %f172, %f153, %f173;
	st.global.f32 	[%r318], %f174;
	ld.param.u32 	%r332, [CalculateAMatricesAndHVectors_param_1];
	add.s32 	%r319, %r332, %r311;
	ld.global.f32 	%f175, [%r319];
	fma.rn.f32 	%f176, %f172, %f158, %f175;
	st.global.f32 	[%r319], %f176;
	ld.param.u32 	%r333, [CalculateAMatricesAndHVectors_param_2];
	add.s32 	%r320, %r333, %r311;
	ld.global.f32 	%f177, [%r320];
	fma.rn.f32 	%f178, %f172, %f162, %f177;
	st.global.f32 	[%r320], %f178;
	ld.param.u32 	%r334, [CalculateAMatricesAndHVectors_param_3];
	add.s32 	%r321, %r334, %r311;
	ld.global.f32 	%f179, [%r321];
	fma.rn.f32 	%f180, %f172, %f166, %f179;
	st.global.f32 	[%r321], %f180;
	ld.param.u32 	%r335, [CalculateAMatricesAndHVectors_param_4];
	add.s32 	%r322, %r335, %r311;
	ld.global.f32 	%f181, [%r322];
	fma.rn.f32 	%f182, %f172, %f169, %f181;
	st.global.f32 	[%r322], %f182;
	ld.param.u32 	%r336, [CalculateAMatricesAndHVectors_param_5];
	add.s32 	%r323, %r336, %r311;
	ld.global.f32 	%f183, [%r323];
	fma.rn.f32 	%f184, %f172, %f171, %f183;
	st.global.f32 	[%r323], %f184;
	mul.f32 	%f185, %f172, %f15;
	ld.param.u32 	%r353, [CalculateAMatricesAndHVectors_param_23];
	shl.b32 	%r324, %r353, 2;
	ld.param.u32 	%r348, [CalculateAMatricesAndHVectors_param_17];
	add.s32 	%r325, %r348, %r324;
	ld.const.f32 	%f186, [%r325];
	ld.param.u32 	%r349, [CalculateAMatricesAndHVectors_param_18];
	add.s32 	%r326, %r349, %r324;
	ld.const.f32 	%f187, [%r326];
	mul.f32 	%f188, %f187, %f158;
	fma.rn.f32 	%f189, %f186, %f153, %f188;
	ld.param.u32 	%r350, [CalculateAMatricesAndHVectors_param_19];
	add.s32 	%r327, %r350, %r324;
	ld.const.f32 	%f190, [%r327];
	fma.rn.f32 	%f191, %f190, %f162, %f189;
	ld.param.u32 	%r337, [CalculateAMatricesAndHVectors_param_6];
	add.s32 	%r328, %r337, %r311;
	ld.global.f32 	%f192, [%r328];
	fma.rn.f32 	%f193, %f185, %f191, %f192;
	st.global.f32 	[%r328], %f193;
	mul.f32 	%f194, %f187, %f166;
	fma.rn.f32 	%f195, %f186, %f158, %f194;
	fma.rn.f32 	%f196, %f190, %f169, %f195;
	ld.param.u32 	%r338, [CalculateAMatricesAndHVectors_param_7];
	add.s32 	%r329, %r338, %r311;
	ld.global.f32 	%f197, [%r329];
	fma.rn.f32 	%f198, %f185, %f196, %f197;
	st.global.f32 	[%r329], %f198;
	mul.f32 	%f199, %f187, %f169;
	fma.rn.f32 	%f200, %f186, %f162, %f199;
	fma.rn.f32 	%f201, %f190, %f171, %f200;
	ld.param.u32 	%r339, [CalculateAMatricesAndHVectors_param_8];
	add.s32 	%r330, %r339, %r311;
	ld.global.f32 	%f202, [%r330];
	fma.rn.f32 	%f203, %f185, %f201, %f202;
	st.global.f32 	[%r330], %f203;
	ret;
}

.entry CalculateDisplacementUpdate(
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_0,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_1,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_2,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_3,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_4,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_5,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_6,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_7,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_8,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_9,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_10,
	.param .u32 .ptr .global .align 4 CalculateDisplacementUpdate_param_11,
	.param .u32 CalculateDisplacementUpdate_param_12,
	.param .u32 CalculateDisplacementUpdate_param_13,
	.param .u32 CalculateDisplacementUpdate_param_14
)
{
	.reg .f32 	%f<54>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<63>;


	ld.param.u32 	%r13, [CalculateDisplacementUpdate_param_12];
	ld.param.u32 	%r14, [CalculateDisplacementUpdate_param_13];
	ld.param.u32 	%r30, [CalculateDisplacementUpdate_param_14];
	// inline asm
	mov.u32 	%r18, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.x;
	// inline asm
	add.s32 	%r31, %r21, %r18;
	mad.lo.s32 	%r15, %r20, %r19, %r31;
	// inline asm
	mov.u32 	%r22, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r23, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r24, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r25, %tid.y;
	// inline asm
	add.s32 	%r32, %r25, %r22;
	mad.lo.s32 	%r16, %r24, %r23, %r32;
	// inline asm
	mov.u32 	%r26, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r27, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r28, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r29, %tid.z;
	// inline asm
	add.s32 	%r33, %r29, %r26;
	mad.lo.s32 	%r17, %r28, %r27, %r33;
	setp.lt.s32 	%p1, %r15, %r13;
	setp.lt.s32 	%p2, %r16, %r14;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r17, %r30;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB14_2;

	ret;

BB14_2:
	ld.param.u32 	%r62, [CalculateDisplacementUpdate_param_13];
	mad.lo.s32 	%r34, %r17, %r62, %r16;
	ld.param.u32 	%r61, [CalculateDisplacementUpdate_param_12];
	mad.lo.s32 	%r35, %r34, %r61, %r15;
	shl.b32 	%r36, %r35, 2;
	ld.param.u32 	%r52, [CalculateDisplacementUpdate_param_3];
	add.s32 	%r37, %r52, %r36;
	ld.param.u32 	%r53, [CalculateDisplacementUpdate_param_4];
	add.s32 	%r38, %r53, %r36;
	ld.param.u32 	%r54, [CalculateDisplacementUpdate_param_5];
	add.s32 	%r39, %r54, %r36;
	ld.param.u32 	%r55, [CalculateDisplacementUpdate_param_6];
	add.s32 	%r40, %r55, %r36;
	ld.param.u32 	%r56, [CalculateDisplacementUpdate_param_7];
	add.s32 	%r41, %r56, %r36;
	ld.param.u32 	%r57, [CalculateDisplacementUpdate_param_8];
	add.s32 	%r42, %r57, %r36;
	ld.param.u32 	%r58, [CalculateDisplacementUpdate_param_9];
	add.s32 	%r43, %r58, %r36;
	ld.param.u32 	%r59, [CalculateDisplacementUpdate_param_10];
	add.s32 	%r44, %r59, %r36;
	ld.param.u32 	%r60, [CalculateDisplacementUpdate_param_11];
	add.s32 	%r45, %r60, %r36;
	ld.global.f32 	%f1, [%r40];
	ld.global.f32 	%f2, [%r37];
	mul.f32 	%f3, %f2, %f1;
	ld.global.f32 	%f4, [%r42];
	mul.f32 	%f5, %f3, %f4;
	ld.global.f32 	%f6, [%r41];
	mul.f32 	%f7, %f2, %f6;
	neg.f32 	%f8, %f7;
	fma.rn.f32 	%f9, %f8, %f6, %f5;
	ld.global.f32 	%f10, [%r38];
	mul.f32 	%f11, %f10, %f10;
	neg.f32 	%f12, %f11;
	fma.rn.f32 	%f13, %f12, %f4, %f9;
	mul.f32 	%f14, %f10, %f6;
	ld.global.f32 	%f15, [%r39];
	fma.rn.f32 	%f16, %f14, %f15, %f13;
	mul.f32 	%f17, %f15, %f10;
	fma.rn.f32 	%f18, %f17, %f6, %f16;
	mul.f32 	%f19, %f15, %f1;
	neg.f32 	%f20, %f19;
	fma.rn.f32 	%f21, %f20, %f15, %f18;
	add.f32 	%f22, %f21, 0f24E69595;
	rcp.approx.f32 	%f23, %f22;
	ld.global.f32 	%f24, [%r45];
	neg.f32 	%f25, %f15;
	fma.rn.f32 	%f26, %f25, %f1, %f14;
	mul.f32 	%f27, %f24, %f26;
	mul.f32 	%f28, %f10, %f4;
	ld.global.f32 	%f29, [%r44];
	fma.rn.f32 	%f30, %f25, %f6, %f28;
	neg.f32 	%f31, %f29;
	fma.rn.f32 	%f32, %f31, %f30, %f27;
	mul.f32 	%f33, %f1, %f4;
	neg.f32 	%f34, %f6;
	fma.rn.f32 	%f35, %f34, %f6, %f33;
	ld.global.f32 	%f36, [%r43];
	fma.rn.f32 	%f37, %f36, %f35, %f32;
	mul.f32 	%f38, %f23, %f37;
	ld.param.u32 	%r49, [CalculateDisplacementUpdate_param_0];
	add.s32 	%r46, %r49, %r36;
	st.global.f32 	[%r46], %f38;
	mul.f32 	%f39, %f2, %f4;
	fma.rn.f32 	%f40, %f25, %f15, %f39;
	mul.f32 	%f41, %f29, %f40;
	fma.rn.f32 	%f42, %f25, %f10, %f7;
	neg.f32 	%f43, %f24;
	fma.rn.f32 	%f44, %f43, %f42, %f41;
	neg.f32 	%f45, %f36;
	fma.rn.f32 	%f46, %f45, %f30, %f44;
	mul.f32 	%f47, %f23, %f46;
	ld.param.u32 	%r50, [CalculateDisplacementUpdate_param_1];
	add.s32 	%r47, %r50, %r36;
	st.global.f32 	[%r47], %f47;
	neg.f32 	%f48, %f10;
	fma.rn.f32 	%f49, %f48, %f10, %f3;
	mul.f32 	%f50, %f24, %f49;
	fma.rn.f32 	%f51, %f31, %f42, %f50;
	fma.rn.f32 	%f52, %f36, %f26, %f51;
	mul.f32 	%f53, %f23, %f52;
	ld.param.u32 	%r51, [CalculateDisplacementUpdate_param_2];
	add.s32 	%r48, %r51, %r36;
	st.global.f32 	[%r48], %f53;
	ret;
}

.entry InterpolateVolumeNearestLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeNearestLinear_param_0,
	.param .texref InterpolateVolumeNearestLinear_param_1,
	.param .u32 .ptr .const .align 4 InterpolateVolumeNearestLinear_param_2,
	.param .u32 InterpolateVolumeNearestLinear_param_3,
	.param .u32 InterpolateVolumeNearestLinear_param_4,
	.param .u32 InterpolateVolumeNearestLinear_param_5,
	.param .u32 InterpolateVolumeNearestLinear_param_6
)
{
	.reg .f32 	%f<49>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<37>;


	ld.param.u32 	%r3, [InterpolateVolumeNearestLinear_param_3];
	ld.param.u32 	%r4, [InterpolateVolumeNearestLinear_param_4];
	ld.param.u32 	%r5, [InterpolateVolumeNearestLinear_param_5];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r22, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r22;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r23, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r23;
	// inline asm
	mov.u32 	%r18, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.z;
	// inline asm
	add.s32 	%r24, %r21, %r18;
	mad.lo.s32 	%r9, %r20, %r19, %r24;
	setp.lt.s32 	%p1, %r7, %r3;
	setp.lt.s32 	%p2, %r8, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB15_2;

	ret;

BB15_2:
	ld.param.u32 	%r35, [InterpolateVolumeNearestLinear_param_5];
	ld.param.u32 	%r36, [InterpolateVolumeNearestLinear_param_6];
	mad.lo.s32 	%r25, %r35, %r36, %r9;
	ld.param.u32 	%r34, [InterpolateVolumeNearestLinear_param_4];
	mad.lo.s32 	%r26, %r25, %r34, %r8;
	ld.param.u32 	%r33, [InterpolateVolumeNearestLinear_param_3];
	mad.lo.s32 	%r27, %r26, %r33, %r7;
	cvt.rn.f32.s32 	%f9, %r33;
	add.f32 	%f10, %f9, 0fBF800000;
	mov.f32 	%f11, 0f3F000000;
	cvt.rn.f32.s32 	%f12, %r7;
	neg.f32 	%f13, %f10;
	fma.rn.f32 	%f14, %f13, %f11, %f12;
	cvt.rn.f32.s32 	%f15, %r34;
	add.f32 	%f16, %f15, 0fBF800000;
	cvt.rn.f32.s32 	%f17, %r8;
	neg.f32 	%f18, %f16;
	fma.rn.f32 	%f19, %f18, %f11, %f17;
	cvt.rn.f32.s32 	%f20, %r35;
	add.f32 	%f21, %f20, 0fBF800000;
	cvt.rn.f32.s32 	%f22, %r9;
	neg.f32 	%f23, %f21;
	fma.rn.f32 	%f24, %f23, %f11, %f22;
	ld.param.u32 	%r32, [InterpolateVolumeNearestLinear_param_2];
	ld.const.f32 	%f25, [%r32];
	add.f32 	%f26, %f12, %f25;
	ld.const.f32 	%f27, [%r32+12];
	fma.rn.f32 	%f28, %f27, %f14, %f26;
	ld.const.f32 	%f29, [%r32+16];
	fma.rn.f32 	%f30, %f29, %f19, %f28;
	ld.const.f32 	%f31, [%r32+20];
	fma.rn.f32 	%f32, %f31, %f24, %f30;
	add.f32 	%f5, %f32, 0f3F000000;
	ld.const.f32 	%f33, [%r32+4];
	add.f32 	%f34, %f17, %f33;
	ld.const.f32 	%f35, [%r32+24];
	fma.rn.f32 	%f36, %f35, %f14, %f34;
	ld.const.f32 	%f37, [%r32+28];
	fma.rn.f32 	%f38, %f37, %f19, %f36;
	ld.const.f32 	%f39, [%r32+32];
	fma.rn.f32 	%f40, %f39, %f24, %f38;
	add.f32 	%f6, %f40, 0f3F000000;
	ld.const.f32 	%f41, [%r32+8];
	add.f32 	%f42, %f22, %f41;
	ld.const.f32 	%f43, [%r32+36];
	fma.rn.f32 	%f44, %f43, %f14, %f42;
	ld.const.f32 	%f45, [%r32+40];
	fma.rn.f32 	%f46, %f45, %f19, %f44;
	ld.const.f32 	%f47, [%r32+44];
	fma.rn.f32 	%f48, %f47, %f24, %f46;
	add.f32 	%f7, %f48, 0f3F000000;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r28, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f1, %f2, %f3, %f4}, [InterpolateVolumeNearestLinear_param_1, volume_sampler_nearest, {%f5, %f6, %f7, %f8}];
	// inline asm
	shl.b32 	%r29, %r27, 2;
	ld.param.u32 	%r31, [InterpolateVolumeNearestLinear_param_0];
	add.s32 	%r30, %r31, %r29;
	st.global.f32 	[%r30], %f1;
	ret;
}

.entry InterpolateVolumeNearestNonLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeNearestNonLinear_param_0,
	.param .texref InterpolateVolumeNearestNonLinear_param_1,
	.param .u32 .ptr .global .align 4 InterpolateVolumeNearestNonLinear_param_2,
	.param .u32 .ptr .global .align 4 InterpolateVolumeNearestNonLinear_param_3,
	.param .u32 .ptr .global .align 4 InterpolateVolumeNearestNonLinear_param_4,
	.param .u32 InterpolateVolumeNearestNonLinear_param_5,
	.param .u32 InterpolateVolumeNearestNonLinear_param_6,
	.param .u32 InterpolateVolumeNearestNonLinear_param_7,
	.param .u32 InterpolateVolumeNearestNonLinear_param_8
)
{
	.reg .f32 	%f<18>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<47>;


	ld.param.u32 	%r5, [InterpolateVolumeNearestNonLinear_param_5];
	ld.param.u32 	%r6, [InterpolateVolumeNearestNonLinear_param_6];
	ld.param.u32 	%r7, [InterpolateVolumeNearestNonLinear_param_7];
	// inline asm
	mov.u32 	%r12, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.x;
	// inline asm
	add.s32 	%r24, %r15, %r12;
	mad.lo.s32 	%r9, %r14, %r13, %r24;
	// inline asm
	mov.u32 	%r16, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.y;
	// inline asm
	add.s32 	%r25, %r19, %r16;
	mad.lo.s32 	%r10, %r18, %r17, %r25;
	// inline asm
	mov.u32 	%r20, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.z;
	// inline asm
	add.s32 	%r26, %r23, %r20;
	mad.lo.s32 	%r11, %r22, %r21, %r26;
	setp.lt.s32 	%p1, %r9, %r5;
	setp.lt.s32 	%p2, %r10, %r6;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r11, %r7;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB16_2;

	ret;

BB16_2:
	ld.param.u32 	%r45, [InterpolateVolumeNearestNonLinear_param_7];
	ld.param.u32 	%r46, [InterpolateVolumeNearestNonLinear_param_8];
	mad.lo.s32 	%r27, %r45, %r46, %r11;
	ld.param.u32 	%r44, [InterpolateVolumeNearestNonLinear_param_6];
	mad.lo.s32 	%r28, %r27, %r44, %r10;
	ld.param.u32 	%r43, [InterpolateVolumeNearestNonLinear_param_5];
	mad.lo.s32 	%r29, %r28, %r43, %r9;
	mad.lo.s32 	%r30, %r11, %r44, %r10;
	mad.lo.s32 	%r31, %r30, %r43, %r9;
	shl.b32 	%r32, %r31, 2;
	ld.param.u32 	%r40, [InterpolateVolumeNearestNonLinear_param_2];
	add.s32 	%r33, %r40, %r32;
	ld.global.f32 	%f9, [%r33];
	cvt.rn.f32.s32 	%f10, %r9;
	add.f32 	%f11, %f10, %f9;
	add.f32 	%f5, %f11, 0f3F000000;
	ld.param.u32 	%r41, [InterpolateVolumeNearestNonLinear_param_3];
	add.s32 	%r34, %r41, %r32;
	ld.global.f32 	%f12, [%r34];
	cvt.rn.f32.s32 	%f13, %r10;
	add.f32 	%f14, %f13, %f12;
	add.f32 	%f6, %f14, 0f3F000000;
	ld.param.u32 	%r42, [InterpolateVolumeNearestNonLinear_param_4];
	add.s32 	%r35, %r42, %r32;
	ld.global.f32 	%f15, [%r35];
	cvt.rn.f32.s32 	%f16, %r11;
	add.f32 	%f17, %f16, %f15;
	add.f32 	%f7, %f17, 0f3F000000;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r36, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f1, %f2, %f3, %f4}, [InterpolateVolumeNearestNonLinear_param_1, volume_sampler_nearest, {%f5, %f6, %f7, %f8}];
	// inline asm
	shl.b32 	%r37, %r29, 2;
	ld.param.u32 	%r39, [InterpolateVolumeNearestNonLinear_param_0];
	add.s32 	%r38, %r39, %r37;
	st.global.f32 	[%r38], %f1;
	ret;
}

.entry InterpolateVolumeLinearLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeLinearLinear_param_0,
	.param .texref InterpolateVolumeLinearLinear_param_1,
	.param .u32 .ptr .const .align 4 InterpolateVolumeLinearLinear_param_2,
	.param .u32 InterpolateVolumeLinearLinear_param_3,
	.param .u32 InterpolateVolumeLinearLinear_param_4,
	.param .u32 InterpolateVolumeLinearLinear_param_5,
	.param .u32 InterpolateVolumeLinearLinear_param_6
)
{
	.reg .f32 	%f<49>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<37>;


	ld.param.u32 	%r3, [InterpolateVolumeLinearLinear_param_3];
	ld.param.u32 	%r4, [InterpolateVolumeLinearLinear_param_4];
	ld.param.u32 	%r5, [InterpolateVolumeLinearLinear_param_5];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r22, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r22;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r23, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r23;
	// inline asm
	mov.u32 	%r18, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.z;
	// inline asm
	add.s32 	%r24, %r21, %r18;
	mad.lo.s32 	%r9, %r20, %r19, %r24;
	setp.lt.s32 	%p1, %r7, %r3;
	setp.lt.s32 	%p2, %r8, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB17_2;

	ret;

BB17_2:
	ld.param.u32 	%r35, [InterpolateVolumeLinearLinear_param_5];
	ld.param.u32 	%r36, [InterpolateVolumeLinearLinear_param_6];
	mad.lo.s32 	%r25, %r35, %r36, %r9;
	ld.param.u32 	%r34, [InterpolateVolumeLinearLinear_param_4];
	mad.lo.s32 	%r26, %r25, %r34, %r8;
	ld.param.u32 	%r33, [InterpolateVolumeLinearLinear_param_3];
	mad.lo.s32 	%r27, %r26, %r33, %r7;
	cvt.rn.f32.s32 	%f9, %r33;
	add.f32 	%f10, %f9, 0fBF800000;
	mov.f32 	%f11, 0f3F000000;
	cvt.rn.f32.s32 	%f12, %r7;
	neg.f32 	%f13, %f10;
	fma.rn.f32 	%f14, %f13, %f11, %f12;
	cvt.rn.f32.s32 	%f15, %r34;
	add.f32 	%f16, %f15, 0fBF800000;
	cvt.rn.f32.s32 	%f17, %r8;
	neg.f32 	%f18, %f16;
	fma.rn.f32 	%f19, %f18, %f11, %f17;
	cvt.rn.f32.s32 	%f20, %r35;
	add.f32 	%f21, %f20, 0fBF800000;
	cvt.rn.f32.s32 	%f22, %r9;
	neg.f32 	%f23, %f21;
	fma.rn.f32 	%f24, %f23, %f11, %f22;
	ld.param.u32 	%r32, [InterpolateVolumeLinearLinear_param_2];
	ld.const.f32 	%f25, [%r32];
	add.f32 	%f26, %f12, %f25;
	ld.const.f32 	%f27, [%r32+12];
	fma.rn.f32 	%f28, %f27, %f14, %f26;
	ld.const.f32 	%f29, [%r32+16];
	fma.rn.f32 	%f30, %f29, %f19, %f28;
	ld.const.f32 	%f31, [%r32+20];
	fma.rn.f32 	%f32, %f31, %f24, %f30;
	add.f32 	%f5, %f32, 0f3F000000;
	ld.const.f32 	%f33, [%r32+4];
	add.f32 	%f34, %f17, %f33;
	ld.const.f32 	%f35, [%r32+24];
	fma.rn.f32 	%f36, %f35, %f14, %f34;
	ld.const.f32 	%f37, [%r32+28];
	fma.rn.f32 	%f38, %f37, %f19, %f36;
	ld.const.f32 	%f39, [%r32+32];
	fma.rn.f32 	%f40, %f39, %f24, %f38;
	add.f32 	%f6, %f40, 0f3F000000;
	ld.const.f32 	%f41, [%r32+8];
	add.f32 	%f42, %f22, %f41;
	ld.const.f32 	%f43, [%r32+36];
	fma.rn.f32 	%f44, %f43, %f14, %f42;
	ld.const.f32 	%f45, [%r32+40];
	fma.rn.f32 	%f46, %f45, %f19, %f44;
	ld.const.f32 	%f47, [%r32+44];
	fma.rn.f32 	%f48, %f47, %f24, %f46;
	add.f32 	%f7, %f48, 0f3F000000;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r28, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f1, %f2, %f3, %f4}, [InterpolateVolumeLinearLinear_param_1, volume_sampler_linear, {%f5, %f6, %f7, %f8}];
	// inline asm
	shl.b32 	%r29, %r27, 2;
	ld.param.u32 	%r31, [InterpolateVolumeLinearLinear_param_0];
	add.s32 	%r30, %r31, %r29;
	st.global.f32 	[%r30], %f1;
	ret;
}

.entry InterpolateVolumeLinearNonLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeLinearNonLinear_param_0,
	.param .texref InterpolateVolumeLinearNonLinear_param_1,
	.param .u32 .ptr .global .align 4 InterpolateVolumeLinearNonLinear_param_2,
	.param .u32 .ptr .global .align 4 InterpolateVolumeLinearNonLinear_param_3,
	.param .u32 .ptr .global .align 4 InterpolateVolumeLinearNonLinear_param_4,
	.param .u32 InterpolateVolumeLinearNonLinear_param_5,
	.param .u32 InterpolateVolumeLinearNonLinear_param_6,
	.param .u32 InterpolateVolumeLinearNonLinear_param_7,
	.param .u32 InterpolateVolumeLinearNonLinear_param_8
)
{
	.reg .f32 	%f<18>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<47>;


	ld.param.u32 	%r5, [InterpolateVolumeLinearNonLinear_param_5];
	ld.param.u32 	%r6, [InterpolateVolumeLinearNonLinear_param_6];
	ld.param.u32 	%r7, [InterpolateVolumeLinearNonLinear_param_7];
	// inline asm
	mov.u32 	%r12, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.x;
	// inline asm
	add.s32 	%r24, %r15, %r12;
	mad.lo.s32 	%r9, %r14, %r13, %r24;
	// inline asm
	mov.u32 	%r16, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.y;
	// inline asm
	add.s32 	%r25, %r19, %r16;
	mad.lo.s32 	%r10, %r18, %r17, %r25;
	// inline asm
	mov.u32 	%r20, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.z;
	// inline asm
	add.s32 	%r26, %r23, %r20;
	mad.lo.s32 	%r11, %r22, %r21, %r26;
	setp.lt.s32 	%p1, %r9, %r5;
	setp.lt.s32 	%p2, %r10, %r6;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r11, %r7;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB18_2;

	ret;

BB18_2:
	ld.param.u32 	%r45, [InterpolateVolumeLinearNonLinear_param_7];
	ld.param.u32 	%r46, [InterpolateVolumeLinearNonLinear_param_8];
	mad.lo.s32 	%r27, %r45, %r46, %r11;
	ld.param.u32 	%r44, [InterpolateVolumeLinearNonLinear_param_6];
	mad.lo.s32 	%r28, %r27, %r44, %r10;
	ld.param.u32 	%r43, [InterpolateVolumeLinearNonLinear_param_5];
	mad.lo.s32 	%r29, %r28, %r43, %r9;
	mad.lo.s32 	%r30, %r11, %r44, %r10;
	mad.lo.s32 	%r31, %r30, %r43, %r9;
	shl.b32 	%r32, %r31, 2;
	ld.param.u32 	%r40, [InterpolateVolumeLinearNonLinear_param_2];
	add.s32 	%r33, %r40, %r32;
	ld.global.f32 	%f9, [%r33];
	cvt.rn.f32.s32 	%f10, %r9;
	add.f32 	%f11, %f10, %f9;
	add.f32 	%f5, %f11, 0f3F000000;
	ld.param.u32 	%r41, [InterpolateVolumeLinearNonLinear_param_3];
	add.s32 	%r34, %r41, %r32;
	ld.global.f32 	%f12, [%r34];
	cvt.rn.f32.s32 	%f13, %r10;
	add.f32 	%f14, %f13, %f12;
	add.f32 	%f6, %f14, 0f3F000000;
	ld.param.u32 	%r42, [InterpolateVolumeLinearNonLinear_param_4];
	add.s32 	%r35, %r42, %r32;
	ld.global.f32 	%f15, [%r35];
	cvt.rn.f32.s32 	%f16, %r11;
	add.f32 	%f17, %f16, %f15;
	add.f32 	%f7, %f17, 0f3F000000;
	mov.f32 	%f8, 0f00000000;
	mov.u32 	%r36, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f1, %f2, %f3, %f4}, [InterpolateVolumeLinearNonLinear_param_1, volume_sampler_linear, {%f5, %f6, %f7, %f8}];
	// inline asm
	shl.b32 	%r37, %r29, 2;
	ld.param.u32 	%r39, [InterpolateVolumeLinearNonLinear_param_0];
	add.s32 	%r38, %r39, %r37;
	st.global.f32 	[%r38], %f1;
	ret;
}

.entry AddLinearAndNonLinearDisplacement(
	.param .u32 .ptr .global .align 4 AddLinearAndNonLinearDisplacement_param_0,
	.param .u32 .ptr .global .align 4 AddLinearAndNonLinearDisplacement_param_1,
	.param .u32 .ptr .global .align 4 AddLinearAndNonLinearDisplacement_param_2,
	.param .u32 .ptr .const .align 4 AddLinearAndNonLinearDisplacement_param_3,
	.param .u32 AddLinearAndNonLinearDisplacement_param_4,
	.param .u32 AddLinearAndNonLinearDisplacement_param_5,
	.param .u32 AddLinearAndNonLinearDisplacement_param_6
)
{
	.reg .f32 	%f<44>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<39>;


	ld.param.u32 	%r5, [AddLinearAndNonLinearDisplacement_param_4];
	ld.param.u32 	%r6, [AddLinearAndNonLinearDisplacement_param_5];
	ld.param.u32 	%r7, [AddLinearAndNonLinearDisplacement_param_6];
	// inline asm
	mov.u32 	%r11, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.x;
	// inline asm
	add.s32 	%r23, %r14, %r11;
	mad.lo.s32 	%r8, %r13, %r12, %r23;
	// inline asm
	mov.u32 	%r15, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.y;
	// inline asm
	add.s32 	%r24, %r18, %r15;
	mad.lo.s32 	%r9, %r17, %r16, %r24;
	// inline asm
	mov.u32 	%r19, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %tid.z;
	// inline asm
	add.s32 	%r25, %r22, %r19;
	mad.lo.s32 	%r10, %r21, %r20, %r25;
	setp.lt.s32 	%p1, %r8, %r5;
	setp.lt.s32 	%p2, %r9, %r6;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r10, %r7;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB19_2;

	ret;

BB19_2:
	ld.param.u32 	%r37, [AddLinearAndNonLinearDisplacement_param_5];
	mad.lo.s32 	%r26, %r10, %r37, %r9;
	ld.param.u32 	%r36, [AddLinearAndNonLinearDisplacement_param_4];
	mad.lo.s32 	%r27, %r26, %r36, %r8;
	cvt.rn.f32.s32 	%f1, %r36;
	add.f32 	%f2, %f1, 0fBF800000;
	mov.f32 	%f3, 0f3F000000;
	cvt.rn.f32.s32 	%f4, %r8;
	neg.f32 	%f5, %f2;
	fma.rn.f32 	%f6, %f5, %f3, %f4;
	cvt.rn.f32.s32 	%f7, %r37;
	add.f32 	%f8, %f7, 0fBF800000;
	cvt.rn.f32.s32 	%f9, %r9;
	neg.f32 	%f10, %f8;
	fma.rn.f32 	%f11, %f10, %f3, %f9;
	ld.param.u32 	%r38, [AddLinearAndNonLinearDisplacement_param_6];
	cvt.rn.f32.s32 	%f12, %r38;
	add.f32 	%f13, %f12, 0fBF800000;
	cvt.rn.f32.s32 	%f14, %r10;
	neg.f32 	%f15, %f13;
	fma.rn.f32 	%f16, %f15, %f3, %f14;
	ld.param.u32 	%r35, [AddLinearAndNonLinearDisplacement_param_3];
	ld.const.f32 	%f17, [%r35+12];
	ld.const.f32 	%f18, [%r35];
	fma.rn.f32 	%f19, %f17, %f6, %f18;
	ld.const.f32 	%f20, [%r35+16];
	fma.rn.f32 	%f21, %f20, %f11, %f19;
	ld.const.f32 	%f22, [%r35+20];
	fma.rn.f32 	%f23, %f22, %f16, %f21;
	ld.const.f32 	%f24, [%r35+24];
	ld.const.f32 	%f25, [%r35+4];
	fma.rn.f32 	%f26, %f24, %f6, %f25;
	ld.const.f32 	%f27, [%r35+28];
	fma.rn.f32 	%f28, %f27, %f11, %f26;
	ld.const.f32 	%f29, [%r35+32];
	fma.rn.f32 	%f30, %f29, %f16, %f28;
	ld.const.f32 	%f31, [%r35+36];
	ld.const.f32 	%f32, [%r35+8];
	fma.rn.f32 	%f33, %f31, %f6, %f32;
	ld.const.f32 	%f34, [%r35+40];
	fma.rn.f32 	%f35, %f34, %f11, %f33;
	ld.const.f32 	%f36, [%r35+44];
	fma.rn.f32 	%f37, %f36, %f16, %f35;
	shl.b32 	%r28, %r27, 2;
	ld.param.u32 	%r32, [AddLinearAndNonLinearDisplacement_param_0];
	add.s32 	%r29, %r32, %r28;
	ld.global.f32 	%f38, [%r29];
	add.f32 	%f39, %f38, %f23;
	st.global.f32 	[%r29], %f39;
	ld.param.u32 	%r33, [AddLinearAndNonLinearDisplacement_param_1];
	add.s32 	%r30, %r33, %r28;
	ld.global.f32 	%f40, [%r30];
	add.f32 	%f41, %f40, %f30;
	st.global.f32 	[%r30], %f41;
	ld.param.u32 	%r34, [AddLinearAndNonLinearDisplacement_param_2];
	add.s32 	%r31, %r34, %r28;
	ld.global.f32 	%f42, [%r31];
	add.f32 	%f43, %f42, %f37;
	st.global.f32 	[%r31], %f43;
	ret;
}

.entry InterpolateVolumeCubicLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeCubicLinear_param_0,
	.param .texref InterpolateVolumeCubicLinear_param_1,
	.param .u32 .ptr .const .align 4 InterpolateVolumeCubicLinear_param_2,
	.param .u32 InterpolateVolumeCubicLinear_param_3,
	.param .u32 InterpolateVolumeCubicLinear_param_4,
	.param .u32 InterpolateVolumeCubicLinear_param_5,
	.param .u32 InterpolateVolumeCubicLinear_param_6
)
{
	.reg .f32 	%f<242>;
	.reg .pred 	%p<20>;
	.reg .s32 	%r<48>;


	ld.param.u32 	%r3, [InterpolateVolumeCubicLinear_param_3];
	ld.param.u32 	%r4, [InterpolateVolumeCubicLinear_param_4];
	ld.param.u32 	%r5, [InterpolateVolumeCubicLinear_param_5];
	// inline asm
	mov.u32 	%r15, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.x;
	// inline asm
	add.s32 	%r27, %r18, %r15;
	mad.lo.s32 	%r7, %r17, %r16, %r27;
	// inline asm
	mov.u32 	%r19, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r22, %tid.y;
	// inline asm
	add.s32 	%r28, %r22, %r19;
	mad.lo.s32 	%r8, %r21, %r20, %r28;
	// inline asm
	mov.u32 	%r23, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r24, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r25, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r26, %tid.z;
	// inline asm
	add.s32 	%r29, %r26, %r23;
	mad.lo.s32 	%r9, %r25, %r24, %r29;
	setp.lt.s32 	%p1, %r7, %r3;
	setp.lt.s32 	%p2, %r8, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB20_2;

	ret;

BB20_2:
	ld.param.u32 	%r44, [InterpolateVolumeCubicLinear_param_5];
	ld.param.u32 	%r45, [InterpolateVolumeCubicLinear_param_6];
	mad.lo.s32 	%r31, %r44, %r45, %r9;
	ld.param.u32 	%r43, [InterpolateVolumeCubicLinear_param_4];
	mad.lo.s32 	%r32, %r31, %r43, %r8;
	ld.param.u32 	%r42, [InterpolateVolumeCubicLinear_param_3];
	mad.lo.s32 	%r10, %r32, %r42, %r7;
	cvt.rn.f32.s32 	%f64, %r42;
	add.f32 	%f65, %f64, 0fBF800000;
	mov.f32 	%f233, 0fBF800000;
	mov.f32 	%f66, 0f3F000000;
	cvt.rn.f32.s32 	%f67, %r7;
	neg.f32 	%f68, %f65;
	fma.rn.f32 	%f69, %f68, %f66, %f67;
	cvt.rn.f32.s32 	%f70, %r43;
	add.f32 	%f71, %f70, 0fBF800000;
	cvt.rn.f32.s32 	%f72, %r8;
	neg.f32 	%f73, %f71;
	fma.rn.f32 	%f74, %f73, %f66, %f72;
	cvt.rn.f32.s32 	%f75, %r44;
	add.f32 	%f76, %f75, 0fBF800000;
	cvt.rn.f32.s32 	%f77, %r9;
	neg.f32 	%f78, %f76;
	fma.rn.f32 	%f79, %f78, %f66, %f77;
	ld.param.u32 	%r41, [InterpolateVolumeCubicLinear_param_2];
	ld.const.f32 	%f80, [%r41];
	add.f32 	%f81, %f67, %f80;
	ld.const.f32 	%f82, [%r41+12];
	fma.rn.f32 	%f83, %f82, %f69, %f81;
	ld.const.f32 	%f84, [%r41+16];
	fma.rn.f32 	%f85, %f84, %f74, %f83;
	ld.const.f32 	%f86, [%r41+20];
	fma.rn.f32 	%f87, %f86, %f79, %f85;
	add.f32 	%f88, %f87, 0f3F000000;
	mov.u32 	%r46, 0;
	ld.const.f32 	%f89, [%r41+4];
	add.f32 	%f90, %f72, %f89;
	ld.const.f32 	%f91, [%r41+24];
	fma.rn.f32 	%f92, %f91, %f69, %f90;
	ld.const.f32 	%f93, [%r41+28];
	fma.rn.f32 	%f94, %f93, %f74, %f92;
	ld.const.f32 	%f95, [%r41+32];
	fma.rn.f32 	%f96, %f95, %f79, %f94;
	add.f32 	%f97, %f96, 0f3F000000;
	ld.const.f32 	%f98, [%r41+8];
	add.f32 	%f99, %f77, %f98;
	ld.const.f32 	%f100, [%r41+36];
	fma.rn.f32 	%f101, %f100, %f69, %f99;
	ld.const.f32 	%f102, [%r41+40];
	fma.rn.f32 	%f103, %f102, %f74, %f101;
	ld.const.f32 	%f104, [%r41+44];
	fma.rn.f32 	%f105, %f104, %f79, %f103;
	add.f32 	%f106, %f105, 0f3F000000;
	mov.f32 	%f108, 0fBF000000;
	add.f32 	%f209, %f88, %f108;
	add.f32 	%f210, %f97, %f108;
	add.f32 	%f211, %f106, %f108;
	// inline asm
	cvt.rmi.f32.f32 	%f56, %f209;
	// inline asm
	// inline asm
	cvt.rmi.f32.f32 	%f58, %f210;
	// inline asm
	// inline asm
	cvt.rmi.f32.f32 	%f60, %f211;
	// inline asm
	sub.f32 	%f221, %f209, %f56;
	sub.f32 	%f222, %f210, %f58;
	sub.f32 	%f223, %f211, %f60;
	add.f32 	%f229, %f56, %f66;
	add.f32 	%f230, %f58, %f66;
	add.f32 	%f231, %f60, %f66;
	sub.f32 	%f5, %f233, %f221;
	add.f32 	%f6, %f229, 0fBF800000;
	add.f32 	%f112, %f233, 0f3F800000;
	sub.f32 	%f7, %f112, %f221;
	add.f32 	%f8, %f229, %f112;
	add.f32 	%f113, %f112, 0f3F800000;
	sub.f32 	%f9, %f113, %f221;
	add.f32 	%f10, %f229, %f113;
	add.f32 	%f114, %f113, 0f3F800000;
	sub.f32 	%f11, %f114, %f221;
	add.f32 	%f12, %f229, %f114;
	mov.f32 	%f236, %f115;

BB20_3:
	sub.f32 	%f117, %f233, %f223;
	// inline asm
	abs.f32 	%f116, %f117;
	// inline asm
	mov.f32 	%f118, 0f40000000;
	sub.f32 	%f16, %f118, %f116;
	setp.lt.f32 	%p6, %f116, 0f3F800000;
	@%p6 bra 	BB20_7;

	setp.lt.f32 	%p7, %f116, 0f40000000;
	@%p7 bra 	BB20_6;

	mov.f32 	%f234, 0f00000000;
	bra.uni 	BB20_8;

BB20_6:
	mul.f32 	%f120, %f16, %f16;
	mul.f32 	%f121, %f120, %f16;
	div.full.f32 	%f234, %f121, 0f40C00000;
	bra.uni 	BB20_8;

BB20_7:
	mul.f32 	%f122, %f116, 0fBF000000;
	mul.f32 	%f123, %f122, %f116;
	fma.rn.f32 	%f234, %f123, %f16, 0f3F2AAAAB;

BB20_8:
	add.f32 	%f20, %f231, %f233;
	mov.f32 	%f235, 0fBF800000;
	mov.u32 	%r47, 4;

BB20_9:
	sub.f32 	%f126, %f235, %f222;
	// inline asm
	abs.f32 	%f125, %f126;
	// inline asm
	sub.f32 	%f24, %f118, %f125;
	setp.lt.f32 	%p8, %f125, 0f3F800000;
	@%p8 bra 	BB20_13;

	setp.lt.f32 	%p9, %f125, 0f40000000;
	@%p9 bra 	BB20_12;

	mov.f32 	%f237, 0f00000000;
	bra.uni 	BB20_14;

BB20_12:
	mul.f32 	%f129, %f24, %f24;
	mul.f32 	%f130, %f129, %f24;
	div.full.f32 	%f237, %f130, 0f40C00000;
	bra.uni 	BB20_14;

BB20_13:
	mul.f32 	%f131, %f125, 0fBF000000;
	mul.f32 	%f132, %f131, %f125;
	fma.rn.f32 	%f237, %f132, %f24, 0f3F2AAAAB;

BB20_14:
	mul.f32 	%f28, %f237, %f234;
	add.f32 	%f29, %f230, %f235;
	// inline asm
	abs.f32 	%f133, %f5;
	// inline asm
	sub.f32 	%f31, %f118, %f133;
	setp.lt.f32 	%p10, %f133, 0f3F800000;
	@%p10 bra 	BB20_18;

	setp.lt.f32 	%p11, %f133, 0f40000000;
	@%p11 bra 	BB20_17;

	mov.f32 	%f238, 0f00000000;
	bra.uni 	BB20_19;

BB20_17:
	mul.f32 	%f137, %f31, %f31;
	mul.f32 	%f138, %f137, %f31;
	div.full.f32 	%f238, %f138, 0f40C00000;
	bra.uni 	BB20_19;

BB20_18:
	mul.f32 	%f139, %f133, 0fBF000000;
	mul.f32 	%f140, %f139, %f133;
	fma.rn.f32 	%f238, %f140, %f31, 0f3F2AAAAB;

BB20_19:
	mov.f32 	%f148, 0f00000000;
	mov.u32 	%r34, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f141, %f142, %f143, %f144}, [InterpolateVolumeCubicLinear_param_1, volume_sampler_linear, {%f6, %f29, %f20, %f148}];
	// inline asm
	mul.f32 	%f151, %f238, %f28;
	fma.rn.f32 	%f35, %f141, %f151, %f236;
	// inline asm
	abs.f32 	%f149, %f7;
	// inline asm
	sub.f32 	%f37, %f118, %f149;
	setp.lt.f32 	%p12, %f149, 0f3F800000;
	@%p12 bra 	BB20_23;

	setp.lt.f32 	%p13, %f149, 0f40000000;
	@%p13 bra 	BB20_22;

	mov.f32 	%f239, %f148;
	bra.uni 	BB20_24;

BB20_22:
	mul.f32 	%f154, %f37, %f37;
	mul.f32 	%f155, %f154, %f37;
	div.full.f32 	%f38, %f155, 0f40C00000;
	mov.f32 	%f239, %f38;
	bra.uni 	BB20_24;

BB20_23:
	mul.f32 	%f156, %f149, 0fBF000000;
	mul.f32 	%f157, %f156, %f149;
	fma.rn.f32 	%f39, %f157, %f37, 0f3F2AAAAB;
	mov.f32 	%f239, %f39;

BB20_24:
	mov.f32 	%f40, %f239;
	// inline asm
	tex.3d.v4.f32.f32 {%f158, %f159, %f160, %f161}, [InterpolateVolumeCubicLinear_param_1, volume_sampler_linear, {%f8, %f29, %f20, %f148}];
	// inline asm
	mul.f32 	%f168, %f40, %f28;
	fma.rn.f32 	%f41, %f158, %f168, %f35;
	// inline asm
	abs.f32 	%f166, %f9;
	// inline asm
	sub.f32 	%f43, %f118, %f166;
	setp.lt.f32 	%p14, %f166, 0f3F800000;
	@%p14 bra 	BB20_28;

	setp.lt.f32 	%p15, %f166, 0f40000000;
	@%p15 bra 	BB20_27;

	mov.f32 	%f240, 0f00000000;
	bra.uni 	BB20_29;

BB20_27:
	mul.f32 	%f171, %f43, %f43;
	mul.f32 	%f172, %f171, %f43;
	div.full.f32 	%f240, %f172, 0f40C00000;
	bra.uni 	BB20_29;

BB20_28:
	mul.f32 	%f173, %f166, 0fBF000000;
	mul.f32 	%f174, %f173, %f166;
	fma.rn.f32 	%f240, %f174, %f43, 0f3F2AAAAB;

BB20_29:
	mov.f32 	%f182, 0f00000000;
	// inline asm
	tex.3d.v4.f32.f32 {%f175, %f176, %f177, %f178}, [InterpolateVolumeCubicLinear_param_1, volume_sampler_linear, {%f10, %f29, %f20, %f182}];
	// inline asm
	mul.f32 	%f185, %f240, %f28;
	fma.rn.f32 	%f47, %f175, %f185, %f41;
	// inline asm
	abs.f32 	%f183, %f11;
	// inline asm
	sub.f32 	%f49, %f118, %f183;
	setp.lt.f32 	%p16, %f183, 0f3F800000;
	@%p16 bra 	BB20_33;

	setp.lt.f32 	%p17, %f183, 0f40000000;
	@%p17 bra 	BB20_32;

	mov.f32 	%f241, %f182;
	bra.uni 	BB20_34;

BB20_32:
	mul.f32 	%f188, %f49, %f49;
	mul.f32 	%f189, %f188, %f49;
	div.full.f32 	%f50, %f189, 0f40C00000;
	mov.f32 	%f241, %f50;
	bra.uni 	BB20_34;

BB20_33:
	mul.f32 	%f190, %f183, 0fBF000000;
	mul.f32 	%f191, %f190, %f183;
	fma.rn.f32 	%f51, %f191, %f49, 0f3F2AAAAB;
	mov.f32 	%f241, %f51;

BB20_34:
	mov.f32 	%f52, %f241;
	// inline asm
	tex.3d.v4.f32.f32 {%f192, %f193, %f194, %f195}, [InterpolateVolumeCubicLinear_param_1, volume_sampler_linear, {%f12, %f29, %f20, %f182}];
	// inline asm
	mul.f32 	%f200, %f52, %f28;
	fma.rn.f32 	%f236, %f192, %f200, %f47;
	add.f32 	%f235, %f235, 0f3F800000;
	add.s32 	%r47, %r47, -1;
	setp.ne.s32 	%p18, %r47, 0;
	@%p18 bra 	BB20_9;

	add.f32 	%f233, %f233, 0f3F800000;
	add.s32 	%r46, %r46, 1;
	setp.ne.s32 	%p19, %r46, 4;
	@%p19 bra 	BB20_3;

	shl.b32 	%r38, %r10, 2;
	ld.param.u32 	%r40, [InterpolateVolumeCubicLinear_param_0];
	add.s32 	%r39, %r40, %r38;
	st.global.f32 	[%r39], %f236;
	ret;
}

.entry InterpolateVolumeCubicNonLinear(
	.param .u32 .ptr .global .align 4 InterpolateVolumeCubicNonLinear_param_0,
	.param .texref InterpolateVolumeCubicNonLinear_param_1,
	.param .u32 .ptr .global .align 4 InterpolateVolumeCubicNonLinear_param_2,
	.param .u32 InterpolateVolumeCubicNonLinear_param_3,
	.param .u32 InterpolateVolumeCubicNonLinear_param_4,
	.param .u32 InterpolateVolumeCubicNonLinear_param_5,
	.param .u32 InterpolateVolumeCubicNonLinear_param_6
)
{
	.reg .f32 	%f<192>;
	.reg .pred 	%p<20>;
	.reg .s32 	%r<46>;


	ld.param.u32 	%r2, [InterpolateVolumeCubicNonLinear_param_3];
	ld.param.u32 	%r3, [InterpolateVolumeCubicNonLinear_param_4];
	ld.param.u32 	%r4, [InterpolateVolumeCubicNonLinear_param_5];
	// inline asm
	mov.u32 	%r14, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.x;
	// inline asm
	add.s32 	%r26, %r17, %r14;
	mad.lo.s32 	%r6, %r16, %r15, %r26;
	// inline asm
	mov.u32 	%r18, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.y;
	// inline asm
	add.s32 	%r27, %r21, %r18;
	mad.lo.s32 	%r7, %r20, %r19, %r27;
	// inline asm
	mov.u32 	%r22, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r23, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r24, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r25, %tid.z;
	// inline asm
	add.s32 	%r28, %r25, %r22;
	mad.lo.s32 	%r8, %r24, %r23, %r28;
	setp.lt.s32 	%p1, %r6, %r2;
	setp.lt.s32 	%p2, %r7, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r8, %r4;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB21_2;

	ret;

BB21_2:
	ld.param.u32 	%r42, [InterpolateVolumeCubicNonLinear_param_5];
	ld.param.u32 	%r43, [InterpolateVolumeCubicNonLinear_param_6];
	mad.lo.s32 	%r30, %r42, %r43, %r8;
	ld.param.u32 	%r41, [InterpolateVolumeCubicNonLinear_param_4];
	mad.lo.s32 	%r31, %r30, %r41, %r7;
	ld.param.u32 	%r40, [InterpolateVolumeCubicNonLinear_param_3];
	mad.lo.s32 	%r9, %r31, %r40, %r6;
	// inline asm
	cvt.rmi.f32.f32 	%f56, %f68;
	// inline asm
	mov.u32 	%r44, 0;
	// inline asm
	cvt.rmi.f32.f32 	%f58, %f69;
	// inline asm
	// inline asm
	cvt.rmi.f32.f32 	%f60, %f70;
	// inline asm
	sub.f32 	%f171, %f65, %f56;
	sub.f32 	%f172, %f66, %f58;
	sub.f32 	%f173, %f67, %f60;
	mov.f32 	%f71, 0f3F000000;
	add.f32 	%f179, %f56, %f71;
	add.f32 	%f180, %f58, %f71;
	add.f32 	%f181, %f60, %f71;
	mov.f32 	%f183, 0fBF800000;
	sub.f32 	%f5, %f183, %f171;
	add.f32 	%f6, %f179, 0fBF800000;
	add.f32 	%f74, %f183, 0f3F800000;
	sub.f32 	%f7, %f74, %f171;
	add.f32 	%f8, %f179, %f74;
	add.f32 	%f75, %f74, 0f3F800000;
	sub.f32 	%f9, %f75, %f171;
	add.f32 	%f10, %f179, %f75;
	add.f32 	%f76, %f75, 0f3F800000;
	sub.f32 	%f11, %f76, %f171;
	add.f32 	%f12, %f179, %f76;
	mov.f32 	%f186, %f77;

BB21_3:
	sub.f32 	%f79, %f183, %f173;
	// inline asm
	abs.f32 	%f78, %f79;
	// inline asm
	mov.f32 	%f80, 0f40000000;
	sub.f32 	%f16, %f80, %f78;
	setp.lt.f32 	%p6, %f78, 0f3F800000;
	@%p6 bra 	BB21_7;

	setp.lt.f32 	%p7, %f78, 0f40000000;
	@%p7 bra 	BB21_6;

	mov.f32 	%f184, 0f00000000;
	bra.uni 	BB21_8;

BB21_6:
	mul.f32 	%f82, %f16, %f16;
	mul.f32 	%f83, %f82, %f16;
	div.full.f32 	%f184, %f83, 0f40C00000;
	bra.uni 	BB21_8;

BB21_7:
	mul.f32 	%f84, %f78, 0fBF000000;
	mul.f32 	%f85, %f84, %f78;
	fma.rn.f32 	%f184, %f85, %f16, 0f3F2AAAAB;

BB21_8:
	add.f32 	%f20, %f181, %f183;
	mov.f32 	%f185, 0fBF800000;
	mov.u32 	%r45, 4;

BB21_9:
	sub.f32 	%f88, %f185, %f172;
	// inline asm
	abs.f32 	%f87, %f88;
	// inline asm
	sub.f32 	%f24, %f80, %f87;
	setp.lt.f32 	%p8, %f87, 0f3F800000;
	@%p8 bra 	BB21_13;

	setp.lt.f32 	%p9, %f87, 0f40000000;
	@%p9 bra 	BB21_12;

	mov.f32 	%f187, 0f00000000;
	bra.uni 	BB21_14;

BB21_12:
	mul.f32 	%f91, %f24, %f24;
	mul.f32 	%f92, %f91, %f24;
	div.full.f32 	%f187, %f92, 0f40C00000;
	bra.uni 	BB21_14;

BB21_13:
	mul.f32 	%f93, %f87, 0fBF000000;
	mul.f32 	%f94, %f93, %f87;
	fma.rn.f32 	%f187, %f94, %f24, 0f3F2AAAAB;

BB21_14:
	mul.f32 	%f28, %f187, %f184;
	add.f32 	%f29, %f180, %f185;
	// inline asm
	abs.f32 	%f95, %f5;
	// inline asm
	sub.f32 	%f31, %f80, %f95;
	setp.lt.f32 	%p10, %f95, 0f3F800000;
	@%p10 bra 	BB21_18;

	setp.lt.f32 	%p11, %f95, 0f40000000;
	@%p11 bra 	BB21_17;

	mov.f32 	%f188, 0f00000000;
	bra.uni 	BB21_19;

BB21_17:
	mul.f32 	%f99, %f31, %f31;
	mul.f32 	%f100, %f99, %f31;
	div.full.f32 	%f188, %f100, 0f40C00000;
	bra.uni 	BB21_19;

BB21_18:
	mul.f32 	%f101, %f95, 0fBF000000;
	mul.f32 	%f102, %f101, %f95;
	fma.rn.f32 	%f188, %f102, %f31, 0f3F2AAAAB;

BB21_19:
	mov.f32 	%f110, 0f00000000;
	mov.u32 	%r33, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f103, %f104, %f105, %f106}, [InterpolateVolumeCubicNonLinear_param_1, volume_sampler_linear, {%f6, %f29, %f20, %f110}];
	// inline asm
	mul.f32 	%f113, %f188, %f28;
	fma.rn.f32 	%f35, %f103, %f113, %f186;
	// inline asm
	abs.f32 	%f111, %f7;
	// inline asm
	sub.f32 	%f37, %f80, %f111;
	setp.lt.f32 	%p12, %f111, 0f3F800000;
	@%p12 bra 	BB21_23;

	setp.lt.f32 	%p13, %f111, 0f40000000;
	@%p13 bra 	BB21_22;

	mov.f32 	%f189, %f110;
	bra.uni 	BB21_24;

BB21_22:
	mul.f32 	%f116, %f37, %f37;
	mul.f32 	%f117, %f116, %f37;
	div.full.f32 	%f38, %f117, 0f40C00000;
	mov.f32 	%f189, %f38;
	bra.uni 	BB21_24;

BB21_23:
	mul.f32 	%f118, %f111, 0fBF000000;
	mul.f32 	%f119, %f118, %f111;
	fma.rn.f32 	%f39, %f119, %f37, 0f3F2AAAAB;
	mov.f32 	%f189, %f39;

BB21_24:
	mov.f32 	%f40, %f189;
	// inline asm
	tex.3d.v4.f32.f32 {%f120, %f121, %f122, %f123}, [InterpolateVolumeCubicNonLinear_param_1, volume_sampler_linear, {%f8, %f29, %f20, %f110}];
	// inline asm
	mul.f32 	%f130, %f40, %f28;
	fma.rn.f32 	%f41, %f120, %f130, %f35;
	// inline asm
	abs.f32 	%f128, %f9;
	// inline asm
	sub.f32 	%f43, %f80, %f128;
	setp.lt.f32 	%p14, %f128, 0f3F800000;
	@%p14 bra 	BB21_28;

	setp.lt.f32 	%p15, %f128, 0f40000000;
	@%p15 bra 	BB21_27;

	mov.f32 	%f190, 0f00000000;
	bra.uni 	BB21_29;

BB21_27:
	mul.f32 	%f133, %f43, %f43;
	mul.f32 	%f134, %f133, %f43;
	div.full.f32 	%f190, %f134, 0f40C00000;
	bra.uni 	BB21_29;

BB21_28:
	mul.f32 	%f135, %f128, 0fBF000000;
	mul.f32 	%f136, %f135, %f128;
	fma.rn.f32 	%f190, %f136, %f43, 0f3F2AAAAB;

BB21_29:
	mov.f32 	%f144, 0f00000000;
	// inline asm
	tex.3d.v4.f32.f32 {%f137, %f138, %f139, %f140}, [InterpolateVolumeCubicNonLinear_param_1, volume_sampler_linear, {%f10, %f29, %f20, %f144}];
	// inline asm
	mul.f32 	%f147, %f190, %f28;
	fma.rn.f32 	%f47, %f137, %f147, %f41;
	// inline asm
	abs.f32 	%f145, %f11;
	// inline asm
	sub.f32 	%f49, %f80, %f145;
	setp.lt.f32 	%p16, %f145, 0f3F800000;
	@%p16 bra 	BB21_33;

	setp.lt.f32 	%p17, %f145, 0f40000000;
	@%p17 bra 	BB21_32;

	mov.f32 	%f191, %f144;
	bra.uni 	BB21_34;

BB21_32:
	mul.f32 	%f150, %f49, %f49;
	mul.f32 	%f151, %f150, %f49;
	div.full.f32 	%f50, %f151, 0f40C00000;
	mov.f32 	%f191, %f50;
	bra.uni 	BB21_34;

BB21_33:
	mul.f32 	%f152, %f145, 0fBF000000;
	mul.f32 	%f153, %f152, %f145;
	fma.rn.f32 	%f51, %f153, %f49, 0f3F2AAAAB;
	mov.f32 	%f191, %f51;

BB21_34:
	mov.f32 	%f52, %f191;
	// inline asm
	tex.3d.v4.f32.f32 {%f154, %f155, %f156, %f157}, [InterpolateVolumeCubicNonLinear_param_1, volume_sampler_linear, {%f12, %f29, %f20, %f144}];
	// inline asm
	mul.f32 	%f162, %f52, %f28;
	fma.rn.f32 	%f186, %f154, %f162, %f47;
	add.f32 	%f185, %f185, 0f3F800000;
	add.s32 	%r45, %r45, -1;
	setp.ne.s32 	%p18, %r45, 0;
	@%p18 bra 	BB21_9;

	add.f32 	%f183, %f183, 0f3F800000;
	add.s32 	%r44, %r44, 1;
	setp.ne.s32 	%p19, %r44, 4;
	@%p19 bra 	BB21_3;

	shl.b32 	%r37, %r9, 2;
	ld.param.u32 	%r39, [InterpolateVolumeCubicNonLinear_param_0];
	add.s32 	%r38, %r39, %r37;
	st.global.f32 	[%r38], %f186;
	ret;
}

.entry RescaleVolumeNearest(
	.param .u32 .ptr .global .align 4 RescaleVolumeNearest_param_0,
	.param .texref RescaleVolumeNearest_param_1,
	.param .f32 RescaleVolumeNearest_param_2,
	.param .f32 RescaleVolumeNearest_param_3,
	.param .f32 RescaleVolumeNearest_param_4,
	.param .u32 RescaleVolumeNearest_param_5,
	.param .u32 RescaleVolumeNearest_param_6,
	.param .u32 RescaleVolumeNearest_param_7
)
{
	.reg .f32 	%f<18>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<31>;


	ld.param.u32 	%r2, [RescaleVolumeNearest_param_5];
	ld.param.u32 	%r3, [RescaleVolumeNearest_param_6];
	ld.param.u32 	%r19, [RescaleVolumeNearest_param_7];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r20, %r10, %r7;
	mad.lo.s32 	%r4, %r9, %r8, %r20;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r21, %r14, %r11;
	mad.lo.s32 	%r5, %r13, %r12, %r21;
	// inline asm
	mov.u32 	%r15, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.z;
	// inline asm
	add.s32 	%r22, %r18, %r15;
	mad.lo.s32 	%r6, %r17, %r16, %r22;
	setp.lt.s32 	%p1, %r4, %r2;
	setp.lt.s32 	%p2, %r5, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB22_2;

	ret;

BB22_2:
	ld.param.u32 	%r30, [RescaleVolumeNearest_param_6];
	mad.lo.s32 	%r23, %r6, %r30, %r5;
	ld.param.u32 	%r29, [RescaleVolumeNearest_param_5];
	mad.lo.s32 	%r24, %r23, %r29, %r4;
	cvt.rn.f32.s32 	%f12, %r4;
	ld.param.f32 	%f15, [RescaleVolumeNearest_param_2];
	fma.rn.f32 	%f8, %f12, %f15, 0f3F000000;
	cvt.rn.f32.s32 	%f13, %r5;
	ld.param.f32 	%f16, [RescaleVolumeNearest_param_3];
	fma.rn.f32 	%f9, %f13, %f16, 0f3F000000;
	cvt.rn.f32.s32 	%f14, %r6;
	ld.param.f32 	%f17, [RescaleVolumeNearest_param_4];
	fma.rn.f32 	%f10, %f14, %f17, 0f3F000000;
	mov.f32 	%f11, 0f00000000;
	mov.u32 	%r25, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f4, %f5, %f6, %f7}, [RescaleVolumeNearest_param_1, volume_sampler_nearest, {%f8, %f9, %f10, %f11}];
	// inline asm
	shl.b32 	%r26, %r24, 2;
	ld.param.u32 	%r28, [RescaleVolumeNearest_param_0];
	add.s32 	%r27, %r28, %r26;
	st.global.f32 	[%r27], %f4;
	ret;
}

.entry RescaleVolumeLinear(
	.param .u32 .ptr .global .align 4 RescaleVolumeLinear_param_0,
	.param .texref RescaleVolumeLinear_param_1,
	.param .f32 RescaleVolumeLinear_param_2,
	.param .f32 RescaleVolumeLinear_param_3,
	.param .f32 RescaleVolumeLinear_param_4,
	.param .u32 RescaleVolumeLinear_param_5,
	.param .u32 RescaleVolumeLinear_param_6,
	.param .u32 RescaleVolumeLinear_param_7
)
{
	.reg .f32 	%f<18>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<31>;


	ld.param.u32 	%r2, [RescaleVolumeLinear_param_5];
	ld.param.u32 	%r3, [RescaleVolumeLinear_param_6];
	ld.param.u32 	%r19, [RescaleVolumeLinear_param_7];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r20, %r10, %r7;
	mad.lo.s32 	%r4, %r9, %r8, %r20;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r21, %r14, %r11;
	mad.lo.s32 	%r5, %r13, %r12, %r21;
	// inline asm
	mov.u32 	%r15, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.z;
	// inline asm
	add.s32 	%r22, %r18, %r15;
	mad.lo.s32 	%r6, %r17, %r16, %r22;
	setp.lt.s32 	%p1, %r4, %r2;
	setp.lt.s32 	%p2, %r5, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB23_2;

	ret;

BB23_2:
	ld.param.u32 	%r30, [RescaleVolumeLinear_param_6];
	mad.lo.s32 	%r23, %r6, %r30, %r5;
	ld.param.u32 	%r29, [RescaleVolumeLinear_param_5];
	mad.lo.s32 	%r24, %r23, %r29, %r4;
	cvt.rn.f32.s32 	%f12, %r4;
	ld.param.f32 	%f15, [RescaleVolumeLinear_param_2];
	fma.rn.f32 	%f8, %f12, %f15, 0f3F000000;
	cvt.rn.f32.s32 	%f13, %r5;
	ld.param.f32 	%f16, [RescaleVolumeLinear_param_3];
	fma.rn.f32 	%f9, %f13, %f16, 0f3F000000;
	cvt.rn.f32.s32 	%f14, %r6;
	ld.param.f32 	%f17, [RescaleVolumeLinear_param_4];
	fma.rn.f32 	%f10, %f14, %f17, 0f3F000000;
	mov.f32 	%f11, 0f00000000;
	mov.u32 	%r25, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f4, %f5, %f6, %f7}, [RescaleVolumeLinear_param_1, volume_sampler_linear, {%f8, %f9, %f10, %f11}];
	// inline asm
	shl.b32 	%r26, %r24, 2;
	ld.param.u32 	%r28, [RescaleVolumeLinear_param_0];
	add.s32 	%r27, %r28, %r26;
	st.global.f32 	[%r27], %f4;
	ret;
}

.entry RescaleVolumeCubic(
	.param .u32 .ptr .global .align 4 RescaleVolumeCubic_param_0,
	.param .texref RescaleVolumeCubic_param_1,
	.param .f32 RescaleVolumeCubic_param_2,
	.param .f32 RescaleVolumeCubic_param_3,
	.param .f32 RescaleVolumeCubic_param_4,
	.param .u32 RescaleVolumeCubic_param_5,
	.param .u32 RescaleVolumeCubic_param_6,
	.param .u32 RescaleVolumeCubic_param_7
)
{
	.reg .f32 	%f<212>;
	.reg .pred 	%p<20>;
	.reg .s32 	%r<42>;


	ld.param.u32 	%r2, [RescaleVolumeCubic_param_5];
	ld.param.u32 	%r3, [RescaleVolumeCubic_param_6];
	ld.param.u32 	%r24, [RescaleVolumeCubic_param_7];
	// inline asm
	mov.u32 	%r12, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.x;
	// inline asm
	add.s32 	%r25, %r15, %r12;
	mad.lo.s32 	%r4, %r14, %r13, %r25;
	// inline asm
	mov.u32 	%r16, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.y;
	// inline asm
	add.s32 	%r26, %r19, %r16;
	mad.lo.s32 	%r5, %r18, %r17, %r26;
	// inline asm
	mov.u32 	%r20, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.z;
	// inline asm
	add.s32 	%r27, %r23, %r20;
	mad.lo.s32 	%r6, %r22, %r21, %r27;
	setp.lt.s32 	%p1, %r4, %r2;
	setp.lt.s32 	%p2, %r5, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r6, %r24;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB24_2;

	ret;

BB24_2:
	ld.param.u32 	%r39, [RescaleVolumeCubic_param_6];
	mad.lo.s32 	%r29, %r6, %r39, %r5;
	ld.param.u32 	%r38, [RescaleVolumeCubic_param_5];
	mad.lo.s32 	%r7, %r29, %r38, %r4;
	cvt.rn.f32.s32 	%f67, %r4;
	ld.param.f32 	%f200, [RescaleVolumeCubic_param_2];
	fma.rn.f32 	%f68, %f67, %f200, 0f3F000000;
	mov.f32 	%f69, 0f3F000000;
	mov.u32 	%r40, 0;
	cvt.rn.f32.s32 	%f70, %r5;
	ld.param.f32 	%f201, [RescaleVolumeCubic_param_3];
	fma.rn.f32 	%f71, %f70, %f201, 0f3F000000;
	cvt.rn.f32.s32 	%f72, %r6;
	ld.param.f32 	%f202, [RescaleVolumeCubic_param_4];
	fma.rn.f32 	%f73, %f72, %f202, 0f3F000000;
	mov.f32 	%f75, 0fBF000000;
	add.f32 	%f176, %f68, %f75;
	add.f32 	%f177, %f71, %f75;
	add.f32 	%f178, %f73, %f75;
	// inline asm
	cvt.rmi.f32.f32 	%f59, %f176;
	// inline asm
	// inline asm
	cvt.rmi.f32.f32 	%f61, %f177;
	// inline asm
	// inline asm
	cvt.rmi.f32.f32 	%f63, %f178;
	// inline asm
	sub.f32 	%f188, %f176, %f59;
	sub.f32 	%f189, %f177, %f61;
	sub.f32 	%f190, %f178, %f63;
	add.f32 	%f196, %f59, %f69;
	add.f32 	%f197, %f61, %f69;
	add.f32 	%f198, %f63, %f69;
	mov.f32 	%f203, 0fBF800000;
	sub.f32 	%f8, %f203, %f188;
	add.f32 	%f9, %f196, 0fBF800000;
	add.f32 	%f79, %f203, 0f3F800000;
	sub.f32 	%f10, %f79, %f188;
	add.f32 	%f11, %f196, %f79;
	add.f32 	%f80, %f79, 0f3F800000;
	sub.f32 	%f12, %f80, %f188;
	add.f32 	%f13, %f196, %f80;
	add.f32 	%f81, %f80, 0f3F800000;
	sub.f32 	%f14, %f81, %f188;
	add.f32 	%f15, %f196, %f81;
	mov.f32 	%f206, %f82;

BB24_3:
	sub.f32 	%f84, %f203, %f190;
	// inline asm
	abs.f32 	%f83, %f84;
	// inline asm
	mov.f32 	%f85, 0f40000000;
	sub.f32 	%f19, %f85, %f83;
	setp.lt.f32 	%p6, %f83, 0f3F800000;
	@%p6 bra 	BB24_7;

	setp.lt.f32 	%p7, %f83, 0f40000000;
	@%p7 bra 	BB24_6;

	mov.f32 	%f204, 0f00000000;
	bra.uni 	BB24_8;

BB24_6:
	mul.f32 	%f87, %f19, %f19;
	mul.f32 	%f88, %f87, %f19;
	div.full.f32 	%f204, %f88, 0f40C00000;
	bra.uni 	BB24_8;

BB24_7:
	mul.f32 	%f89, %f83, 0fBF000000;
	mul.f32 	%f90, %f89, %f83;
	fma.rn.f32 	%f204, %f90, %f19, 0f3F2AAAAB;

BB24_8:
	add.f32 	%f23, %f198, %f203;
	mov.f32 	%f205, 0fBF800000;
	mov.u32 	%r41, 4;

BB24_9:
	sub.f32 	%f93, %f205, %f189;
	// inline asm
	abs.f32 	%f92, %f93;
	// inline asm
	sub.f32 	%f27, %f85, %f92;
	setp.lt.f32 	%p8, %f92, 0f3F800000;
	@%p8 bra 	BB24_13;

	setp.lt.f32 	%p9, %f92, 0f40000000;
	@%p9 bra 	BB24_12;

	mov.f32 	%f207, 0f00000000;
	bra.uni 	BB24_14;

BB24_12:
	mul.f32 	%f96, %f27, %f27;
	mul.f32 	%f97, %f96, %f27;
	div.full.f32 	%f207, %f97, 0f40C00000;
	bra.uni 	BB24_14;

BB24_13:
	mul.f32 	%f98, %f92, 0fBF000000;
	mul.f32 	%f99, %f98, %f92;
	fma.rn.f32 	%f207, %f99, %f27, 0f3F2AAAAB;

BB24_14:
	mul.f32 	%f31, %f207, %f204;
	add.f32 	%f32, %f197, %f205;
	// inline asm
	abs.f32 	%f100, %f8;
	// inline asm
	sub.f32 	%f34, %f85, %f100;
	setp.lt.f32 	%p10, %f100, 0f3F800000;
	@%p10 bra 	BB24_18;

	setp.lt.f32 	%p11, %f100, 0f40000000;
	@%p11 bra 	BB24_17;

	mov.f32 	%f208, 0f00000000;
	bra.uni 	BB24_19;

BB24_17:
	mul.f32 	%f104, %f34, %f34;
	mul.f32 	%f105, %f104, %f34;
	div.full.f32 	%f208, %f105, 0f40C00000;
	bra.uni 	BB24_19;

BB24_18:
	mul.f32 	%f106, %f100, 0fBF000000;
	mul.f32 	%f107, %f106, %f100;
	fma.rn.f32 	%f208, %f107, %f34, 0f3F2AAAAB;

BB24_19:
	mov.f32 	%f115, 0f00000000;
	mov.u32 	%r31, 0;
	// inline asm
	tex.3d.v4.f32.f32 {%f108, %f109, %f110, %f111}, [RescaleVolumeCubic_param_1, volume_sampler_linear, {%f9, %f32, %f23, %f115}];
	// inline asm
	mul.f32 	%f118, %f208, %f31;
	fma.rn.f32 	%f38, %f118, %f108, %f206;
	// inline asm
	abs.f32 	%f116, %f10;
	// inline asm
	sub.f32 	%f40, %f85, %f116;
	setp.lt.f32 	%p12, %f116, 0f3F800000;
	@%p12 bra 	BB24_23;

	setp.lt.f32 	%p13, %f116, 0f40000000;
	@%p13 bra 	BB24_22;

	mov.f32 	%f209, %f115;
	bra.uni 	BB24_24;

BB24_22:
	mul.f32 	%f121, %f40, %f40;
	mul.f32 	%f122, %f121, %f40;
	div.full.f32 	%f41, %f122, 0f40C00000;
	mov.f32 	%f209, %f41;
	bra.uni 	BB24_24;

BB24_23:
	mul.f32 	%f123, %f116, 0fBF000000;
	mul.f32 	%f124, %f123, %f116;
	fma.rn.f32 	%f42, %f124, %f40, 0f3F2AAAAB;
	mov.f32 	%f209, %f42;

BB24_24:
	mov.f32 	%f43, %f209;
	// inline asm
	tex.3d.v4.f32.f32 {%f125, %f126, %f127, %f128}, [RescaleVolumeCubic_param_1, volume_sampler_linear, {%f11, %f32, %f23, %f115}];
	// inline asm
	mul.f32 	%f135, %f43, %f31;
	fma.rn.f32 	%f44, %f135, %f125, %f38;
	// inline asm
	abs.f32 	%f133, %f12;
	// inline asm
	sub.f32 	%f46, %f85, %f133;
	setp.lt.f32 	%p14, %f133, 0f3F800000;
	@%p14 bra 	BB24_28;

	setp.lt.f32 	%p15, %f133, 0f40000000;
	@%p15 bra 	BB24_27;

	mov.f32 	%f210, 0f00000000;
	bra.uni 	BB24_29;

BB24_27:
	mul.f32 	%f138, %f46, %f46;
	mul.f32 	%f139, %f138, %f46;
	div.full.f32 	%f210, %f139, 0f40C00000;
	bra.uni 	BB24_29;

BB24_28:
	mul.f32 	%f140, %f133, 0fBF000000;
	mul.f32 	%f141, %f140, %f133;
	fma.rn.f32 	%f210, %f141, %f46, 0f3F2AAAAB;

BB24_29:
	mov.f32 	%f149, 0f00000000;
	// inline asm
	tex.3d.v4.f32.f32 {%f142, %f143, %f144, %f145}, [RescaleVolumeCubic_param_1, volume_sampler_linear, {%f13, %f32, %f23, %f149}];
	// inline asm
	mul.f32 	%f152, %f210, %f31;
	fma.rn.f32 	%f50, %f152, %f142, %f44;
	// inline asm
	abs.f32 	%f150, %f14;
	// inline asm
	sub.f32 	%f52, %f85, %f150;
	setp.lt.f32 	%p16, %f150, 0f3F800000;
	@%p16 bra 	BB24_33;

	setp.lt.f32 	%p17, %f150, 0f40000000;
	@%p17 bra 	BB24_32;

	mov.f32 	%f211, %f149;
	bra.uni 	BB24_34;

BB24_32:
	mul.f32 	%f155, %f52, %f52;
	mul.f32 	%f156, %f155, %f52;
	div.full.f32 	%f53, %f156, 0f40C00000;
	mov.f32 	%f211, %f53;
	bra.uni 	BB24_34;

BB24_33:
	mul.f32 	%f157, %f150, 0fBF000000;
	mul.f32 	%f158, %f157, %f150;
	fma.rn.f32 	%f54, %f158, %f52, 0f3F2AAAAB;
	mov.f32 	%f211, %f54;

BB24_34:
	mov.f32 	%f55, %f211;
	// inline asm
	tex.3d.v4.f32.f32 {%f159, %f160, %f161, %f162}, [RescaleVolumeCubic_param_1, volume_sampler_linear, {%f15, %f32, %f23, %f149}];
	// inline asm
	mul.f32 	%f167, %f55, %f31;
	fma.rn.f32 	%f206, %f167, %f159, %f50;
	add.f32 	%f205, %f205, 0f3F800000;
	add.s32 	%r41, %r41, -1;
	setp.ne.s32 	%p18, %r41, 0;
	@%p18 bra 	BB24_9;

	add.f32 	%f203, %f203, 0f3F800000;
	add.s32 	%r40, %r40, 1;
	setp.ne.s32 	%p19, %r40, 4;
	@%p19 bra 	BB24_3;

	shl.b32 	%r35, %r7, 2;
	ld.param.u32 	%r37, [RescaleVolumeCubic_param_0];
	add.s32 	%r36, %r37, %r35;
	st.global.f32 	[%r36], %f206;
	ret;
}

.entry CopyT1VolumeToMNI(
	.param .u32 .ptr .global .align 4 CopyT1VolumeToMNI_param_0,
	.param .u32 .ptr .global .align 4 CopyT1VolumeToMNI_param_1,
	.param .u32 CopyT1VolumeToMNI_param_2,
	.param .u32 CopyT1VolumeToMNI_param_3,
	.param .u32 CopyT1VolumeToMNI_param_4,
	.param .u32 CopyT1VolumeToMNI_param_5,
	.param .u32 CopyT1VolumeToMNI_param_6,
	.param .u32 CopyT1VolumeToMNI_param_7,
	.param .u32 CopyT1VolumeToMNI_param_8,
	.param .u32 CopyT1VolumeToMNI_param_9,
	.param .u32 CopyT1VolumeToMNI_param_10,
	.param .u32 CopyT1VolumeToMNI_param_11,
	.param .f32 CopyT1VolumeToMNI_param_12
)
{
	.reg .f32 	%f<25>;
	.reg .pred 	%p<16>;
	.reg .s32 	%r<100>;


	ld.param.u32 	%r9, [CopyT1VolumeToMNI_param_8];
	// inline asm
	mov.u32 	%r29, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r30, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r31, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r32, %tid.x;
	// inline asm
	add.s32 	%r41, %r32, %r29;
	mad.lo.s32 	%r13, %r31, %r30, %r41;
	// inline asm
	mov.u32 	%r33, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r34, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r35, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r36, %tid.y;
	// inline asm
	add.s32 	%r42, %r36, %r33;
	mad.lo.s32 	%r14, %r35, %r34, %r42;
	// inline asm
	mov.u32 	%r37, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r38, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r39, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r40, %tid.z;
	// inline asm
	add.s32 	%r43, %r40, %r37;
	mad.lo.s32 	%r15, %r39, %r38, %r43;
	setp.gt.s32 	%p1, %r9, 0;
	@%p1 bra 	BB25_2;

	ld.param.u32 	%r83, [CopyT1VolumeToMNI_param_8];
	// inline asm
	abs.s32 	%r44, %r83;
	// inline asm
	cvt.rn.f32.u32 	%f5, %r44;
	div.full.f32 	%f4, %f5, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f3, 0.5, -0.5, %f4; 
	add.f32 	%f3, %f3, %f4; 
	cvt.rzi.f32.f32 	%f3, %f3; 
	abs.f32 	tmp1, %f4; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f3, %f4, %f3, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f4; 
	selp.f32 	%f3, tmp2, %f3, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r46, %f3;
	add.s32 	%r94, %r46, %r13;
	mov.u32 	%r93, %r13;
	bra.uni 	BB25_3;

BB25_2:
	ld.param.u32 	%r84, [CopyT1VolumeToMNI_param_8];
	cvt.rn.f32.s32 	%f8, %r84;
	div.full.f32 	%f7, %f8, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f6, 0.5, -0.5, %f7; 
	add.f32 	%f6, %f6, %f7; 
	cvt.rzi.f32.f32 	%f6, %f6; 
	abs.f32 	tmp1, %f7; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f6, %f7, %f6, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f7; 
	selp.f32 	%f6, tmp2, %f6, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r47, %f6;
	add.s32 	%r17, %r47, %r13;
	mov.u32 	%r94, %r13;
	mov.u32 	%r93, %r17;

BB25_3:
	ld.param.u32 	%r87, [CopyT1VolumeToMNI_param_9];
	setp.gt.s32 	%p2, %r87, 0;
	@%p2 bra 	BB25_5;

	ld.param.u32 	%r85, [CopyT1VolumeToMNI_param_9];
	// inline asm
	abs.s32 	%r48, %r85;
	// inline asm
	cvt.rn.f32.u32 	%f11, %r48;
	div.full.f32 	%f10, %f11, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f9, 0.5, -0.5, %f10; 
	add.f32 	%f9, %f9, %f10; 
	cvt.rzi.f32.f32 	%f9, %f9; 
	abs.f32 	tmp1, %f10; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f9, %f10, %f9, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f10; 
	selp.f32 	%f9, tmp2, %f9, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r50, %f9;
	add.s32 	%r97, %r50, %r14;
	mov.u32 	%r96, %r14;
	bra.uni 	BB25_6;

BB25_5:
	ld.param.u32 	%r86, [CopyT1VolumeToMNI_param_9];
	cvt.rn.f32.s32 	%f14, %r86;
	div.full.f32 	%f13, %f14, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f12, 0.5, -0.5, %f13; 
	add.f32 	%f12, %f12, %f13; 
	cvt.rzi.f32.f32 	%f12, %f12; 
	abs.f32 	tmp1, %f13; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f12, %f13, %f12, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f13; 
	selp.f32 	%f12, tmp2, %f12, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r51, %f12;
	add.s32 	%r21, %r51, %r14;
	mov.u32 	%r97, %r14;
	mov.u32 	%r96, %r21;

BB25_6:
	ld.param.u32 	%r91, [CopyT1VolumeToMNI_param_11];
	cvt.rn.f32.s32 	%f15, %r91;
	ld.param.f32 	%f24, [CopyT1VolumeToMNI_param_12];
	div.full.f32 	%f2, %f15, %f24;
	ld.param.u32 	%r90, [CopyT1VolumeToMNI_param_10];
	setp.gt.s32 	%p3, %r90, 0;
	@%p3 bra 	BB25_8;

	ld.param.u32 	%r88, [CopyT1VolumeToMNI_param_10];
	// inline asm
	abs.s32 	%r52, %r88;
	// inline asm
	cvt.rn.f32.u32 	%f20, %r52;
	div.full.f32 	%f17, %f20, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f16, 0.5, -0.5, %f17; 
	add.f32 	%f16, %f16, %f17; 
	cvt.rzi.f32.f32 	%f16, %f16; 
	abs.f32 	tmp1, %f17; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f16, %f17, %f16, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f17; 
	selp.f32 	%f16, tmp2, %f16, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r54, %f16;
	add.s32 	%r24, %r54, %r15;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f18, 0.5, -0.5, %f2; 
	add.f32 	%f18, %f18, %f2; 
	cvt.rzi.f32.f32 	%f18, %f18; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f18, %f2, %f18, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f18, tmp2, %f18, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r55, %f18;
	add.s32 	%r99, %r55, %r15;
	mov.u32 	%r98, %r24;
	bra.uni 	BB25_9;

BB25_8:
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f21, 0.5, -0.5, %f2; 
	add.f32 	%f21, %f21, %f2; 
	cvt.rzi.f32.f32 	%f21, %f21; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f21, %f2, %f21, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f21, tmp2, %f21, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r56, %f21;
	ld.param.u32 	%r89, [CopyT1VolumeToMNI_param_10];
	add.s32 	%r57, %r15, %r89;
	add.s32 	%r99, %r57, %r56;
	mov.u32 	%r98, %r15;

BB25_9:
	ld.param.u32 	%r81, [CopyT1VolumeToMNI_param_6];
	setp.lt.s32 	%p4, %r96, %r81;
	ld.param.u32 	%r79, [CopyT1VolumeToMNI_param_5];
	setp.lt.s32 	%p5, %r93, %r79;
	and.pred  	%p6, %p5, %p4;
	ld.param.u32 	%r82, [CopyT1VolumeToMNI_param_7];
	setp.lt.s32 	%p7, %r99, %r82;
	and.pred  	%p8, %p6, %p7;
	ld.param.u32 	%r74, [CopyT1VolumeToMNI_param_2];
	setp.lt.s32 	%p9, %r94, %r74;
	and.pred  	%p10, %p8, %p9;
	ld.param.u32 	%r76, [CopyT1VolumeToMNI_param_3];
	setp.lt.s32 	%p11, %r97, %r76;
	and.pred  	%p12, %p10, %p11;
	ld.param.u32 	%r77, [CopyT1VolumeToMNI_param_4];
	setp.lt.s32 	%p13, %r98, %r77;
	and.pred  	%p14, %p12, %p13;
	@!%p14 bra 	BB25_12;

	or.b32  	%r58, %r93, %r96;
	or.b32  	%r59, %r58, %r99;
	or.b32  	%r60, %r59, %r94;
	or.b32  	%r61, %r60, %r97;
	or.b32  	%r62, %r61, %r98;
	setp.lt.s32 	%p15, %r62, 0;
	@%p15 bra 	BB25_12;

	ld.param.u32 	%r75, [CopyT1VolumeToMNI_param_3];
	mad.lo.s32 	%r63, %r98, %r75, %r97;
	ld.param.u32 	%r73, [CopyT1VolumeToMNI_param_2];
	mad.lo.s32 	%r64, %r63, %r73, %r94;
	ld.param.u32 	%r80, [CopyT1VolumeToMNI_param_6];
	mad.lo.s32 	%r65, %r99, %r80, %r96;
	ld.param.u32 	%r78, [CopyT1VolumeToMNI_param_5];
	mad.lo.s32 	%r66, %r65, %r78, %r93;
	shl.b32 	%r67, %r66, 2;
	ld.param.u32 	%r72, [CopyT1VolumeToMNI_param_1];
	add.s32 	%r68, %r72, %r67;
	shl.b32 	%r69, %r64, 2;
	ld.param.u32 	%r71, [CopyT1VolumeToMNI_param_0];
	add.s32 	%r70, %r71, %r69;
	ld.global.f32 	%f23, [%r68];
	st.global.f32 	[%r70], %f23;

BB25_12:
	ret;
}

.entry CopyEPIVolumeToT1(
	.param .u32 .ptr .global .align 4 CopyEPIVolumeToT1_param_0,
	.param .u32 .ptr .global .align 4 CopyEPIVolumeToT1_param_1,
	.param .u32 CopyEPIVolumeToT1_param_2,
	.param .u32 CopyEPIVolumeToT1_param_3,
	.param .u32 CopyEPIVolumeToT1_param_4,
	.param .u32 CopyEPIVolumeToT1_param_5,
	.param .u32 CopyEPIVolumeToT1_param_6,
	.param .u32 CopyEPIVolumeToT1_param_7,
	.param .u32 CopyEPIVolumeToT1_param_8,
	.param .u32 CopyEPIVolumeToT1_param_9,
	.param .u32 CopyEPIVolumeToT1_param_10,
	.param .u32 CopyEPIVolumeToT1_param_11,
	.param .f32 CopyEPIVolumeToT1_param_12
)
{
	.reg .f32 	%f<28>;
	.reg .pred 	%p<16>;
	.reg .s32 	%r<101>;


	ld.param.u32 	%r9, [CopyEPIVolumeToT1_param_8];
	// inline asm
	mov.u32 	%r29, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r30, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r31, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r32, %tid.x;
	// inline asm
	add.s32 	%r41, %r32, %r29;
	mad.lo.s32 	%r13, %r31, %r30, %r41;
	// inline asm
	mov.u32 	%r33, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r34, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r35, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r36, %tid.y;
	// inline asm
	add.s32 	%r42, %r36, %r33;
	mad.lo.s32 	%r14, %r35, %r34, %r42;
	// inline asm
	mov.u32 	%r37, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r38, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r39, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r40, %tid.z;
	// inline asm
	add.s32 	%r43, %r40, %r37;
	mad.lo.s32 	%r15, %r39, %r38, %r43;
	setp.gt.s32 	%p1, %r9, 0;
	@%p1 bra 	BB26_2;

	ld.param.u32 	%r84, [CopyEPIVolumeToT1_param_8];
	// inline asm
	abs.s32 	%r44, %r84;
	// inline asm
	cvt.rn.f32.u32 	%f5, %r44;
	div.full.f32 	%f4, %f5, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f3, 0.5, -0.5, %f4; 
	add.f32 	%f3, %f3, %f4; 
	cvt.rzi.f32.f32 	%f3, %f3; 
	abs.f32 	tmp1, %f4; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f3, %f4, %f3, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f4; 
	selp.f32 	%f3, tmp2, %f3, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r46, %f3;
	add.s32 	%r95, %r46, %r13;
	mov.u32 	%r94, %r13;
	bra.uni 	BB26_3;

BB26_2:
	ld.param.u32 	%r85, [CopyEPIVolumeToT1_param_8];
	cvt.rn.f32.s32 	%f8, %r85;
	div.full.f32 	%f7, %f8, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f6, 0.5, -0.5, %f7; 
	add.f32 	%f6, %f6, %f7; 
	cvt.rzi.f32.f32 	%f6, %f6; 
	abs.f32 	tmp1, %f7; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f6, %f7, %f6, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f7; 
	selp.f32 	%f6, tmp2, %f6, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r47, %f6;
	add.s32 	%r17, %r47, %r13;
	mov.u32 	%r95, %r13;
	mov.u32 	%r94, %r17;

BB26_3:
	ld.param.u32 	%r88, [CopyEPIVolumeToT1_param_9];
	setp.gt.s32 	%p2, %r88, 0;
	@%p2 bra 	BB26_5;

	ld.param.u32 	%r86, [CopyEPIVolumeToT1_param_9];
	// inline asm
	abs.s32 	%r48, %r86;
	// inline asm
	cvt.rn.f32.u32 	%f11, %r48;
	div.full.f32 	%f10, %f11, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f9, 0.5, -0.5, %f10; 
	add.f32 	%f9, %f9, %f10; 
	cvt.rzi.f32.f32 	%f9, %f9; 
	abs.f32 	tmp1, %f10; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f9, %f10, %f9, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f10; 
	selp.f32 	%f9, tmp2, %f9, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r50, %f9;
	add.s32 	%r98, %r50, %r14;
	mov.u32 	%r97, %r14;
	bra.uni 	BB26_6;

BB26_5:
	ld.param.u32 	%r87, [CopyEPIVolumeToT1_param_9];
	cvt.rn.f32.s32 	%f14, %r87;
	div.full.f32 	%f13, %f14, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f12, 0.5, -0.5, %f13; 
	add.f32 	%f12, %f12, %f13; 
	cvt.rzi.f32.f32 	%f12, %f12; 
	abs.f32 	tmp1, %f13; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f12, %f13, %f12, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f13; 
	selp.f32 	%f12, tmp2, %f12, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r51, %f12;
	add.s32 	%r21, %r51, %r14;
	mov.u32 	%r98, %r14;
	mov.u32 	%r97, %r21;

BB26_6:
	ld.param.u32 	%r92, [CopyEPIVolumeToT1_param_11];
	cvt.rn.f32.s32 	%f15, %r92;
	ld.param.f32 	%f27, [CopyEPIVolumeToT1_param_12];
	div.full.f32 	%f2, %f15, %f27;
	ld.param.u32 	%r91, [CopyEPIVolumeToT1_param_10];
	setp.gt.s32 	%p3, %r91, 0;
	@%p3 bra 	BB26_8;

	ld.param.u32 	%r89, [CopyEPIVolumeToT1_param_10];
	// inline asm
	abs.s32 	%r52, %r89;
	// inline asm
	cvt.rn.f32.u32 	%f20, %r52;
	div.full.f32 	%f17, %f20, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f16, 0.5, -0.5, %f17; 
	add.f32 	%f16, %f16, %f17; 
	cvt.rzi.f32.f32 	%f16, %f16; 
	abs.f32 	tmp1, %f17; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f16, %f17, %f16, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f17; 
	selp.f32 	%f16, tmp2, %f16, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r54, %f16;
	add.s32 	%r24, %r54, %r15;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f18, 0.5, -0.5, %f2; 
	add.f32 	%f18, %f18, %f2; 
	cvt.rzi.f32.f32 	%f18, %f18; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f18, %f2, %f18, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f18, tmp2, %f18, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r55, %f18;
	add.s32 	%r100, %r55, %r15;
	mov.u32 	%r99, %r24;
	bra.uni 	BB26_9;

BB26_8:
	ld.param.u32 	%r90, [CopyEPIVolumeToT1_param_10];
	cvt.rn.f32.s32 	%f25, %r90;
	div.full.f32 	%f22, %f25, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f21, 0.5, -0.5, %f22; 
	add.f32 	%f21, %f21, %f22; 
	cvt.rzi.f32.f32 	%f21, %f21; 
	abs.f32 	tmp1, %f22; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f21, %f22, %f21, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f22; 
	selp.f32 	%f21, tmp2, %f21, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r56, %f21;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f23, 0.5, -0.5, %f2; 
	add.f32 	%f23, %f23, %f2; 
	cvt.rzi.f32.f32 	%f23, %f23; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f23, %f2, %f23, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f23, tmp2, %f23, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r57, %f23;
	add.s32 	%r58, %r56, %r15;
	add.s32 	%r100, %r58, %r57;
	mov.u32 	%r99, %r15;

BB26_9:
	ld.param.u32 	%r82, [CopyEPIVolumeToT1_param_6];
	setp.lt.s32 	%p4, %r97, %r82;
	ld.param.u32 	%r80, [CopyEPIVolumeToT1_param_5];
	setp.lt.s32 	%p5, %r94, %r80;
	and.pred  	%p6, %p5, %p4;
	ld.param.u32 	%r83, [CopyEPIVolumeToT1_param_7];
	setp.lt.s32 	%p7, %r100, %r83;
	and.pred  	%p8, %p6, %p7;
	ld.param.u32 	%r75, [CopyEPIVolumeToT1_param_2];
	setp.lt.s32 	%p9, %r95, %r75;
	and.pred  	%p10, %p8, %p9;
	ld.param.u32 	%r77, [CopyEPIVolumeToT1_param_3];
	setp.lt.s32 	%p11, %r98, %r77;
	and.pred  	%p12, %p10, %p11;
	ld.param.u32 	%r78, [CopyEPIVolumeToT1_param_4];
	setp.lt.s32 	%p13, %r99, %r78;
	and.pred  	%p14, %p12, %p13;
	@!%p14 bra 	BB26_12;

	or.b32  	%r59, %r94, %r97;
	or.b32  	%r60, %r59, %r100;
	or.b32  	%r61, %r60, %r95;
	or.b32  	%r62, %r61, %r98;
	or.b32  	%r63, %r62, %r99;
	setp.lt.s32 	%p15, %r63, 0;
	@%p15 bra 	BB26_12;

	ld.param.u32 	%r76, [CopyEPIVolumeToT1_param_3];
	mad.lo.s32 	%r64, %r99, %r76, %r98;
	ld.param.u32 	%r74, [CopyEPIVolumeToT1_param_2];
	mad.lo.s32 	%r65, %r64, %r74, %r95;
	ld.param.u32 	%r81, [CopyEPIVolumeToT1_param_6];
	mad.lo.s32 	%r66, %r100, %r81, %r97;
	ld.param.u32 	%r79, [CopyEPIVolumeToT1_param_5];
	mad.lo.s32 	%r67, %r66, %r79, %r94;
	shl.b32 	%r68, %r67, 2;
	ld.param.u32 	%r73, [CopyEPIVolumeToT1_param_1];
	add.s32 	%r69, %r73, %r68;
	shl.b32 	%r70, %r65, 2;
	ld.param.u32 	%r72, [CopyEPIVolumeToT1_param_0];
	add.s32 	%r71, %r72, %r70;
	ld.global.f32 	%f26, [%r69];
	st.global.f32 	[%r71], %f26;

BB26_12:
	ret;
}

.entry CopyVolumeToNew(
	.param .u32 .ptr .global .align 4 CopyVolumeToNew_param_0,
	.param .u32 .ptr .global .align 4 CopyVolumeToNew_param_1,
	.param .u32 CopyVolumeToNew_param_2,
	.param .u32 CopyVolumeToNew_param_3,
	.param .u32 CopyVolumeToNew_param_4,
	.param .u32 CopyVolumeToNew_param_5,
	.param .u32 CopyVolumeToNew_param_6,
	.param .u32 CopyVolumeToNew_param_7,
	.param .u32 CopyVolumeToNew_param_8,
	.param .u32 CopyVolumeToNew_param_9,
	.param .u32 CopyVolumeToNew_param_10,
	.param .u32 CopyVolumeToNew_param_11,
	.param .f32 CopyVolumeToNew_param_12,
	.param .u32 CopyVolumeToNew_param_13
)
{
	.reg .f32 	%f<28>;
	.reg .pred 	%p<16>;
	.reg .s32 	%r<105>;


	ld.param.u32 	%r9, [CopyVolumeToNew_param_8];
	// inline asm
	mov.u32 	%r30, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r31, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r32, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r33, %tid.x;
	// inline asm
	add.s32 	%r42, %r33, %r30;
	mad.lo.s32 	%r14, %r32, %r31, %r42;
	// inline asm
	mov.u32 	%r34, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r35, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r36, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r37, %tid.y;
	// inline asm
	add.s32 	%r43, %r37, %r34;
	mad.lo.s32 	%r15, %r36, %r35, %r43;
	// inline asm
	mov.u32 	%r38, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r39, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r40, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r41, %tid.z;
	// inline asm
	add.s32 	%r44, %r41, %r38;
	mad.lo.s32 	%r16, %r40, %r39, %r44;
	setp.gt.s32 	%p1, %r9, 0;
	@%p1 bra 	BB27_2;

	ld.param.u32 	%r87, [CopyVolumeToNew_param_8];
	// inline asm
	abs.s32 	%r45, %r87;
	// inline asm
	cvt.rn.f32.u32 	%f5, %r45;
	div.full.f32 	%f4, %f5, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f3, 0.5, -0.5, %f4; 
	add.f32 	%f3, %f3, %f4; 
	cvt.rzi.f32.f32 	%f3, %f3; 
	abs.f32 	tmp1, %f4; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f3, %f4, %f3, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f4; 
	selp.f32 	%f3, tmp2, %f3, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r47, %f3;
	add.s32 	%r99, %r47, %r14;
	mov.u32 	%r98, %r14;
	bra.uni 	BB27_3;

BB27_2:
	ld.param.u32 	%r88, [CopyVolumeToNew_param_8];
	cvt.rn.f32.s32 	%f8, %r88;
	div.full.f32 	%f7, %f8, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f6, 0.5, -0.5, %f7; 
	add.f32 	%f6, %f6, %f7; 
	cvt.rzi.f32.f32 	%f6, %f6; 
	abs.f32 	tmp1, %f7; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f6, %f7, %f6, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f7; 
	selp.f32 	%f6, tmp2, %f6, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r48, %f6;
	add.s32 	%r18, %r48, %r14;
	mov.u32 	%r99, %r14;
	mov.u32 	%r98, %r18;

BB27_3:
	ld.param.u32 	%r91, [CopyVolumeToNew_param_9];
	setp.gt.s32 	%p2, %r91, 0;
	@%p2 bra 	BB27_5;

	ld.param.u32 	%r89, [CopyVolumeToNew_param_9];
	// inline asm
	abs.s32 	%r49, %r89;
	// inline asm
	cvt.rn.f32.u32 	%f11, %r49;
	div.full.f32 	%f10, %f11, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f9, 0.5, -0.5, %f10; 
	add.f32 	%f9, %f9, %f10; 
	cvt.rzi.f32.f32 	%f9, %f9; 
	abs.f32 	tmp1, %f10; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f9, %f10, %f9, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f10; 
	selp.f32 	%f9, tmp2, %f9, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r51, %f9;
	add.s32 	%r102, %r51, %r15;
	mov.u32 	%r101, %r15;
	bra.uni 	BB27_6;

BB27_5:
	ld.param.u32 	%r90, [CopyVolumeToNew_param_9];
	cvt.rn.f32.s32 	%f14, %r90;
	div.full.f32 	%f13, %f14, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f12, 0.5, -0.5, %f13; 
	add.f32 	%f12, %f12, %f13; 
	cvt.rzi.f32.f32 	%f12, %f12; 
	abs.f32 	tmp1, %f13; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f12, %f13, %f12, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f13; 
	selp.f32 	%f12, tmp2, %f12, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r52, %f12;
	add.s32 	%r22, %r52, %r15;
	mov.u32 	%r102, %r15;
	mov.u32 	%r101, %r22;

BB27_6:
	ld.param.u32 	%r95, [CopyVolumeToNew_param_11];
	cvt.rn.f32.s32 	%f15, %r95;
	ld.param.f32 	%f27, [CopyVolumeToNew_param_12];
	div.full.f32 	%f2, %f15, %f27;
	ld.param.u32 	%r94, [CopyVolumeToNew_param_10];
	setp.gt.s32 	%p3, %r94, 0;
	@%p3 bra 	BB27_8;

	ld.param.u32 	%r92, [CopyVolumeToNew_param_10];
	// inline asm
	abs.s32 	%r53, %r92;
	// inline asm
	cvt.rn.f32.u32 	%f20, %r53;
	div.full.f32 	%f17, %f20, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f16, 0.5, -0.5, %f17; 
	add.f32 	%f16, %f16, %f17; 
	cvt.rzi.f32.f32 	%f16, %f16; 
	abs.f32 	tmp1, %f17; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f16, %f17, %f16, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f17; 
	selp.f32 	%f16, tmp2, %f16, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r55, %f16;
	add.s32 	%r25, %r55, %r16;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f18, 0.5, -0.5, %f2; 
	add.f32 	%f18, %f18, %f2; 
	cvt.rzi.f32.f32 	%f18, %f18; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f18, %f2, %f18, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f18, tmp2, %f18, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r56, %f18;
	add.s32 	%r104, %r56, %r16;
	mov.u32 	%r103, %r25;
	bra.uni 	BB27_9;

BB27_8:
	ld.param.u32 	%r93, [CopyVolumeToNew_param_10];
	cvt.rn.f32.s32 	%f25, %r93;
	div.full.f32 	%f22, %f25, 0f40000000;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f21, 0.5, -0.5, %f22; 
	add.f32 	%f21, %f21, %f22; 
	cvt.rzi.f32.f32 	%f21, %f21; 
	abs.f32 	tmp1, %f22; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f21, %f22, %f21, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f22; 
	selp.f32 	%f21, tmp2, %f21, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r57, %f21;
	// inline asm
	{ 
	.reg .b32 	tmp1, tmp2; 
	.reg .pred 	pred1, pred2; 
	slct.f32.f32 	%f23, 0.5, -0.5, %f2; 
	add.f32 	%f23, %f23, %f2; 
	cvt.rzi.f32.f32 	%f23, %f23; 
	abs.f32 	tmp1, %f2; 
	setp.gt.f32 	pred1, tmp1, 8388608.0; 
	selp.f32 	%f23, %f2, %f23, pred1; 
	setp.lt.f32 	pred2, tmp1, 0.5; 
	cvt.rzi.f32.f32 	tmp2, %f2; 
	selp.f32 	%f23, tmp2, %f23, pred2;
	}
	// inline asm
	cvt.rzi.s32.f32 	%r58, %f23;
	add.s32 	%r59, %r57, %r16;
	add.s32 	%r104, %r59, %r58;
	mov.u32 	%r103, %r16;

BB27_9:
	ld.param.u32 	%r85, [CopyVolumeToNew_param_6];
	setp.lt.s32 	%p4, %r101, %r85;
	ld.param.u32 	%r83, [CopyVolumeToNew_param_5];
	setp.lt.s32 	%p5, %r98, %r83;
	and.pred  	%p6, %p5, %p4;
	ld.param.u32 	%r86, [CopyVolumeToNew_param_7];
	setp.lt.s32 	%p7, %r104, %r86;
	and.pred  	%p8, %p6, %p7;
	ld.param.u32 	%r77, [CopyVolumeToNew_param_2];
	setp.lt.s32 	%p9, %r99, %r77;
	and.pred  	%p10, %p8, %p9;
	ld.param.u32 	%r79, [CopyVolumeToNew_param_3];
	setp.lt.s32 	%p11, %r102, %r79;
	and.pred  	%p12, %p10, %p11;
	ld.param.u32 	%r81, [CopyVolumeToNew_param_4];
	setp.lt.s32 	%p13, %r103, %r81;
	and.pred  	%p14, %p12, %p13;
	@!%p14 bra 	BB27_12;

	or.b32  	%r60, %r98, %r101;
	or.b32  	%r61, %r60, %r104;
	or.b32  	%r62, %r61, %r99;
	or.b32  	%r63, %r62, %r102;
	or.b32  	%r64, %r63, %r103;
	setp.lt.s32 	%p15, %r64, 0;
	@%p15 bra 	BB27_12;

	ld.param.u32 	%r80, [CopyVolumeToNew_param_4];
	ld.param.u32 	%r96, [CopyVolumeToNew_param_13];
	mad.lo.s32 	%r65, %r80, %r96, %r103;
	ld.param.u32 	%r78, [CopyVolumeToNew_param_3];
	mad.lo.s32 	%r66, %r65, %r78, %r102;
	ld.param.u32 	%r76, [CopyVolumeToNew_param_2];
	mad.lo.s32 	%r67, %r66, %r76, %r99;
	ld.param.u32 	%r84, [CopyVolumeToNew_param_6];
	mad.lo.s32 	%r68, %r104, %r84, %r101;
	ld.param.u32 	%r82, [CopyVolumeToNew_param_5];
	mad.lo.s32 	%r69, %r68, %r82, %r98;
	shl.b32 	%r70, %r69, 2;
	ld.param.u32 	%r75, [CopyVolumeToNew_param_1];
	add.s32 	%r71, %r75, %r70;
	shl.b32 	%r72, %r67, 2;
	ld.param.u32 	%r74, [CopyVolumeToNew_param_0];
	add.s32 	%r73, %r74, %r72;
	ld.global.f32 	%f26, [%r71];
	st.global.f32 	[%r73], %f26;

BB27_12:
	ret;
}


