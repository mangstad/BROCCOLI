//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Mon Nov  9 01:49:33 2015 (1447051773)
// Driver 304.131
//

.version 3.0
.target sm_20, texmode_independent
.address_size 32


.entry IdentityMatrix(
	.param .u32 .ptr .global .align 4 IdentityMatrix_param_0,
	.param .u32 IdentityMatrix_param_1
)
{
	.reg .pred 	%p<5>;
	.reg .s32 	%r<22>;


	ld.param.u32 	%r2, [IdentityMatrix_param_1];
	// inline asm
	mov.u32 	%r6, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r7, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %tid.x;
	// inline asm
	add.s32 	%r14, %r9, %r6;
	mad.lo.s32 	%r3, %r8, %r7, %r14;
	// inline asm
	mov.u32 	%r10, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.y;
	// inline asm
	add.s32 	%r15, %r13, %r10;
	mad.lo.s32 	%r4, %r12, %r11, %r15;
	setp.lt.s32 	%p1, %r3, %r2;
	setp.lt.s32 	%p2, %r4, %r2;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_2;

	ret;

BB0_2:
	setp.eq.s32 	%p4, %r3, %r4;
	ld.param.u32 	%r21, [IdentityMatrix_param_1];
	mad.lo.s32 	%r16, %r4, %r21, %r3;
	shl.b32 	%r17, %r16, 2;
	ld.param.u32 	%r20, [IdentityMatrix_param_0];
	add.s32 	%r5, %r20, %r17;
	@%p4 bra 	BB0_4;

	mov.u32 	%r18, 0;
	st.global.u32 	[%r5], %r18;
	ret;

BB0_4:
	mov.u32 	%r19, 1065353216;
	st.global.u32 	[%r5], %r19;
	ret;
}

.entry IdentityMatrixDouble(
	.param .u32 .ptr .global .align 8 IdentityMatrixDouble_param_0,
	.param .u32 IdentityMatrixDouble_param_1
)
{
	.reg .pred 	%p<5>;
	.reg .s32 	%r<20>;
	.reg .s64 	%rl<3>;


	ld.param.u32 	%r2, [IdentityMatrixDouble_param_1];
	// inline asm
	mov.u32 	%r6, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r7, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %tid.x;
	// inline asm
	add.s32 	%r14, %r9, %r6;
	mad.lo.s32 	%r3, %r8, %r7, %r14;
	// inline asm
	mov.u32 	%r10, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.y;
	// inline asm
	add.s32 	%r15, %r13, %r10;
	mad.lo.s32 	%r4, %r12, %r11, %r15;
	setp.lt.s32 	%p1, %r3, %r2;
	setp.lt.s32 	%p2, %r4, %r2;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB1_2;

	ret;

BB1_2:
	setp.eq.s32 	%p4, %r3, %r4;
	ld.param.u32 	%r19, [IdentityMatrixDouble_param_1];
	mad.lo.s32 	%r16, %r4, %r19, %r3;
	shl.b32 	%r17, %r16, 3;
	ld.param.u32 	%r18, [IdentityMatrixDouble_param_0];
	add.s32 	%r5, %r18, %r17;
	@%p4 bra 	BB1_4;

	mov.u64 	%rl1, 0;
	st.global.u64 	[%r5], %rl1;
	ret;

BB1_4:
	mov.u64 	%rl2, 4607182418800017408;
	st.global.u64 	[%r5], %rl2;
	ret;
}

.entry LogitMatrix(
	.param .u32 .ptr .global .align 4 LogitMatrix_param_0,
	.param .u32 LogitMatrix_param_1
)
{
	.reg .f32 	%f<23>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<12>;


	ld.param.u32 	%r7, [LogitMatrix_param_1];
	// inline asm
	mov.u32 	%r3, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r4, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r5, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r6, %tid.x;
	// inline asm
	add.s32 	%r8, %r6, %r3;
	mad.lo.s32 	%r2, %r5, %r4, %r8;
	setp.lt.s32 	%p1, %r2, %r7;
	@%p1 bra 	BB2_2;

	ret;

BB2_2:
	shl.b32 	%r9, %r2, 2;
	ld.param.u32 	%r11, [LogitMatrix_param_0];
	add.s32 	%r10, %r11, %r9;
	ld.global.f32 	%f7, [%r10];
	neg.f32 	%f8, %f7;
	mov.f32 	%f9, 0f3FB8AA3B;
	mul.rn.f32 	%f2, %f8, %f9;
	// inline asm
	cvt.rzi.f32.f32 	%f1, %f2;
	// inline asm
	mov.f32 	%f10, 0f3F317200;
	mul.rn.f32 	%f11, %f1, %f10;
	sub.f32 	%f12, %f8, %f11;
	mov.f32 	%f13, 0f35BFBE8E;
	mul.rn.f32 	%f14, %f1, %f13;
	sub.f32 	%f15, %f12, %f14;
	mul.rn.f32 	%f4, %f15, %f9;
	// inline asm
	ex2.approx.f32 	%f3, %f4;
	// inline asm
	add.f32 	%f6, %f1, 0f00000000;
	// inline asm
	ex2.approx.f32 	%f5, %f6;
	// inline asm
	mul.rn.f32 	%f16, %f3, %f5;
	setp.lt.f32 	%p2, %f8, 0fC2D20000;
	selp.f32 	%f17, 0f00000000, %f16, %p2;
	setp.gt.f32 	%p3, %f8, 0f42D20000;
	selp.f32 	%f18, 0f7F800000, %f17, %p3;
	add.f32 	%f19, %f18, 0f3F800000;
	mov.f32 	%f20, 0fC0000000;
	div.full.f32 	%f21, %f20, %f19;
	add.f32 	%f22, %f21, 0f3F800000;
	st.global.f32 	[%r10], %f22;
	ret;
}

.entry LogitMatrixDouble(
	.param .u32 .ptr .global .align 8 LogitMatrixDouble_param_0,
	.param .u32 LogitMatrixDouble_param_1
)
{
	.reg .f64 	%fd<86>;
	.reg .pred 	%p<10>;
	.reg .s32 	%r<27>;


	ld.param.u32 	%r9, [LogitMatrixDouble_param_1];
	// inline asm
	mov.u32 	%r5, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r6, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r7, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r8, %tid.x;
	// inline asm
	add.s32 	%r10, %r8, %r5;
	mad.lo.s32 	%r2, %r7, %r6, %r10;
	setp.lt.s32 	%p1, %r2, %r9;
	@%p1 bra 	BB3_2;

	ret;

BB3_2:
	shl.b32 	%r12, %r2, 3;
	ld.param.u32 	%r26, [LogitMatrixDouble_param_0];
	add.s32 	%r3, %r26, %r12;
	ld.global.f64 	%fd1, [%r3];
	neg.f64 	%fd10, %fd1;
	// inline asm
	{ 
	.reg 	.b32 lo; 
	mov.b64 	{lo, %r11}, %fd10; 
	}
	// inline asm
	setp.lt.u32 	%p2, %r11, 1082535491;
	setp.lt.s32 	%p3, %r11, -1064875759;
	or.pred  	%p4, %p2, %p3;
	@%p4 bra 	BB3_4;

	setp.lt.s32 	%p5, %r11, 0;
	selp.f64 	 %fd11, 0d0000000000000000, 0d7FF0000000000000, %p5;
	sub.f64 	%fd12, %fd10, %fd1;
	setp.nan.f64 	%p6, %fd10, %fd10;
	selp.f64 	%fd85, %fd12, %fd11, %p6;
	bra.uni 	BB3_7;

BB3_4:
	mov.f64 	%fd15, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd14, %fd10, %fd15;
	// inline asm
	abs.f64 	%fd13, %fd14;
	// inline asm
	setp.gt.f64 	%p7, %fd13, 0d4330000000000000;
	mov.f64 	%fd84, %fd14;
	@%p7 bra 	BB3_6;

	add.f64 	%fd17, %fd13, 0d3FE0000000000000;
	// inline asm
	cvt.rmi.f64.f64 	%fd16, %fd17;
	// inline asm
	setp.lt.f64 	%p8, %fd13, 0d3FE0000000000000;
	selp.f64 	%fd20, 0d0000000000000000, %fd16, %p8;
	// inline asm
	{ 
	.reg 	.b32 lo; 
	mov.b64 	{lo, %r13}, %fd14; 
	}
	// inline asm
	// inline asm
	{ 
	.reg 	.b32 hi; 
	mov.b64 	{%r14, hi}, %fd20; 
	}
	// inline asm
	// inline asm
	{ 
	.reg 	.b32 lo; 
	mov.b64 	{lo, %r15}, %fd20; 
	}
	// inline asm
	and.b32  	%r18, %r13, -2147483648;
	and.b32  	%r19, %r15, 2147483647;
	or.b32  	%r17, %r19, %r18;
	// inline asm
	mov.b64 	%fd21, {%r14, %r17};
	// inline asm
	mov.f64 	%fd84, %fd21;

BB3_6:
	mov.f64 	%fd24, 0dBFE62E42FEFA39EF;
	// inline asm
	fma.rn.f64 	%fd22, %fd84, %fd24, %fd10;
	// inline asm
	mov.f64 	%fd28, 0dBC7ABC9E3B39803F;
	// inline asm
	fma.rn.f64 	%fd26, %fd84, %fd28, %fd22;
	// inline asm
	cvt.rzi.s32.f64 	%r22, %fd84;
	add.s32 	%r23, %r22, 55;
	setp.lt.s32 	%p9, %r22, -1020;
	selp.b32 	%r24, %r23, %r22, %p9;
	selp.f64 	 %fd79, 0d3C90000000000000, 0d4000000000000000, %p9;
	mov.f64 	%fd31, 0d3E21F07FCCF58BAD;
	mov.f64 	%fd33, 0d3E5AFD81DA6C3BAF;
	// inline asm
	fma.rn.f64 	%fd30, %fd31, %fd26, %fd33;
	// inline asm
	mov.f64 	%fd37, 0d3E927E55F60F80E6;
	// inline asm
	fma.rn.f64 	%fd34, %fd30, %fd26, %fd37;
	// inline asm
	mov.f64 	%fd41, 0d3EC71DDA8F02D666;
	// inline asm
	fma.rn.f64 	%fd38, %fd34, %fd26, %fd41;
	// inline asm
	mov.f64 	%fd45, 0d3EFA01A013B894E0;
	// inline asm
	fma.rn.f64 	%fd42, %fd38, %fd26, %fd45;
	// inline asm
	mov.f64 	%fd49, 0d3F2A01A01D3AF788;
	// inline asm
	fma.rn.f64 	%fd46, %fd42, %fd26, %fd49;
	// inline asm
	mov.f64 	%fd53, 0d3F56C16C16C3A1EC;
	// inline asm
	fma.rn.f64 	%fd50, %fd46, %fd26, %fd53;
	// inline asm
	mov.f64 	%fd57, 0d3F81111111109161;
	// inline asm
	fma.rn.f64 	%fd54, %fd50, %fd26, %fd57;
	// inline asm
	mov.f64 	%fd61, 0d3FA55555555554C1;
	// inline asm
	fma.rn.f64 	%fd58, %fd54, %fd26, %fd61;
	// inline asm
	mov.f64 	%fd65, 0d3FC555555555556F;
	// inline asm
	fma.rn.f64 	%fd62, %fd58, %fd26, %fd65;
	// inline asm
	mov.f64 	%fd69, 0d3FE0000000000000;
	// inline asm
	fma.rn.f64 	%fd66, %fd62, %fd26, %fd69;
	// inline asm
	mul.rn.f64 	%fd71, %fd66, %fd26;
	// inline asm
	fma.rn.f64 	%fd70, %fd71, %fd26, %fd26;
	// inline asm
	shl.b32 	%r25, %r24, 20;
	add.s32 	%r21, %r25, 1071644672;
	mov.u32 	%r20, 0;
	// inline asm
	mov.b64 	%fd74, {%r20, %r21};
	// inline asm
	// inline asm
	fma.rn.f64 	%fd75, %fd70, %fd74, %fd74;
	// inline asm
	mul.rn.f64 	%fd85, %fd75, %fd79;

BB3_7:
	add.f64 	%fd80, %fd85, 0d3FF0000000000000;
	mov.f64 	%fd81, 0dC000000000000000;
	div.rn.f64 	%fd82, %fd81, %fd80;
	add.f64 	%fd83, %fd82, 0d3FF0000000000000;
	st.global.f64 	[%r3], %fd83;
	ret;
}

.entry GetSubMatrix(
	.param .u32 .ptr .global .align 4 GetSubMatrix_param_0,
	.param .u32 .ptr .global .align 4 GetSubMatrix_param_1,
	.param .u32 GetSubMatrix_param_2,
	.param .u32 GetSubMatrix_param_3,
	.param .u32 GetSubMatrix_param_4,
	.param .u32 GetSubMatrix_param_5,
	.param .u32 GetSubMatrix_param_6,
	.param .u32 GetSubMatrix_param_7
)
{
	.reg .f32 	%f<2>;
	.reg .pred 	%p<7>;
	.reg .s32 	%r<39>;


	ld.param.u32 	%r18, [GetSubMatrix_param_3];
	ld.param.u32 	%r19, [GetSubMatrix_param_7];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r20, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r20;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r21, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r21;
	add.s32 	%r9, %r7, %r18;
	setp.ge.s32 	%p1, %r9, %r19;
	@%p1 bra 	BB4_2;

	ld.param.u32 	%r33, [GetSubMatrix_param_2];
	add.s32 	%r22, %r8, %r33;
	ld.param.u32 	%r38, [GetSubMatrix_param_6];
	setp.lt.s32 	%p2, %r22, %r38;
	ld.param.u32 	%r36, [GetSubMatrix_param_5];
	setp.lt.s32 	%p3, %r7, %r36;
	and.pred  	%p4, %p2, %p3;
	ld.param.u32 	%r35, [GetSubMatrix_param_4];
	setp.lt.s32 	%p5, %r8, %r35;
	and.pred  	%p6, %p4, %p5;
	@%p6 bra 	BB4_3;

BB4_2:
	ret;

BB4_3:
	ld.param.u32 	%r32, [GetSubMatrix_param_2];
	ld.param.u32 	%r37, [GetSubMatrix_param_6];
	mad.lo.s32 	%r23, %r9, %r37, %r32;
	add.s32 	%r24, %r23, %r8;
	shl.b32 	%r25, %r24, 2;
	ld.param.u32 	%r31, [GetSubMatrix_param_1];
	add.s32 	%r26, %r31, %r25;
	ld.param.u32 	%r34, [GetSubMatrix_param_4];
	mad.lo.s32 	%r27, %r7, %r34, %r8;
	shl.b32 	%r28, %r27, 2;
	ld.param.u32 	%r30, [GetSubMatrix_param_0];
	add.s32 	%r29, %r30, %r28;
	ld.global.f32 	%f1, [%r26];
	st.global.f32 	[%r29], %f1;
	ret;
}

.entry GetSubMatrixDouble(
	.param .u32 .ptr .global .align 8 GetSubMatrixDouble_param_0,
	.param .u32 .ptr .global .align 8 GetSubMatrixDouble_param_1,
	.param .u32 GetSubMatrixDouble_param_2,
	.param .u32 GetSubMatrixDouble_param_3,
	.param .u32 GetSubMatrixDouble_param_4,
	.param .u32 GetSubMatrixDouble_param_5,
	.param .u32 GetSubMatrixDouble_param_6,
	.param .u32 GetSubMatrixDouble_param_7
)
{
	.reg .f64 	%fd<2>;
	.reg .pred 	%p<7>;
	.reg .s32 	%r<39>;


	ld.param.u32 	%r18, [GetSubMatrixDouble_param_3];
	ld.param.u32 	%r19, [GetSubMatrixDouble_param_7];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r20, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r20;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r21, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r21;
	add.s32 	%r9, %r7, %r18;
	setp.ge.s32 	%p1, %r9, %r19;
	@%p1 bra 	BB5_2;

	ld.param.u32 	%r33, [GetSubMatrixDouble_param_2];
	add.s32 	%r22, %r8, %r33;
	ld.param.u32 	%r38, [GetSubMatrixDouble_param_6];
	setp.lt.s32 	%p2, %r22, %r38;
	ld.param.u32 	%r36, [GetSubMatrixDouble_param_5];
	setp.lt.s32 	%p3, %r7, %r36;
	and.pred  	%p4, %p2, %p3;
	ld.param.u32 	%r35, [GetSubMatrixDouble_param_4];
	setp.lt.s32 	%p5, %r8, %r35;
	and.pred  	%p6, %p4, %p5;
	@%p6 bra 	BB5_3;

BB5_2:
	ret;

BB5_3:
	ld.param.u32 	%r32, [GetSubMatrixDouble_param_2];
	ld.param.u32 	%r37, [GetSubMatrixDouble_param_6];
	mad.lo.s32 	%r23, %r9, %r37, %r32;
	add.s32 	%r24, %r23, %r8;
	shl.b32 	%r25, %r24, 3;
	ld.param.u32 	%r31, [GetSubMatrixDouble_param_1];
	add.s32 	%r26, %r31, %r25;
	ld.param.u32 	%r34, [GetSubMatrixDouble_param_4];
	mad.lo.s32 	%r27, %r7, %r34, %r8;
	shl.b32 	%r28, %r27, 3;
	ld.param.u32 	%r30, [GetSubMatrixDouble_param_0];
	add.s32 	%r29, %r30, %r28;
	ld.global.f64 	%fd1, [%r26];
	st.global.f64 	[%r29], %fd1;
	ret;
}

.entry PermuteMatrix(
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_0,
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_1,
	.param .u32 .ptr .global .align 4 PermuteMatrix_param_2,
	.param .u32 PermuteMatrix_param_3,
	.param .u32 PermuteMatrix_param_4
)
{
	.reg .f32 	%f<2>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<31>;


	ld.param.u32 	%r4, [PermuteMatrix_param_3];
	ld.param.u32 	%r15, [PermuteMatrix_param_4];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r16, %r10, %r7;
	mad.lo.s32 	%r5, %r9, %r8, %r16;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r17, %r14, %r11;
	mad.lo.s32 	%r6, %r13, %r12, %r17;
	setp.lt.s32 	%p1, %r5, %r15;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB6_2;

	ret;

BB6_2:
	shl.b32 	%r18, %r5, 2;
	ld.param.u32 	%r29, [PermuteMatrix_param_2];
	add.s32 	%r19, %r29, %r18;
	ld.global.u32 	%r20, [%r19];
	ld.param.u32 	%r30, [PermuteMatrix_param_3];
	mad.lo.s32 	%r21, %r20, %r30, %r6;
	shl.b32 	%r22, %r21, 2;
	ld.param.u32 	%r28, [PermuteMatrix_param_1];
	add.s32 	%r23, %r28, %r22;
	mad.lo.s32 	%r24, %r5, %r30, %r6;
	shl.b32 	%r25, %r24, 2;
	ld.param.u32 	%r27, [PermuteMatrix_param_0];
	add.s32 	%r26, %r27, %r25;
	ld.global.f32 	%f1, [%r23];
	st.global.f32 	[%r26], %f1;
	ret;
}

.entry PermuteMatrixDouble(
	.param .u32 .ptr .global .align 8 PermuteMatrixDouble_param_0,
	.param .u32 .ptr .global .align 8 PermuteMatrixDouble_param_1,
	.param .u32 .ptr .global .align 4 PermuteMatrixDouble_param_2,
	.param .u32 PermuteMatrixDouble_param_3,
	.param .u32 PermuteMatrixDouble_param_4
)
{
	.reg .f64 	%fd<2>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<31>;


	ld.param.u32 	%r4, [PermuteMatrixDouble_param_3];
	ld.param.u32 	%r15, [PermuteMatrixDouble_param_4];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r16, %r10, %r7;
	mad.lo.s32 	%r5, %r9, %r8, %r16;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r17, %r14, %r11;
	mad.lo.s32 	%r6, %r13, %r12, %r17;
	setp.lt.s32 	%p1, %r5, %r15;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB7_2;

	ret;

BB7_2:
	shl.b32 	%r18, %r5, 2;
	ld.param.u32 	%r29, [PermuteMatrixDouble_param_2];
	add.s32 	%r19, %r29, %r18;
	ld.global.u32 	%r20, [%r19];
	ld.param.u32 	%r30, [PermuteMatrixDouble_param_3];
	mad.lo.s32 	%r21, %r20, %r30, %r6;
	shl.b32 	%r22, %r21, 3;
	ld.param.u32 	%r28, [PermuteMatrixDouble_param_1];
	add.s32 	%r23, %r28, %r22;
	mad.lo.s32 	%r24, %r5, %r30, %r6;
	shl.b32 	%r25, %r24, 3;
	ld.param.u32 	%r27, [PermuteMatrixDouble_param_0];
	add.s32 	%r26, %r27, %r25;
	ld.global.f64 	%fd1, [%r23];
	st.global.f64 	[%r26], %fd1;
	ret;
}

.entry CalculateColumnSums(
	.param .u32 .ptr .global .align 4 CalculateColumnSums_param_0,
	.param .u32 .ptr .global .align 4 CalculateColumnSums_param_1,
	.param .u32 CalculateColumnSums_param_2,
	.param .u32 CalculateColumnSums_param_3,
	.param .u32 CalculateColumnSums_param_4
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<51>;


	ld.param.u32 	%r4, [CalculateColumnSums_param_3];
	ld.param.u32 	%r28, [CalculateColumnSums_param_4];
	// inline asm
	mov.u32 	%r20, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.x;
	// inline asm
	add.s32 	%r29, %r23, %r20;
	mad.lo.s32 	%r9, %r22, %r21, %r29;
	// inline asm
	mov.u32 	%r24, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r25, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r26, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r27, %tid.y;
	// inline asm
	add.s32 	%r30, %r27, %r24;
	mad.lo.s32 	%r14, %r26, %r25, %r30;
	setp.lt.s32 	%p1, %r9, %r4;
	setp.lt.s32 	%p2, %r14, %r28;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB8_2;

	ret;

BB8_2:
	ld.param.u32 	%r46, [CalculateColumnSums_param_2];
	setp.gt.s32 	%p4, %r46, 0;
	@%p4 bra 	BB8_4;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB8_6;

BB8_4:
	ld.param.u32 	%r48, [CalculateColumnSums_param_3];
	mad.lo.s32 	%r36, %r48, %r14, %r9;
	ld.param.u32 	%r45, [CalculateColumnSums_param_2];
	mul.lo.s32 	%r37, %r45, %r36;
	shl.b32 	%r38, %r37, 2;
	ld.param.u32 	%r43, [CalculateColumnSums_param_1];
	add.s32 	%r49, %r43, %r38;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r50, 0;

BB8_5:
	ld.global.f32 	%f6, [%r49];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r49, %r49, 4;
	add.s32 	%r50, %r50, 1;
	ld.param.u32 	%r44, [CalculateColumnSums_param_2];
	setp.lt.s32 	%p5, %r50, %r44;
	@%p5 bra 	BB8_5;

BB8_6:
	ld.param.u32 	%r47, [CalculateColumnSums_param_3];
	mad.lo.s32 	%r39, %r14, %r47, %r9;
	shl.b32 	%r40, %r39, 2;
	ld.param.u32 	%r42, [CalculateColumnSums_param_0];
	add.s32 	%r41, %r42, %r40;
	st.global.f32 	[%r41], %f7;
	ret;
}

.entry CalculateRowSums(
	.param .u32 .ptr .global .align 4 CalculateRowSums_param_0,
	.param .u32 .ptr .global .align 4 CalculateRowSums_param_1,
	.param .u32 CalculateRowSums_param_2,
	.param .u32 CalculateRowSums_param_3
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<34>;


	ld.param.u32 	%r18, [CalculateRowSums_param_3];
	// inline asm
	mov.u32 	%r14, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.x;
	// inline asm
	add.s32 	%r19, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r19;
	setp.lt.s32 	%p1, %r8, %r18;
	@%p1 bra 	BB9_2;

	ret;

BB9_2:
	ld.param.u32 	%r31, [CalculateRowSums_param_2];
	setp.gt.s32 	%p2, %r31, 0;
	@%p2 bra 	BB9_4;

	mov.f32 	%f7, 0f00000000;
	bra.uni 	BB9_6;

BB9_4:
	ld.param.u32 	%r30, [CalculateRowSums_param_2];
	mul.lo.s32 	%r23, %r30, %r8;
	shl.b32 	%r24, %r23, 2;
	ld.param.u32 	%r28, [CalculateRowSums_param_1];
	add.s32 	%r32, %r28, %r24;
	mov.f32 	%f7, 0f00000000;
	mov.u32 	%r33, 0;

BB9_5:
	ld.global.f32 	%f6, [%r32];
	add.f32 	%f7, %f7, %f6;
	add.s32 	%r32, %r32, 4;
	add.s32 	%r33, %r33, 1;
	ld.param.u32 	%r29, [CalculateRowSums_param_2];
	setp.lt.s32 	%p3, %r33, %r29;
	@%p3 bra 	BB9_5;

BB9_6:
	shl.b32 	%r25, %r8, 2;
	ld.param.u32 	%r27, [CalculateRowSums_param_0];
	add.s32 	%r26, %r27, %r25;
	st.global.f32 	[%r26], %f7;
	ret;
}

.entry CalculateColumnMaxs(
	.param .u32 .ptr .global .align 4 CalculateColumnMaxs_param_0,
	.param .u32 .ptr .global .align 4 CalculateColumnMaxs_param_1,
	.param .u32 CalculateColumnMaxs_param_2,
	.param .u32 CalculateColumnMaxs_param_3,
	.param .u32 CalculateColumnMaxs_param_4
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<7>;
	.reg .s32 	%r<51>;


	ld.param.u32 	%r4, [CalculateColumnMaxs_param_3];
	ld.param.u32 	%r28, [CalculateColumnMaxs_param_4];
	// inline asm
	mov.u32 	%r20, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r21, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r22, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r23, %tid.x;
	// inline asm
	add.s32 	%r29, %r23, %r20;
	mad.lo.s32 	%r9, %r22, %r21, %r29;
	// inline asm
	mov.u32 	%r24, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r25, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r26, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r27, %tid.y;
	// inline asm
	add.s32 	%r30, %r27, %r24;
	mad.lo.s32 	%r14, %r26, %r25, %r30;
	setp.lt.s32 	%p1, %r9, %r4;
	setp.lt.s32 	%p2, %r14, %r28;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB10_2;

	ret;

BB10_2:
	ld.param.u32 	%r46, [CalculateColumnMaxs_param_2];
	setp.gt.s32 	%p4, %r46, 0;
	@%p4 bra 	BB10_4;

	mov.f32 	%f7, 0fC61C4000;
	bra.uni 	BB10_6;

BB10_4:
	ld.param.u32 	%r48, [CalculateColumnMaxs_param_3];
	mad.lo.s32 	%r36, %r48, %r14, %r9;
	ld.param.u32 	%r45, [CalculateColumnMaxs_param_2];
	mul.lo.s32 	%r37, %r45, %r36;
	shl.b32 	%r38, %r37, 2;
	ld.param.u32 	%r43, [CalculateColumnMaxs_param_1];
	add.s32 	%r49, %r43, %r38;
	mov.f32 	%f7, 0fC61C4000;
	mov.u32 	%r50, 0;

BB10_5:
	ld.global.f32 	%f6, [%r49];
	setp.gt.f32 	%p5, %f7, %f6;
	selp.f32 	%f7, %f7, %f6, %p5;
	add.s32 	%r49, %r49, 4;
	add.s32 	%r50, %r50, 1;
	ld.param.u32 	%r44, [CalculateColumnMaxs_param_2];
	setp.lt.s32 	%p6, %r50, %r44;
	@%p6 bra 	BB10_5;

BB10_6:
	ld.param.u32 	%r47, [CalculateColumnMaxs_param_3];
	mad.lo.s32 	%r39, %r14, %r47, %r9;
	shl.b32 	%r40, %r39, 2;
	ld.param.u32 	%r42, [CalculateColumnMaxs_param_0];
	add.s32 	%r41, %r42, %r40;
	st.global.f32 	[%r41], %f7;
	ret;
}

.entry CalculateRowMaxs(
	.param .u32 .ptr .global .align 4 CalculateRowMaxs_param_0,
	.param .u32 .ptr .global .align 4 CalculateRowMaxs_param_1,
	.param .u32 CalculateRowMaxs_param_2,
	.param .u32 CalculateRowMaxs_param_3
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<34>;


	ld.param.u32 	%r18, [CalculateRowMaxs_param_3];
	// inline asm
	mov.u32 	%r14, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.x;
	// inline asm
	add.s32 	%r19, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r19;
	setp.lt.s32 	%p1, %r8, %r18;
	@%p1 bra 	BB11_2;

	ret;

BB11_2:
	ld.param.u32 	%r31, [CalculateRowMaxs_param_2];
	setp.gt.s32 	%p2, %r31, 0;
	@%p2 bra 	BB11_4;

	mov.f32 	%f7, 0fC61C4000;
	bra.uni 	BB11_6;

BB11_4:
	ld.param.u32 	%r30, [CalculateRowMaxs_param_2];
	mul.lo.s32 	%r23, %r30, %r8;
	shl.b32 	%r24, %r23, 2;
	ld.param.u32 	%r28, [CalculateRowMaxs_param_1];
	add.s32 	%r32, %r28, %r24;
	mov.f32 	%f7, 0fC61C4000;
	mov.u32 	%r33, 0;

BB11_5:
	ld.global.f32 	%f6, [%r32];
	setp.gt.f32 	%p3, %f7, %f6;
	selp.f32 	%f7, %f7, %f6, %p3;
	add.s32 	%r32, %r32, 4;
	add.s32 	%r33, %r33, 1;
	ld.param.u32 	%r29, [CalculateRowMaxs_param_2];
	setp.lt.s32 	%p4, %r33, %r29;
	@%p4 bra 	BB11_5;

BB11_6:
	shl.b32 	%r25, %r8, 2;
	ld.param.u32 	%r27, [CalculateRowMaxs_param_0];
	add.s32 	%r26, %r27, %r25;
	st.global.f32 	[%r26], %f7;
	ret;
}

.entry CalculateMaxAtomic(
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_0,
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_1,
	.param .u32 .ptr .global .align 4 CalculateMaxAtomic_param_2,
	.param .u32 CalculateMaxAtomic_param_3,
	.param .u32 CalculateMaxAtomic_param_4,
	.param .u32 CalculateMaxAtomic_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<7>;
	.reg .s32 	%r<38>;


	ld.param.u32 	%r4, [CalculateMaxAtomic_param_3];
	ld.param.u32 	%r5, [CalculateMaxAtomic_param_4];
	ld.param.u32 	%r22, [CalculateMaxAtomic_param_5];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r23, %r13, %r10;
	mad.lo.s32 	%r6, %r12, %r11, %r23;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r24, %r17, %r14;
	mad.lo.s32 	%r7, %r16, %r15, %r24;
	// inline asm
	mov.u32 	%r18, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.z;
	// inline asm
	add.s32 	%r25, %r21, %r18;
	mad.lo.s32 	%r8, %r20, %r19, %r25;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r8, %r22;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB12_3;

	ld.param.u32 	%r37, [CalculateMaxAtomic_param_4];
	mad.lo.s32 	%r26, %r8, %r37, %r7;
	ld.param.u32 	%r36, [CalculateMaxAtomic_param_3];
	mad.lo.s32 	%r9, %r26, %r36, %r6;
	shl.b32 	%r27, %r9, 2;
	ld.param.u32 	%r35, [CalculateMaxAtomic_param_2];
	add.s32 	%r28, %r35, %r27;
	ld.global.f32 	%f1, [%r28];
	setp.neu.f32 	%p6, %f1, 0f3F800000;
	@%p6 bra 	BB12_3;

	ld.param.u32 	%r34, [CalculateMaxAtomic_param_1];
	add.s32 	%r30, %r34, %r27;
	ld.global.f32 	%f2, [%r30];
	mul.f32 	%f3, %f2, 0f461C4000;
	cvt.rzi.s32.f32 	%r31, %f3;
	ld.param.u32 	%r33, [CalculateMaxAtomic_param_0];
	atom.global.max.s32 	%r32, [%r33], %r31;

BB12_3:
	ret;
}

.entry ThresholdVolume(
	.param .u32 .ptr .global .align 4 ThresholdVolume_param_0,
	.param .u32 .ptr .global .align 4 ThresholdVolume_param_1,
	.param .f32 ThresholdVolume_param_2,
	.param .u32 ThresholdVolume_param_3,
	.param .u32 ThresholdVolume_param_4,
	.param .u32 ThresholdVolume_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<7>;
	.reg .s32 	%r<35>;


	ld.param.u32 	%r3, [ThresholdVolume_param_3];
	ld.param.u32 	%r4, [ThresholdVolume_param_4];
	ld.param.u32 	%r21, [ThresholdVolume_param_5];
	// inline asm
	mov.u32 	%r9, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %tid.x;
	// inline asm
	add.s32 	%r22, %r12, %r9;
	mad.lo.s32 	%r5, %r11, %r10, %r22;
	// inline asm
	mov.u32 	%r13, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.y;
	// inline asm
	add.s32 	%r23, %r16, %r13;
	mad.lo.s32 	%r6, %r15, %r14, %r23;
	// inline asm
	mov.u32 	%r17, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.z;
	// inline asm
	add.s32 	%r24, %r20, %r17;
	mad.lo.s32 	%r7, %r19, %r18, %r24;
	setp.lt.s32 	%p1, %r5, %r3;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r7, %r21;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB13_2;

	ret;

BB13_2:
	ld.param.u32 	%r34, [ThresholdVolume_param_4];
	mad.lo.s32 	%r25, %r7, %r34, %r6;
	ld.param.u32 	%r33, [ThresholdVolume_param_3];
	mad.lo.s32 	%r26, %r25, %r33, %r5;
	shl.b32 	%r27, %r26, 2;
	ld.param.u32 	%r32, [ThresholdVolume_param_1];
	add.s32 	%r28, %r32, %r27;
	ld.global.f32 	%f2, [%r28];
	ld.param.f32 	%f3, [ThresholdVolume_param_2];
	setp.gt.f32 	%p6, %f2, %f3;
	ld.param.u32 	%r31, [ThresholdVolume_param_0];
	add.s32 	%r8, %r31, %r27;
	@%p6 bra 	BB13_4;

	mov.u32 	%r29, 981668463;
	st.global.u32 	[%r8], %r29;
	ret;

BB13_4:
	mov.u32 	%r30, 1065353216;
	st.global.u32 	[%r8], %r30;
	ret;
}

.entry RemoveMean(
	.param .u32 .ptr .global .align 4 RemoveMean_param_0,
	.param .u32 RemoveMean_param_1,
	.param .u32 RemoveMean_param_2,
	.param .u32 RemoveMean_param_3,
	.param .u32 RemoveMean_param_4
)
{
	.reg .f32 	%f<12>;
	.reg .pred 	%p<10>;
	.reg .s32 	%r<88>;


	ld.param.u32 	%r2, [RemoveMean_param_1];
	ld.param.u32 	%r3, [RemoveMean_param_2];
	ld.param.u32 	%r4, [RemoveMean_param_3];
	// inline asm
	mov.u32 	%r30, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r31, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r32, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r33, %tid.x;
	// inline asm
	add.s32 	%r42, %r33, %r30;
	mad.lo.s32 	%r43, %r32, %r31, %r42;
	// inline asm
	mov.u32 	%r34, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r35, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r36, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r37, %tid.y;
	// inline asm
	add.s32 	%r44, %r37, %r34;
	mad.lo.s32 	%r45, %r36, %r35, %r44;
	// inline asm
	mov.u32 	%r38, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r39, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r40, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r41, %tid.z;
	// inline asm
	add.s32 	%r46, %r41, %r38;
	mad.lo.s32 	%r47, %r40, %r39, %r46;
	setp.lt.s32 	%p1, %r43, %r2;
	setp.lt.s32 	%p2, %r45, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r47, %r4;
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB14_8;

	ld.param.u32 	%r83, [RemoveMean_param_4];
	setp.gt.s32 	%p6, %r83, 0;
	@%p6 bra 	BB14_3;

	mov.f32 	%f11, 0f00000000;
	bra.uni 	BB14_5;

BB14_3:
	ld.param.u32 	%r77, [RemoveMean_param_2];
	mad.lo.s32 	%r55, %r77, %r47, %r45;
	ld.param.u32 	%r75, [RemoveMean_param_1];
	mad.lo.s32 	%r56, %r75, %r55, %r43;
	shl.b32 	%r57, %r56, 2;
	ld.param.u32 	%r73, [RemoveMean_param_0];
	add.s32 	%r84, %r73, %r57;
	ld.param.u32 	%r79, [RemoveMean_param_3];
	mul.lo.s32 	%r58, %r79, %r77;
	mul.lo.s32 	%r59, %r58, %r75;
	shl.b32 	%r19, %r59, 2;
	mov.f32 	%f11, 0f00000000;
	mov.u32 	%r85, 0;

BB14_4:
	ld.global.f32 	%f7, [%r84];
	add.f32 	%f11, %f11, %f7;
	add.s32 	%r84, %r84, %r19;
	add.s32 	%r85, %r85, 1;
	ld.param.u32 	%r82, [RemoveMean_param_4];
	setp.lt.s32 	%p7, %r85, %r82;
	@%p7 bra 	BB14_4;

BB14_5:
	ld.param.u32 	%r81, [RemoveMean_param_4];
	cvt.rn.f32.s32 	%f8, %r81;
	div.full.f32 	%f4, %f11, %f8;
	setp.lt.s32 	%p8, %r81, 1;
	@%p8 bra 	BB14_8;

	ld.param.u32 	%r76, [RemoveMean_param_2];
	mad.lo.s32 	%r67, %r76, %r47, %r45;
	ld.param.u32 	%r74, [RemoveMean_param_1];
	mad.lo.s32 	%r68, %r74, %r67, %r43;
	shl.b32 	%r69, %r68, 2;
	ld.param.u32 	%r72, [RemoveMean_param_0];
	add.s32 	%r86, %r72, %r69;
	ld.param.u32 	%r78, [RemoveMean_param_3];
	mul.lo.s32 	%r70, %r78, %r76;
	mul.lo.s32 	%r71, %r70, %r74;
	shl.b32 	%r25, %r71, 2;
	mov.u32 	%r87, 0;

BB14_7:
	ld.global.f32 	%f9, [%r86];
	sub.f32 	%f10, %f9, %f4;
	st.global.f32 	[%r86], %f10;
	add.s32 	%r86, %r86, %r25;
	add.s32 	%r87, %r87, 1;
	ld.param.u32 	%r80, [RemoveMean_param_4];
	setp.lt.s32 	%p9, %r87, %r80;
	@%p9 bra 	BB14_7;

BB14_8:
	ret;
}

.entry AddVolume(
	.param .u32 .ptr .global .align 4 AddVolume_param_0,
	.param .f32 AddVolume_param_1,
	.param .u32 AddVolume_param_2,
	.param .u32 AddVolume_param_3,
	.param .u32 AddVolume_param_4
)
{
	.reg .f32 	%f<5>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<30>;


	ld.param.u32 	%r2, [AddVolume_param_2];
	ld.param.u32 	%r3, [AddVolume_param_3];
	ld.param.u32 	%r19, [AddVolume_param_4];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r20, %r10, %r7;
	mad.lo.s32 	%r4, %r9, %r8, %r20;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r21, %r14, %r11;
	mad.lo.s32 	%r5, %r13, %r12, %r21;
	// inline asm
	mov.u32 	%r15, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.z;
	// inline asm
	add.s32 	%r22, %r18, %r15;
	mad.lo.s32 	%r6, %r17, %r16, %r22;
	setp.lt.s32 	%p1, %r4, %r2;
	setp.lt.s32 	%p2, %r5, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB15_2;

	ret;

BB15_2:
	ld.param.u32 	%r29, [AddVolume_param_3];
	mad.lo.s32 	%r23, %r6, %r29, %r5;
	ld.param.u32 	%r28, [AddVolume_param_2];
	mad.lo.s32 	%r24, %r23, %r28, %r4;
	shl.b32 	%r25, %r24, 2;
	ld.param.u32 	%r27, [AddVolume_param_0];
	add.s32 	%r26, %r27, %r25;
	ld.global.f32 	%f2, [%r26];
	ld.param.f32 	%f4, [AddVolume_param_1];
	add.f32 	%f3, %f2, %f4;
	st.global.f32 	[%r26], %f3;
	ret;
}

.entry AddVolumes(
	.param .u32 .ptr .global .align 4 AddVolumes_param_0,
	.param .u32 .ptr .global .align 4 AddVolumes_param_1,
	.param .u32 .ptr .global .align 4 AddVolumes_param_2,
	.param .u32 AddVolumes_param_3,
	.param .u32 AddVolumes_param_4,
	.param .u32 AddVolumes_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<36>;


	ld.param.u32 	%r4, [AddVolumes_param_3];
	ld.param.u32 	%r5, [AddVolumes_param_4];
	ld.param.u32 	%r21, [AddVolumes_param_5];
	// inline asm
	mov.u32 	%r9, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %tid.x;
	// inline asm
	add.s32 	%r22, %r12, %r9;
	mad.lo.s32 	%r6, %r11, %r10, %r22;
	// inline asm
	mov.u32 	%r13, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.y;
	// inline asm
	add.s32 	%r23, %r16, %r13;
	mad.lo.s32 	%r7, %r15, %r14, %r23;
	// inline asm
	mov.u32 	%r17, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.z;
	// inline asm
	add.s32 	%r24, %r20, %r17;
	mad.lo.s32 	%r8, %r19, %r18, %r24;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r8, %r21;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB16_2;

	ret;

BB16_2:
	ld.param.u32 	%r35, [AddVolumes_param_4];
	mad.lo.s32 	%r25, %r8, %r35, %r7;
	ld.param.u32 	%r34, [AddVolumes_param_3];
	mad.lo.s32 	%r26, %r25, %r34, %r6;
	shl.b32 	%r27, %r26, 2;
	ld.param.u32 	%r32, [AddVolumes_param_1];
	add.s32 	%r28, %r32, %r27;
	ld.param.u32 	%r33, [AddVolumes_param_2];
	add.s32 	%r29, %r33, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	add.f32 	%f3, %f2, %f1;
	ld.param.u32 	%r31, [AddVolumes_param_0];
	add.s32 	%r30, %r31, %r27;
	st.global.f32 	[%r30], %f3;
	ret;
}

.entry SubtractVolumes(
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_0,
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_1,
	.param .u32 .ptr .global .align 4 SubtractVolumes_param_2,
	.param .u32 SubtractVolumes_param_3,
	.param .u32 SubtractVolumes_param_4,
	.param .u32 SubtractVolumes_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<36>;


	ld.param.u32 	%r4, [SubtractVolumes_param_3];
	ld.param.u32 	%r5, [SubtractVolumes_param_4];
	ld.param.u32 	%r21, [SubtractVolumes_param_5];
	// inline asm
	mov.u32 	%r9, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %tid.x;
	// inline asm
	add.s32 	%r22, %r12, %r9;
	mad.lo.s32 	%r6, %r11, %r10, %r22;
	// inline asm
	mov.u32 	%r13, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.y;
	// inline asm
	add.s32 	%r23, %r16, %r13;
	mad.lo.s32 	%r7, %r15, %r14, %r23;
	// inline asm
	mov.u32 	%r17, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.z;
	// inline asm
	add.s32 	%r24, %r20, %r17;
	mad.lo.s32 	%r8, %r19, %r18, %r24;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r8, %r21;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB17_2;

	ret;

BB17_2:
	ld.param.u32 	%r35, [SubtractVolumes_param_4];
	mad.lo.s32 	%r25, %r8, %r35, %r7;
	ld.param.u32 	%r34, [SubtractVolumes_param_3];
	mad.lo.s32 	%r26, %r25, %r34, %r6;
	shl.b32 	%r27, %r26, 2;
	ld.param.u32 	%r32, [SubtractVolumes_param_1];
	add.s32 	%r28, %r32, %r27;
	ld.param.u32 	%r33, [SubtractVolumes_param_2];
	add.s32 	%r29, %r33, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	sub.f32 	%f3, %f2, %f1;
	ld.param.u32 	%r31, [SubtractVolumes_param_0];
	add.s32 	%r30, %r31, %r27;
	st.global.f32 	[%r30], %f3;
	ret;
}

.entry AddVolumesOverwrite(
	.param .u32 .ptr .global .align 4 AddVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 AddVolumesOverwrite_param_1,
	.param .u32 AddVolumesOverwrite_param_2,
	.param .u32 AddVolumesOverwrite_param_3,
	.param .u32 AddVolumesOverwrite_param_4
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<33>;


	ld.param.u32 	%r3, [AddVolumesOverwrite_param_2];
	ld.param.u32 	%r4, [AddVolumesOverwrite_param_3];
	ld.param.u32 	%r20, [AddVolumesOverwrite_param_4];
	// inline asm
	mov.u32 	%r8, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %tid.x;
	// inline asm
	add.s32 	%r21, %r11, %r8;
	mad.lo.s32 	%r5, %r10, %r9, %r21;
	// inline asm
	mov.u32 	%r12, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.y;
	// inline asm
	add.s32 	%r22, %r15, %r12;
	mad.lo.s32 	%r6, %r14, %r13, %r22;
	// inline asm
	mov.u32 	%r16, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.z;
	// inline asm
	add.s32 	%r23, %r19, %r16;
	mad.lo.s32 	%r7, %r18, %r17, %r23;
	setp.lt.s32 	%p1, %r5, %r3;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r7, %r20;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB18_2;

	ret;

BB18_2:
	ld.param.u32 	%r32, [AddVolumesOverwrite_param_3];
	mad.lo.s32 	%r24, %r7, %r32, %r6;
	ld.param.u32 	%r31, [AddVolumesOverwrite_param_2];
	mad.lo.s32 	%r25, %r24, %r31, %r5;
	shl.b32 	%r26, %r25, 2;
	ld.param.u32 	%r29, [AddVolumesOverwrite_param_0];
	add.s32 	%r27, %r29, %r26;
	ld.param.u32 	%r30, [AddVolumesOverwrite_param_1];
	add.s32 	%r28, %r30, %r26;
	ld.global.f32 	%f1, [%r28];
	ld.global.f32 	%f2, [%r27];
	add.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r27], %f3;
	ret;
}

.entry SubtractVolumesOverwrite(
	.param .u32 .ptr .global .align 4 SubtractVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 SubtractVolumesOverwrite_param_1,
	.param .u32 SubtractVolumesOverwrite_param_2,
	.param .u32 SubtractVolumesOverwrite_param_3,
	.param .u32 SubtractVolumesOverwrite_param_4
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<33>;


	ld.param.u32 	%r3, [SubtractVolumesOverwrite_param_2];
	ld.param.u32 	%r4, [SubtractVolumesOverwrite_param_3];
	ld.param.u32 	%r20, [SubtractVolumesOverwrite_param_4];
	// inline asm
	mov.u32 	%r8, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %tid.x;
	// inline asm
	add.s32 	%r21, %r11, %r8;
	mad.lo.s32 	%r5, %r10, %r9, %r21;
	// inline asm
	mov.u32 	%r12, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.y;
	// inline asm
	add.s32 	%r22, %r15, %r12;
	mad.lo.s32 	%r6, %r14, %r13, %r22;
	// inline asm
	mov.u32 	%r16, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.z;
	// inline asm
	add.s32 	%r23, %r19, %r16;
	mad.lo.s32 	%r7, %r18, %r17, %r23;
	setp.lt.s32 	%p1, %r5, %r3;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r7, %r20;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB19_2;

	ret;

BB19_2:
	ld.param.u32 	%r32, [SubtractVolumesOverwrite_param_3];
	mad.lo.s32 	%r24, %r7, %r32, %r6;
	ld.param.u32 	%r31, [SubtractVolumesOverwrite_param_2];
	mad.lo.s32 	%r25, %r24, %r31, %r5;
	shl.b32 	%r26, %r25, 2;
	ld.param.u32 	%r29, [SubtractVolumesOverwrite_param_0];
	add.s32 	%r27, %r29, %r26;
	ld.param.u32 	%r30, [SubtractVolumesOverwrite_param_1];
	add.s32 	%r28, %r30, %r26;
	ld.global.f32 	%f1, [%r28];
	ld.global.f32 	%f2, [%r27];
	sub.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r27], %f3;
	ret;
}

.entry SubtractVolumesOverwriteDouble(
	.param .u32 .ptr .global .align 8 SubtractVolumesOverwriteDouble_param_0,
	.param .u32 .ptr .global .align 8 SubtractVolumesOverwriteDouble_param_1,
	.param .u32 SubtractVolumesOverwriteDouble_param_2,
	.param .u32 SubtractVolumesOverwriteDouble_param_3,
	.param .u32 SubtractVolumesOverwriteDouble_param_4
)
{
	.reg .f64 	%fd<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<33>;


	ld.param.u32 	%r3, [SubtractVolumesOverwriteDouble_param_2];
	ld.param.u32 	%r4, [SubtractVolumesOverwriteDouble_param_3];
	ld.param.u32 	%r20, [SubtractVolumesOverwriteDouble_param_4];
	// inline asm
	mov.u32 	%r8, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %tid.x;
	// inline asm
	add.s32 	%r21, %r11, %r8;
	mad.lo.s32 	%r5, %r10, %r9, %r21;
	// inline asm
	mov.u32 	%r12, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.y;
	// inline asm
	add.s32 	%r22, %r15, %r12;
	mad.lo.s32 	%r6, %r14, %r13, %r22;
	// inline asm
	mov.u32 	%r16, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.z;
	// inline asm
	add.s32 	%r23, %r19, %r16;
	mad.lo.s32 	%r7, %r18, %r17, %r23;
	setp.lt.s32 	%p1, %r5, %r3;
	setp.lt.s32 	%p2, %r6, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r7, %r20;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB20_2;

	ret;

BB20_2:
	ld.param.u32 	%r32, [SubtractVolumesOverwriteDouble_param_3];
	mad.lo.s32 	%r24, %r7, %r32, %r6;
	ld.param.u32 	%r31, [SubtractVolumesOverwriteDouble_param_2];
	mad.lo.s32 	%r25, %r24, %r31, %r5;
	shl.b32 	%r26, %r25, 3;
	ld.param.u32 	%r29, [SubtractVolumesOverwriteDouble_param_0];
	add.s32 	%r27, %r29, %r26;
	ld.param.u32 	%r30, [SubtractVolumesOverwriteDouble_param_1];
	add.s32 	%r28, %r30, %r26;
	ld.global.f64 	%fd1, [%r28];
	ld.global.f64 	%fd2, [%r27];
	sub.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%r27], %fd3;
	ret;
}

.entry MultiplyVolume(
	.param .u32 .ptr .global .align 4 MultiplyVolume_param_0,
	.param .f32 MultiplyVolume_param_1,
	.param .u32 MultiplyVolume_param_2,
	.param .u32 MultiplyVolume_param_3,
	.param .u32 MultiplyVolume_param_4
)
{
	.reg .f32 	%f<5>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<30>;


	ld.param.u32 	%r2, [MultiplyVolume_param_2];
	ld.param.u32 	%r3, [MultiplyVolume_param_3];
	ld.param.u32 	%r19, [MultiplyVolume_param_4];
	// inline asm
	mov.u32 	%r7, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r8, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %tid.x;
	// inline asm
	add.s32 	%r20, %r10, %r7;
	mad.lo.s32 	%r4, %r9, %r8, %r20;
	// inline asm
	mov.u32 	%r11, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %tid.y;
	// inline asm
	add.s32 	%r21, %r14, %r11;
	mad.lo.s32 	%r5, %r13, %r12, %r21;
	// inline asm
	mov.u32 	%r15, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %tid.z;
	// inline asm
	add.s32 	%r22, %r18, %r15;
	mad.lo.s32 	%r6, %r17, %r16, %r22;
	setp.lt.s32 	%p1, %r4, %r2;
	setp.lt.s32 	%p2, %r5, %r3;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r6, %r19;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB21_2;

	ret;

BB21_2:
	ld.param.u32 	%r29, [MultiplyVolume_param_3];
	mad.lo.s32 	%r23, %r6, %r29, %r5;
	ld.param.u32 	%r28, [MultiplyVolume_param_2];
	mad.lo.s32 	%r24, %r23, %r28, %r4;
	shl.b32 	%r25, %r24, 2;
	ld.param.u32 	%r27, [MultiplyVolume_param_0];
	add.s32 	%r26, %r27, %r25;
	ld.global.f32 	%f2, [%r26];
	ld.param.f32 	%f4, [MultiplyVolume_param_1];
	mul.f32 	%f3, %f2, %f4;
	st.global.f32 	[%r26], %f3;
	ret;
}

.entry MultiplyVolumes(
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_0,
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_1,
	.param .u32 .ptr .global .align 4 MultiplyVolumes_param_2,
	.param .u32 MultiplyVolumes_param_3,
	.param .u32 MultiplyVolumes_param_4,
	.param .u32 MultiplyVolumes_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<36>;


	ld.param.u32 	%r4, [MultiplyVolumes_param_3];
	ld.param.u32 	%r5, [MultiplyVolumes_param_4];
	ld.param.u32 	%r21, [MultiplyVolumes_param_5];
	// inline asm
	mov.u32 	%r9, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %tid.x;
	// inline asm
	add.s32 	%r22, %r12, %r9;
	mad.lo.s32 	%r6, %r11, %r10, %r22;
	// inline asm
	mov.u32 	%r13, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %tid.y;
	// inline asm
	add.s32 	%r23, %r16, %r13;
	mad.lo.s32 	%r7, %r15, %r14, %r23;
	// inline asm
	mov.u32 	%r17, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %tid.z;
	// inline asm
	add.s32 	%r24, %r20, %r17;
	mad.lo.s32 	%r8, %r19, %r18, %r24;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r5;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r8, %r21;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB22_2;

	ret;

BB22_2:
	ld.param.u32 	%r35, [MultiplyVolumes_param_4];
	mad.lo.s32 	%r25, %r8, %r35, %r7;
	ld.param.u32 	%r34, [MultiplyVolumes_param_3];
	mad.lo.s32 	%r26, %r25, %r34, %r6;
	shl.b32 	%r27, %r26, 2;
	ld.param.u32 	%r32, [MultiplyVolumes_param_1];
	add.s32 	%r28, %r32, %r27;
	ld.param.u32 	%r33, [MultiplyVolumes_param_2];
	add.s32 	%r29, %r33, %r27;
	ld.global.f32 	%f1, [%r29];
	ld.global.f32 	%f2, [%r28];
	mul.f32 	%f3, %f2, %f1;
	ld.param.u32 	%r31, [MultiplyVolumes_param_0];
	add.s32 	%r30, %r31, %r27;
	st.global.f32 	[%r30], %f3;
	ret;
}

.entry MultiplyVolumesOverwrite(
	.param .u32 .ptr .global .align 4 MultiplyVolumesOverwrite_param_0,
	.param .u32 .ptr .global .align 4 MultiplyVolumesOverwrite_param_1,
	.param .u32 MultiplyVolumesOverwrite_param_2,
	.param .u32 MultiplyVolumesOverwrite_param_3,
	.param .u32 MultiplyVolumesOverwrite_param_4,
	.param .u32 MultiplyVolumesOverwrite_param_5
)
{
	.reg .f32 	%f<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<40>;


	ld.param.u32 	%r3, [MultiplyVolumesOverwrite_param_2];
	ld.param.u32 	%r4, [MultiplyVolumesOverwrite_param_3];
	ld.param.u32 	%r5, [MultiplyVolumesOverwrite_param_4];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r22, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r22;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r23, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r23;
	// inline asm
	mov.u32 	%r18, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.z;
	// inline asm
	add.s32 	%r24, %r21, %r18;
	mad.lo.s32 	%r9, %r20, %r19, %r24;
	setp.lt.s32 	%p1, %r7, %r3;
	setp.lt.s32 	%p2, %r8, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB23_2;

	ret;

BB23_2:
	ld.param.u32 	%r37, [MultiplyVolumesOverwrite_param_3];
	mad.lo.s32 	%r25, %r9, %r37, %r8;
	ld.param.u32 	%r36, [MultiplyVolumesOverwrite_param_2];
	mad.lo.s32 	%r26, %r25, %r36, %r7;
	ld.param.u32 	%r38, [MultiplyVolumesOverwrite_param_4];
	ld.param.u32 	%r39, [MultiplyVolumesOverwrite_param_5];
	mad.lo.s32 	%r27, %r38, %r39, %r9;
	mad.lo.s32 	%r28, %r27, %r37, %r8;
	mad.lo.s32 	%r29, %r28, %r36, %r7;
	shl.b32 	%r30, %r29, 2;
	ld.param.u32 	%r34, [MultiplyVolumesOverwrite_param_0];
	add.s32 	%r31, %r34, %r30;
	shl.b32 	%r32, %r26, 2;
	ld.param.u32 	%r35, [MultiplyVolumesOverwrite_param_1];
	add.s32 	%r33, %r35, %r32;
	ld.global.f32 	%f1, [%r33];
	ld.global.f32 	%f2, [%r31];
	mul.f32 	%f3, %f2, %f1;
	st.global.f32 	[%r31], %f3;
	ret;
}

.entry MultiplyVolumesOverwriteDouble(
	.param .u32 .ptr .global .align 8 MultiplyVolumesOverwriteDouble_param_0,
	.param .u32 .ptr .global .align 8 MultiplyVolumesOverwriteDouble_param_1,
	.param .u32 MultiplyVolumesOverwriteDouble_param_2,
	.param .u32 MultiplyVolumesOverwriteDouble_param_3,
	.param .u32 MultiplyVolumesOverwriteDouble_param_4,
	.param .u32 MultiplyVolumesOverwriteDouble_param_5
)
{
	.reg .f64 	%fd<4>;
	.reg .pred 	%p<6>;
	.reg .s32 	%r<40>;


	ld.param.u32 	%r3, [MultiplyVolumesOverwriteDouble_param_2];
	ld.param.u32 	%r4, [MultiplyVolumesOverwriteDouble_param_3];
	ld.param.u32 	%r5, [MultiplyVolumesOverwriteDouble_param_4];
	// inline asm
	mov.u32 	%r10, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r11, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r12, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r13, %tid.x;
	// inline asm
	add.s32 	%r22, %r13, %r10;
	mad.lo.s32 	%r7, %r12, %r11, %r22;
	// inline asm
	mov.u32 	%r14, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r15, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r16, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r17, %tid.y;
	// inline asm
	add.s32 	%r23, %r17, %r14;
	mad.lo.s32 	%r8, %r16, %r15, %r23;
	// inline asm
	mov.u32 	%r18, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r19, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r20, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r21, %tid.z;
	// inline asm
	add.s32 	%r24, %r21, %r18;
	mad.lo.s32 	%r9, %r20, %r19, %r24;
	setp.lt.s32 	%p1, %r7, %r3;
	setp.lt.s32 	%p2, %r8, %r4;
	and.pred  	%p3, %p1, %p2;
	setp.lt.s32 	%p4, %r9, %r5;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB24_2;

	ret;

BB24_2:
	ld.param.u32 	%r37, [MultiplyVolumesOverwriteDouble_param_3];
	mad.lo.s32 	%r25, %r9, %r37, %r8;
	ld.param.u32 	%r36, [MultiplyVolumesOverwriteDouble_param_2];
	mad.lo.s32 	%r26, %r25, %r36, %r7;
	ld.param.u32 	%r38, [MultiplyVolumesOverwriteDouble_param_4];
	ld.param.u32 	%r39, [MultiplyVolumesOverwriteDouble_param_5];
	mad.lo.s32 	%r27, %r38, %r39, %r9;
	mad.lo.s32 	%r28, %r27, %r37, %r8;
	mad.lo.s32 	%r29, %r28, %r36, %r7;
	shl.b32 	%r30, %r29, 3;
	ld.param.u32 	%r34, [MultiplyVolumesOverwriteDouble_param_0];
	add.s32 	%r31, %r34, %r30;
	shl.b32 	%r32, %r26, 3;
	ld.param.u32 	%r35, [MultiplyVolumesOverwriteDouble_param_1];
	add.s32 	%r33, %r35, %r32;
	ld.global.f64 	%fd1, [%r33];
	ld.global.f64 	%fd2, [%r31];
	mul.f64 	%fd3, %fd2, %fd1;
	st.global.f64 	[%r31], %fd3;
	ret;
}

.entry MemsetInt(
	.param .u32 .ptr .global .align 4 MemsetInt_param_0,
	.param .u32 MemsetInt_param_1,
	.param .u32 MemsetInt_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .s32 	%r<14>;


	ld.param.u32 	%r8, [MemsetInt_param_2];
	// inline asm
	mov.u32 	%r4, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r5, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r6, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r7, %tid.x;
	// inline asm
	add.s32 	%r9, %r7, %r4;
	mad.lo.s32 	%r3, %r6, %r5, %r9;
	setp.lt.s32 	%p1, %r3, %r8;
	@%p1 bra 	BB25_2;

	ret;

BB25_2:
	shl.b32 	%r10, %r3, 2;
	ld.param.u32 	%r12, [MemsetInt_param_0];
	add.s32 	%r11, %r12, %r10;
	ld.param.u32 	%r13, [MemsetInt_param_1];
	st.global.u32 	[%r11], %r13;
	ret;
}

.entry Memset(
	.param .u32 .ptr .global .align 4 Memset_param_0,
	.param .f32 Memset_param_1,
	.param .u32 Memset_param_2
)
{
	.reg .f32 	%f<3>;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<12>;


	ld.param.u32 	%r7, [Memset_param_2];
	// inline asm
	mov.u32 	%r3, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r4, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r5, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r6, %tid.x;
	// inline asm
	add.s32 	%r8, %r6, %r3;
	mad.lo.s32 	%r2, %r5, %r4, %r8;
	setp.lt.s32 	%p1, %r2, %r7;
	@%p1 bra 	BB26_2;

	ret;

BB26_2:
	shl.b32 	%r9, %r2, 2;
	ld.param.u32 	%r11, [Memset_param_0];
	add.s32 	%r10, %r11, %r9;
	ld.param.f32 	%f2, [Memset_param_1];
	st.global.f32 	[%r10], %f2;
	ret;
}

.entry MemsetDouble(
	.param .u32 .ptr .global .align 8 MemsetDouble_param_0,
	.param .f64 MemsetDouble_param_1,
	.param .u32 MemsetDouble_param_2
)
{
	.reg .f64 	%fd<3>;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<12>;


	ld.param.u32 	%r7, [MemsetDouble_param_2];
	// inline asm
	mov.u32 	%r3, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r4, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r5, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r6, %tid.x;
	// inline asm
	add.s32 	%r8, %r6, %r3;
	mad.lo.s32 	%r2, %r5, %r4, %r8;
	setp.lt.s32 	%p1, %r2, %r7;
	@%p1 bra 	BB27_2;

	ret;

BB27_2:
	shl.b32 	%r9, %r2, 3;
	ld.param.u32 	%r11, [MemsetDouble_param_0];
	add.s32 	%r10, %r11, %r9;
	ld.param.f64 	%fd2, [MemsetDouble_param_1];
	st.global.f64 	[%r10], %fd2;
	ret;
}

.entry MemsetFloat2(
	.param .u32 .ptr .global .align 8 MemsetFloat2_param_0,
	.param .f32 MemsetFloat2_param_1,
	.param .u32 MemsetFloat2_param_2
)
{
	.reg .f32 	%f<5>;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<12>;


	ld.param.u32 	%r7, [MemsetFloat2_param_2];
	// inline asm
	mov.u32 	%r3, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r4, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r5, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r6, %tid.x;
	// inline asm
	add.s32 	%r8, %r6, %r3;
	mad.lo.s32 	%r2, %r5, %r4, %r8;
	setp.lt.s32 	%p1, %r2, %r7;
	@%p1 bra 	BB28_2;

	ret;

BB28_2:
	shl.b32 	%r9, %r2, 3;
	ld.param.u32 	%r11, [MemsetFloat2_param_0];
	add.s32 	%r10, %r11, %r9;
	ld.param.f32 	%f4, [MemsetFloat2_param_1];
	st.global.v2.f32 	[%r10], {%f4, %f4};
	ret;
}

.entry SliceTimingCorrection(
	.param .u32 .ptr .global .align 4 SliceTimingCorrection_param_0,
	.param .u32 .ptr .global .align 4 SliceTimingCorrection_param_1,
	.param .f32 SliceTimingCorrection_param_2,
	.param .u32 SliceTimingCorrection_param_3,
	.param .u32 SliceTimingCorrection_param_4,
	.param .u32 SliceTimingCorrection_param_5,
	.param .u32 SliceTimingCorrection_param_6
)
{
	.reg .f32 	%f<151>;
	.reg .pred 	%p<9>;
	.reg .s32 	%r<129>;


	ld.param.u32 	%r3, [SliceTimingCorrection_param_3];
	ld.param.u32 	%r4, [SliceTimingCorrection_param_4];
	// inline asm
	mov.u32 	%r35, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r36, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r37, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r38, %tid.x;
	// inline asm
	add.s32 	%r46, %r38, %r35;
	mad.lo.s32 	%r10, %r37, %r36, %r46;
	// inline asm
	mov.u32 	%r39, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r40, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r41, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r42, %tid.y;
	// inline asm
	add.s32 	%r47, %r42, %r39;
	mad.lo.s32 	%r15, %r41, %r40, %r47;
	setp.lt.s32 	%p1, %r10, %r3;
	setp.lt.s32 	%p2, %r15, %r4;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB29_2;

	ret;

BB29_2:
	ld.param.f32 	%f109, [SliceTimingCorrection_param_2];
	setp.gt.f32 	%p4, %f109, 0f00000000;
	ld.param.u32 	%r115, [SliceTimingCorrection_param_3];
	mad.lo.s32 	%r48, %r15, %r115, %r10;
	shl.b32 	%r49, %r48, 2;
	ld.param.u32 	%r109, [SliceTimingCorrection_param_1];
	add.s32 	%r17, %r109, %r49;
	ld.param.u32 	%r121, [SliceTimingCorrection_param_4];
	add.s32 	%r50, %r15, %r121;
	mad.lo.s32 	%r51, %r50, %r115, %r10;
	shl.b32 	%r52, %r51, 2;
	add.s32 	%r18, %r109, %r52;
	@%p4 bra 	BB29_9;

	ld.param.f32 	%f108, [SliceTimingCorrection_param_2];
	add.f32 	%f2, %f108, 0f3F800000;
	ld.global.f32 	%f123, [%r17];
	ld.global.f32 	%f126, [%r18];
	ld.param.u32 	%r124, [SliceTimingCorrection_param_6];
	add.s32 	%r19, %r124, -2;
	setp.gt.s32 	%p5, %r19, 0;
	@%p5 bra 	BB29_5;

	mov.f32 	%f124, %f123;
	mov.f32 	%f125, %f123;
	bra.uni 	BB29_8;

BB29_5:
	mul.f32 	%f5, %f2, %f2;
	add.s32 	%r55, %r35, %r38;
	mad.lo.s32 	%r56, %r37, %r36, %r55;
	ld.param.u32 	%r114, [SliceTimingCorrection_param_3];
	mad.lo.s32 	%r59, %r114, %r15, %r56;
	shl.b32 	%r60, %r59, 2;
	ld.param.u32 	%r106, [SliceTimingCorrection_param_0];
	add.s32 	%r20, %r106, %r60;
	ld.param.u32 	%r120, [SliceTimingCorrection_param_4];
	mul.lo.s32 	%r61, %r120, %r114;
	shl.b32 	%r21, %r61, 2;
	shl.b32 	%r62, %r120, 1;
	add.s32 	%r63, %r15, %r62;
	mad.lo.s32 	%r64, %r114, %r63, %r56;
	shl.b32 	%r65, %r64, 2;
	ld.param.u32 	%r108, [SliceTimingCorrection_param_1];
	add.s32 	%r22, %r108, %r65;
	mov.u32 	%r126, 0;
	mov.u32 	%r125, %r126;
	mov.f32 	%f130, %f126;
	mov.f32 	%f127, %f123;
	mov.f32 	%f128, %f123;
	mov.f32 	%f129, %f123;

BB29_6:
	mov.f32 	%f112, %f129;
	mov.f32 	%f110, %f128;
	mov.f32 	%f9, %f127;
	mov.f32 	%f6, %f130;
	mov.f32 	%f7, %f112;
	mov.f32 	%f8, %f110;
	sub.f32 	%f28, %f6, %f7;
	sub.f32 	%f29, %f28, %f9;
	add.f32 	%f30, %f29, %f8;
	sub.f32 	%f31, %f9, %f8;
	sub.f32 	%f32, %f31, %f30;
	mul.f32 	%f33, %f30, %f2;
	mul.f32 	%f34, %f32, %f5;
	fma.rn.f32 	%f35, %f33, %f5, %f34;
	sub.f32 	%f36, %f7, %f9;
	fma.rn.f32 	%f37, %f36, %f2, %f35;
	add.f32 	%f38, %f37, %f8;
	add.s32 	%r66, %r20, %r125;
	st.global.f32 	[%r66], %f38;
	add.s32 	%r67, %r22, %r125;
	ld.global.f32 	%f130, [%r67];
	add.s32 	%r125, %r125, %r21;
	add.s32 	%r126, %r126, 1;
	setp.lt.s32 	%p6, %r126, %r19;
	mov.f32 	%f127, %f8;
	mov.f32 	%f128, %f7;
	mov.f32 	%f129, %f6;
	@%p6 bra 	BB29_6;

	mov.f32 	%f123, %f8;
	mov.f32 	%f124, %f7;
	mov.f32 	%f125, %f6;
	mov.f32 	%f126, %f130;

BB29_8:
	sub.f32 	%f39, %f126, %f125;
	sub.f32 	%f40, %f39, %f123;
	add.f32 	%f41, %f40, %f124;
	sub.f32 	%f42, %f123, %f124;
	sub.f32 	%f43, %f42, %f41;
	mul.f32 	%f44, %f41, %f2;
	mul.f32 	%f45, %f2, %f2;
	mul.f32 	%f46, %f43, %f45;
	fma.rn.f32 	%f47, %f44, %f45, %f46;
	sub.f32 	%f48, %f125, %f123;
	fma.rn.f32 	%f49, %f48, %f2, %f47;
	add.f32 	%f50, %f49, %f124;
	ld.param.u32 	%r119, [SliceTimingCorrection_param_4];
	mad.lo.s32 	%r68, %r19, %r119, %r15;
	ld.param.u32 	%r113, [SliceTimingCorrection_param_3];
	mad.lo.s32 	%r69, %r68, %r113, %r10;
	shl.b32 	%r70, %r69, 2;
	ld.param.u32 	%r105, [SliceTimingCorrection_param_0];
	add.s32 	%r71, %r105, %r70;
	st.global.f32 	[%r71], %f50;
	sub.f32 	%f51, %f126, %f126;
	sub.f32 	%f52, %f51, %f124;
	add.f32 	%f53, %f52, %f125;
	sub.f32 	%f54, %f124, %f125;
	sub.f32 	%f55, %f54, %f53;
	mul.f32 	%f56, %f53, %f2;
	mul.f32 	%f57, %f55, %f45;
	fma.rn.f32 	%f58, %f56, %f45, %f57;
	sub.f32 	%f59, %f126, %f124;
	fma.rn.f32 	%f60, %f59, %f2, %f58;
	add.f32 	%f61, %f60, %f125;
	ld.param.u32 	%r123, [SliceTimingCorrection_param_6];
	add.s32 	%r72, %r123, -1;
	mad.lo.s32 	%r73, %r72, %r119, %r15;
	mad.lo.s32 	%r74, %r73, %r113, %r10;
	shl.b32 	%r75, %r74, 2;
	add.s32 	%r76, %r105, %r75;
	st.global.f32 	[%r76], %f61;
	ret;

BB29_9:
	ld.global.f32 	%f143, [%r17];
	ld.param.u32 	%r112, [SliceTimingCorrection_param_3];
	ld.param.u32 	%r118, [SliceTimingCorrection_param_4];
	mul.lo.s32 	%r77, %r118, %r112;
	shl.b32 	%r78, %r77, 2;
	add.s32 	%r79, %r17, %r78;
	ld.global.f32 	%f145, [%r79];
	add.s32 	%r80, %r79, %r78;
	ld.global.f32 	%f146, [%r80];
	ld.param.u32 	%r122, [SliceTimingCorrection_param_6];
	add.s32 	%r27, %r122, -3;
	setp.gt.s32 	%p7, %r27, 0;
	@%p7 bra 	BB29_11;

	mov.f32 	%f144, %f143;
	bra.uni 	BB29_14;

BB29_11:
	ld.param.f32 	%f107, [SliceTimingCorrection_param_2];
	mul.f32 	%f18, %f107, %f107;
	add.s32 	%r83, %r35, %r38;
	mad.lo.s32 	%r84, %r37, %r36, %r83;
	ld.param.u32 	%r111, [SliceTimingCorrection_param_3];
	mad.lo.s32 	%r87, %r111, %r15, %r84;
	shl.b32 	%r88, %r87, 2;
	ld.param.u32 	%r104, [SliceTimingCorrection_param_0];
	add.s32 	%r28, %r104, %r88;
	ld.param.u32 	%r117, [SliceTimingCorrection_param_4];
	mul.lo.s32 	%r89, %r117, %r111;
	shl.b32 	%r29, %r89, 2;
	mad.lo.s32 	%r90, %r117, 3, %r15;
	mad.lo.s32 	%r91, %r111, %r90, %r84;
	shl.b32 	%r92, %r91, 2;
	ld.param.u32 	%r107, [SliceTimingCorrection_param_1];
	add.s32 	%r30, %r107, %r92;
	mov.u32 	%r128, 0;
	mov.u32 	%r127, %r128;
	mov.f32 	%f150, %f146;
	mov.f32 	%f149, %f145;
	mov.f32 	%f147, %f143;
	mov.f32 	%f148, %f143;

BB29_12:
	mov.f32 	%f133, %f149;
	mov.f32 	%f131, %f148;
	mov.f32 	%f22, %f147;
	mov.f32 	%f19, %f150;
	mov.f32 	%f20, %f133;
	mov.f32 	%f21, %f131;
	sub.f32 	%f62, %f19, %f20;
	sub.f32 	%f63, %f62, %f22;
	add.f32 	%f64, %f63, %f21;
	sub.f32 	%f65, %f22, %f21;
	sub.f32 	%f66, %f65, %f64;
	ld.param.f32 	%f106, [SliceTimingCorrection_param_2];
	mul.f32 	%f67, %f64, %f106;
	mul.f32 	%f68, %f66, %f18;
	fma.rn.f32 	%f69, %f67, %f18, %f68;
	sub.f32 	%f70, %f20, %f22;
	fma.rn.f32 	%f71, %f70, %f106, %f69;
	add.f32 	%f72, %f71, %f21;
	add.s32 	%r93, %r28, %r127;
	st.global.f32 	[%r93], %f72;
	add.s32 	%r94, %r30, %r127;
	ld.global.f32 	%f150, [%r94];
	add.s32 	%r127, %r127, %r29;
	add.s32 	%r128, %r128, 1;
	setp.lt.s32 	%p8, %r128, %r27;
	mov.f32 	%f147, %f21;
	mov.f32 	%f148, %f20;
	mov.f32 	%f149, %f19;
	@%p8 bra 	BB29_12;

	mov.f32 	%f143, %f21;
	mov.f32 	%f144, %f20;
	mov.f32 	%f145, %f19;
	mov.f32 	%f146, %f150;

BB29_14:
	sub.f32 	%f73, %f146, %f145;
	sub.f32 	%f74, %f73, %f143;
	add.f32 	%f75, %f74, %f144;
	sub.f32 	%f76, %f143, %f144;
	sub.f32 	%f77, %f76, %f75;
	ld.param.f32 	%f105, [SliceTimingCorrection_param_2];
	mul.f32 	%f78, %f75, %f105;
	mul.f32 	%f79, %f105, %f105;
	mul.f32 	%f80, %f77, %f79;
	fma.rn.f32 	%f81, %f78, %f79, %f80;
	sub.f32 	%f82, %f145, %f143;
	fma.rn.f32 	%f83, %f82, %f105, %f81;
	add.f32 	%f84, %f83, %f144;
	ld.param.u32 	%r116, [SliceTimingCorrection_param_4];
	mad.lo.s32 	%r95, %r27, %r116, %r15;
	ld.param.u32 	%r110, [SliceTimingCorrection_param_3];
	mad.lo.s32 	%r96, %r95, %r110, %r10;
	shl.b32 	%r97, %r96, 2;
	ld.param.u32 	%r103, [SliceTimingCorrection_param_0];
	add.s32 	%r98, %r103, %r97;
	st.global.f32 	[%r98], %f84;
	sub.f32 	%f85, %f146, %f146;
	sub.f32 	%f86, %f85, %f144;
	add.f32 	%f87, %f86, %f145;
	sub.f32 	%f88, %f144, %f145;
	sub.f32 	%f89, %f88, %f87;
	mul.f32 	%f90, %f87, %f105;
	mul.f32 	%f91, %f89, %f79;
	fma.rn.f32 	%f92, %f90, %f79, %f91;
	sub.f32 	%f93, %f146, %f144;
	fma.rn.f32 	%f94, %f93, %f105, %f92;
	add.f32 	%f95, %f94, %f145;
	mul.lo.s32 	%r99, %r116, %r110;
	shl.b32 	%r100, %r99, 2;
	add.s32 	%r101, %r98, %r100;
	st.global.f32 	[%r101], %f95;
	sub.f32 	%f96, %f85, %f145;
	add.f32 	%f97, %f96, %f146;
	sub.f32 	%f98, %f145, %f146;
	sub.f32 	%f99, %f98, %f97;
	mul.f32 	%f100, %f97, %f105;
	mul.f32 	%f101, %f99, %f79;
	fma.rn.f32 	%f102, %f100, %f79, %f101;
	fma.rn.f32 	%f103, %f73, %f105, %f102;
	add.f32 	%f104, %f103, %f146;
	add.s32 	%r102, %r101, %r100;
	st.global.f32 	[%r102], %f104;
	ret;
}

.entry CalculateMagnitudes(
	.param .u32 .ptr .global .align 4 CalculateMagnitudes_param_0,
	.param .u32 .ptr .global .align 8 CalculateMagnitudes_param_1,
	.param .u32 CalculateMagnitudes_param_2,
	.param .u32 CalculateMagnitudes_param_3,
	.param .u32 CalculateMagnitudes_param_4
)
{
	.reg .f32 	%f<8>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<34>;


	ld.param.u32 	%r4, [CalculateMagnitudes_param_3];
	ld.param.u32 	%r20, [CalculateMagnitudes_param_4];
	// inline asm
	mov.u32 	%r8, %envreg3;
	// inline asm
	// inline asm
	mov.u32 	%r9, %ntid.x;
	// inline asm
	// inline asm
	mov.u32 	%r10, %ctaid.x;
	// inline asm
	// inline asm
	mov.u32 	%r11, %tid.x;
	// inline asm
	add.s32 	%r21, %r11, %r8;
	mad.lo.s32 	%r5, %r10, %r9, %r21;
	// inline asm
	mov.u32 	%r12, %envreg4;
	// inline asm
	// inline asm
	mov.u32 	%r13, %ntid.y;
	// inline asm
	// inline asm
	mov.u32 	%r14, %ctaid.y;
	// inline asm
	// inline asm
	mov.u32 	%r15, %tid.y;
	// inline asm
	add.s32 	%r22, %r15, %r12;
	mad.lo.s32 	%r6, %r14, %r13, %r22;
	// inline asm
	mov.u32 	%r16, %envreg5;
	// inline asm
	// inline asm
	mov.u32 	%r17, %ntid.z;
	// inline asm
	// inline asm
	mov.u32 	%r18, %ctaid.z;
	// inline asm
	// inline asm
	mov.u32 	%r19, %tid.z;
	// inline asm
	add.s32 	%r23, %r19, %r16;
	mad.lo.s32 	%r7, %r18, %r17, %r23;
	setp.lt.s32 	%p1, %r6, %r4;
	setp.lt.s32 	%p2, %r7, %r20;
	and.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB30_2;

	ret;

BB30_2:
	ld.param.u32 	%r33, [CalculateMagnitudes_param_3];
	mad.lo.s32 	%r24, %r7, %r33, %r6;
	ld.param.u32 	%r32, [CalculateMagnitudes_param_2];
	mad.lo.s32 	%r25, %r24, %r32, %r5;
	shl.b32 	%r26, %r25, 3;
	ld.param.u32 	%r31, [CalculateMagnitudes_param_1];
	add.s32 	%r27, %r31, %r26;
	ld.global.v2.f32 	{%f6, %f7}, [%r27];
	mul.f32 	%f5, %f7, %f7;
	fma.rn.f32 	%f2, %f6, %f6, %f5;
	// inline asm
	sqrt.approx.f32 	%f1, %f2;
	// inline asm
	shl.b32 	%r28, %r25, 2;
	ld.param.u32 	%r30, [CalculateMagnitudes_param_0];
	add.s32 	%r29, %r30, %r28;
	st.global.f32 	[%r29], %f1;
	ret;
}


